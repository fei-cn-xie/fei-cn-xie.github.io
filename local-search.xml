<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025-01-14-Tue-T-统一建模语言(UML)指南</title>
    <link href="/2025/01/14/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/"/>
    <url>/2025/01/14/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="统一建模语言-UML-指南"><a href="#统一建模语言-UML-指南" class="headerlink" title="统一建模语言(UML)指南"></a>统一建模语言(UML)指南</h1><p>文章来源<a href="https://www.visual-paradigm.com/cn/guide/uml-unified-modeling-language/what-is-uml/">visual Paradigm</a></p><p>UML 是统一建模语言的简称，它是一种由一整套图表组成的标准化建模语言。UML用于帮助系统开发人员阐明，展示，构建和记录软件系统的产出。UML代表了一系列在大型而复杂系统建模中被证明是成功的做法，是开发面向对象软件和软件开发过程中非常重要的一部分。UML主要使用图形符号来表示软件项目的设计，使用UML可以帮助项目团队沟通、探索潜在的设计和验证软件的架构设计。以下我们将向您详细介绍什么是UML、UML的历史以及每个UML图类型的描述，辅之以UML示例。</p><blockquote><p>然而，在软件工程中，大多数从业者不使用UML，而是产生非正式的手绘图；不过，这些图例中仍往往包括UML的元素  </p></blockquote><h2 id="UML-的起源"><a href="#UML-的起源" class="headerlink" title="UML 的起源"></a>UML 的起源</h2><p>UML 的目标是提供一个标准的符号，可以被所有面向对象的方法使用，并选择和整合前兆符号的最佳元素。UML可用于广泛的应用程序，它为不同的系统和活动（如分布式系统，分析，系统设计和部署）提供​​了构造。</p><p>UML 是由 OMT 统一而来的符号，时序如下： </p><ol><li>对象建模技术OMT [James Rumbaugh 1991] - 最适合分析和数据密集型信息系统。</li><li>Booch [Grady Booch 1994] - 强项为设计和写作。Grady Booch 曾经为 Ada 语言方面做过广泛的工作，并且一直是该语言面向对象技术发展的主要参与者。尽管 Booch 方法很强大，但是但并未广为接受 （因为他的模型包含着很多云状，序人不整齐的感觉）</li><li>OOSE（面向对象的软件工程[Ivar Jacobson 1992]） - 有一个称为用例的模型。用例是理解整个系统行为的强大技术（OO传统上很弱的领域）。</li></ol><p>到了 1995 年，OOSE的创建者 Ivar Jacobson 也加入了Rational，他的想法（特别是有关“用例” (Use Case) 的概念）被整合于统一方法中，成为“统一建模语言”。Rumbaugh，Booch 和 Jacobson 的团队则被称为“三友”</p><p>UML 也受到其他面向对象符号的影响：</p><ul><li>Mellor 和 Shlaer [1998]</li><li>Coad 和 Yourdon [1995]</li><li>Wirfs-Brock [1990]</li><li>Martin 和 Odell [1992]<br>UML 还包含其他主要方法中不存在的新概念，如扩展机制和约束语言。</li></ul><h2 id="UML-的历史"><a href="#UML-的历史" class="headerlink" title="UML 的历史"></a>UML 的历史</h2><ol><li>在 1996 年间，由 Object Management Group （OMG） 发布的第一个征求建议书 （RFP），成为让这些组织联合起来的催化剂。</li><li>Rational 与几个愿意为加强 UML 1.0 投入资源的组织建立了 UML 伙伴联盟。那些对 UML 1.0 最有贡献的人包括：</li></ol><ul><li>Digital Equipment Corp</li><li>HP</li><li>I-Logix</li><li>IntelliCorp</li><li>IBM</li><li>ICON Computing</li><li>MCI Systemhouse</li><li>微软</li><li>甲骨文</li><li>Rational 软件</li><li>TI</li><li>Unisys公司</li></ul><ol start="3"><li>这次合作产生了UML 1.0，一个有明确定义，表达力强大且通用的建模语言。UML 1.0 在 1997 年 1 月提交给 OMG，作为最初的 RFP 回应。</li><li>1997 年 1 月，IBM，ObjecTime，Platinum Technology，Ptech，Taskon，Reich Technologies 和 Softeam 也相继向 OMG 提交了 RFP 回应。这些公司加入了伙伴联盟，贡献了他们的想法，并一起制定了经修订的 UML 1.1。UML 1.1 的重点是提高 UML 1.0 语义的清晰度，并纳入来自新合作伙伴的意见。UML 1.1 被提交给 OMG 供考虑，并在 1997 年秋季被采用，及后被改良，版本从 1.1 渐渐提高到 1.5，并于 2001 到 2006 年内提高到 2.1 （现在的 UML 版本为 2.5）</li></ol><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image.png" alt="alt text">  </p><h2 id="为何用-UML？-UML-有什么好？"><a href="#为何用-UML？-UML-有什么好？" class="headerlink" title="为何用 UML？ UML 有什么好？"></a>为何用 UML？ UML 有什么好？</h2><p>随着软件产品的价值提高，企业欲寻找技术以改善软件生产流程、提高质量、降低成本并缩短产品上市时间。这些技术包括组件技术，可视化编程，模式和框架的应用。企业也寻求能管理系统因范围和规模扩大而衍生的复杂性的技术。他们也意识到需要解决周期性的体系结构问题，如物理分布、并发性、复制、安全性、负载平衡和容错性。另外，万维网的开发虽然让不少事物简化，却加剧了这些架构问题。统一建模语言（UML）旨在回应这些需求。Page-Jones 在 Fundamental Object-Oriented Design in UML 一书中总结了 UML 的主要目的，如下： </p><ul><li>为用户提供现成的、有表现力的可视化建模语言，以便他们开发和交换有意义的模型。</li><li>为核心概念提供可扩展性 (Extensibility) 和特殊化 (Specialization) 机制。</li><li>独立于特定的编程语言和开发过程。</li><li>为了解建模语言提供一个正式的基础。</li><li>鼓励面向对象工具市场的发展。</li><li>支持更高层次的开发概念，如协作，框架，模式和组件。</li><li>整合最佳的工作方法 (Best Practices)。</li></ul><h2 id="UML-概述"><a href="#UML-概述" class="headerlink" title="UML - 概述"></a>UML - 概述</h2><p>在我们开始研究 UML 的理论之前，我们将简单介绍一下 UML 的一些主要概念。</p><p>首先要注意的是 UML 涉及很多不同的图表（模型），其原因是提供从许多不同的角度来审视系统。软件开发流程往往有许多持分者参与其中，例如：</p><ul><li>分析师</li><li>设计师</li><li>程序员</li><li>测试员</li><li>质量保证员</li><li>客户</li><li>技术文件撰稿员</li></ul><p>这些人都对系统的不同方面各持不同兴趣，故此在建模时需要考虑不同的细节层次。例如，程序员需要了解系统的设计，并将设计转换为代码，而技术文件撰稿员则对整个系统的行为感兴趣，借以了解产品的功能。UML 提供了极富表达能力的建模语言，好让各持分者至少可以从一个 UML 图表得到感兴趣的资讯。  </p><p>以下简要地介绍了这 13 个 UML 图表。UML 图表可大致分为结构性图表和行为性图表两种。</p><p>结构性图表显示了系统在不同抽象层次和实现层次上的静态结构以及它们之间的相互关系。结构性图表中的元素表示系统中具意义的概念，可能包括抽象的、现实的和實作的概念。</p><ul><li>结构性图表有七种类型：  <ul><li>类图 (Class Diagram)</li><li>组件图 (Component Diagram)</li><li>部署图 (Deployment Diagram)</li><li>对象图 (Object Diagram)</li><li>包图 (Package Diagram)</li><li>复合结构图 (Composite Structure Diagram)</li><li>轮廓图 (Profile Diagram)</li></ul></li></ul><p>行为性图表显示了系统中对象的动态行为 ，可用以表达系统随时间的变化。</p><ul><li>行为性图表有七种类型：<ul><li>用例图 (Use Case Diagram)</li><li>活动图 (Activity Diagram)</li><li>状态机图 (State Machine Diagram)</li><li>序列图 (Sequence Diagram)</li><li>通訊圖 (Communication Diagram)</li><li>交互概述图 (Interaction Overview Diagram)</li><li>时序图 (Timing Diagram)</li></ul></li></ul><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-1.png" alt="alt text"></p><h3 id="什么是类图？"><a href="#什么是类图？" class="headerlink" title="什么是类图？"></a>什么是类图？</h3><p>类图是一切面向对象方法的核心建模工具。该图描述了系统中对象的类型以及它们之间存在的各种静态关系。<br>有三种主要的关系：</p><ul><li>关联 - 代表类型之间的关系（一个人为公司工作，一间公司有多个办事处）。</li><li>继承 - 专为将实例关系图 (ERD) 应用于面向对象设计而设的一种关系。它在面向对象设计中的继承概念互相呼应。</li><li>聚合 - 面向对象设计中的一种对象组合 的形式。</li></ul><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-2.png" alt="alt text">  </p><h3 id="什么是组件图？"><a href="#什么是组件图？" class="headerlink" title="什么是组件图？"></a>什么是组件图？</h3><p>在统一建模语言中，组件图描绘了组件如何连接在一起以形成更大的组件或软件系统。它展示了软件组件的体系结构以及它们之间的依赖关系。那些软件组件包括运行时组件，可执行组件和源代码组件。</p><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-3.png" alt="alt text">  </p><h3 id="什么是部署图？"><a href="#什么是部署图？" class="headerlink" title="什么是部署图？"></a>什么是部署图？</h3><p>部署图有助于模拟面向对象软件系统的物理方面。它是一个结构性图表，显示了软件产出于系统架构内如何被分发至指定目标。产出即现实生活中各种通过开发过程产生的产品。部署图对运行时配置进行建模，并可视化应用程序中 产出的分布。在大多数情况下，它表达了硬件配置以及和软件组件之间的关系。</p><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-4.png" alt="alt text"></p><h3 id="什么是组合结构图？"><a href="#什么是组合结构图？" class="headerlink" title="什么是组合结构图？"></a>什么是组合结构图？</h3><p>组合结构图是添加到 UML 2.0 中的新的图表之一。复合结构图与类图相似，是一种用于微观视角的系统建模组件图，而不是整个类的组成部分。它是一种静态结构图，显示了一个类的内部结构和这个结构所实现的协作。</p><p>组合结构图可以包括内部零件，零件通过其互相交互或通过端口与外界交互。复合结构是一组相互关联的元素，它们在运行时进行协作以达到某种目的。每个元素在协作中都有一些定义的角色。  </p><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-5.png" alt="alt text">  </p><h3 id="什么是轮廓图-？"><a href="#什么是轮廓图-？" class="headerlink" title="什么是轮廓图 ？"></a>什么是轮廓图 ？</h3><p>轮廓图 使您能够创建特定于域和平台的原型，并定义它们之间的关系</p><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-6.png" alt="alt text"></p><h3 id="什么是用例图？"><a href="#什么是用例图？" class="headerlink" title="什么是用例图？"></a>什么是用例图？</h3><p>用例模型从用例的角度描述系统的功能需求，它是系统预期功能（用例）及其环境（参与者）的模型。用例使您能够将系统需要与系统如何满足这些需求相关联。</p><p>将用例模型想象成一个菜单，就像在餐馆中找到的菜单一样，通过查看菜单，你知道什么菜肴以及他们的价格，你也知道餐厅供应什么样的菜肴：意大利，墨西哥，中国等等。通过查看菜单，您可以对该餐厅的用餐体验有个全面的了解。</p><p>因为它是一个非常强大的计划工具，所以团队成员通常在开发周期的所有阶段都使用用例模型。  </p><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-7.png" alt="alt text"></p><h3 id="什么是活动图？"><a href="#什么是活动图？" class="headerlink" title="什么是活动图？"></a>什么是活动图？</h3><p>活动图用于展示工作流程，它支持选择 (Choice)，迭代 (Iteration)和并发 (Concurrency)。活动图描述了目标系统的控制流程，比如探索复杂的业务规则和操作，描述用例和业务流程。在统一建模语言中，活动图旨在模拟计算和组织过程（即工作流程）。  </p><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-8.png" alt="alt text"></p><h3 id="什么是状态机图？"><a href="#什么是状态机图？" class="headerlink" title="什么是状态机图？"></a>什么是状态机图？</h3><p>状态图是 UML 中用来描述基于 David Harel 的状态图概念的系统行为的一种图表。状态图描绘允许的状态和转换以及影响这些转换的事件，它有助于可视化对象的整个生命周期，从而更好地理解以状态主导 (State-based) 的系统。<br><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-9.png" alt="alt text">  </p><h3 id="什么是序列图？"><a href="#什么是序列图？" class="headerlink" title="什么是序列图？"></a>什么是序列图？</h3><p>序列图根据时间序列展示对象如何进行协作。它展示了在用例的特定场景中，对象如何与其他对象交互。凭借先进的可视化建模功能，您只需点击几下即可创建复杂的顺序图。另外，Visual Paradigm 可以根据用例描述中定义的事件流生成序列图。  </p><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-10.png" alt="alt text">  </p><h3 id="什么是通讯图"><a href="#什么是通讯图" class="headerlink" title="什么是通讯图"></a>什么是通讯图</h3><p>与序列图类似，通訊圖也用于模拟用例的动态行为。与序列图相比，通讯图更侧重于显示对象的协作而不是时间顺序。它们实际上在语义上是等价的，因此一些建模工具（如 Visual Paradigm）允许您从一个模型生成一个到另一个。  </p><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-11.png" alt="alt text"></p><h3 id="什么是交互概览图？"><a href="#什么是交互概览图？" class="headerlink" title="什么是交互概览图？"></a>什么是交互概览图？</h3><p>交互概述图侧重于交互控制流程的概述，它是活动图的变体，其中节点是交互 (Interactions) 或交互发生 (Interaction Occurrences)。交互概述图描述了隐藏於消息 (Message) 和生命线 (Lifeline) 間的交互。  </p><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-13.png" alt="alt text"></p><h3 id="什么是时序图？"><a href="#什么是时序图？" class="headerlink" title="什么是时序图？"></a>什么是时序图？</h3><p><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-12.png" alt="alt text"><br><img src="/2025-01-14-Tue-T-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80(UML)%E6%8C%87%E5%8D%97/image-14.png" alt="alt text"></p><h2 id="UML词汇表和术语"><a href="#UML词汇表和术语" class="headerlink" title="UML词汇表和术语:"></a>UML词汇表和术语:</h2><ul><li>抽象类：一个永远不会被实例化的类。这个类的一个实例永远不会存在。</li><li>Actor（演员）：发起系统参与的事件的对象或人物。</li><li>活动：活动图中的步骤或行动。表示系统或演员采取的行动。</li><li>活动图：一个美化的流程图，显示了流程中的步骤和决定以及并行操作，如算法或业务流程。</li><li>聚合：是另一类的一部分。图中的包含类旁边有一个空心钻石。</li><li>工件：描述设计过程中某个步骤输出的文档。描述是图形，文字或其他组合。</li><li>关联：一个模型的两个元素之间的联系。这可能代表代码中的成员变量，或者人员记录与其所代表的人之间的关联，或者两类工作人员之间的关系，或者任何类似的关系。默认情况下，一个关联中的两个元素是相等的，并且通过该关联知道对方。一个协会也可以是一个可导航的协会，这意味着协会的来源端知道目标端，但反之亦然。</li><li>关联类：表示两个其他类之间的关联信息的类。</li><li>属性：可用于引用其他对象或保存对象状态信息的对象的特征。</li><li>基类：定义由子类通过泛化关系继承的属性和操作的类。</li><li>分支：活动图中的决策点。分支出现多个转变，每个都有一个保护条件。当控制到达分支时，恰好一个保护条件必须为真; 并且控制遵循相应的转换。</li><li>类：类似对象的类别，全部由相同的属性和操作描述，并且所有的赋值兼容。</li><li>类图：显示系统类和它们之间的关系。</li><li>分类器 ：具有属性和操作的UML元素。具体来说，Actor，Classes和Interfaces。</li><li>协作：通信图中两个对象之间的关系，指示消息可以在对象之间来回传递。</li><li>通信图：显示如何在强调对象角色的同时完成操作的图表。</li><li>组件：系统中可部署的代码单元。</li><li>组件图：显示各种组件和接口之间关系的图表。</li><li>概念：要包含在域模型中的名词或抽象概念。</li><li>构建阶段：Rational统一过程的第三阶段，在这个阶段中，正在构建的系统中内置了多个功能迭代。这是主要工作完成的地方。</li><li>依赖关系：指示一个分类器的关系知道另一个分类器的属性和操作，但不直接连接到第二个分类器的任何实例。</li><li>部署图：显示各种处理器之间关系的图表。</li><li>域：系统所涉及的宇宙的一部分。</li><li>精化阶段：Rational统一过程的第二阶段，允许额外的项目计划，包括构建阶段的迭代。</li><li>元素：出现在模型中的任何项目。</li><li>封装：对象中的数据是私有的。</li><li>泛化：指示一个类是另一个类（超类）的子类。一个空心箭头指向超类。</li><li>事件：在状态图中，这表示导致系统采取行动或切换状态的信号或事件或输入。</li><li>最终状态 ：在状态图或活动图中，这表示图完成的点。</li><li>叉：活动图中的一个点，多个并行控制线程开始。</li><li>泛化：继承关系，其中一个子类继承并添加到基类的属性和操作。</li><li>GoF：四人帮设计模式。</li><li>高凝聚力：GRASP评估模式，确保课程不是太复杂，做不相关的功能。</li><li>低耦合：GRASP评估模式，衡量一个类别依赖于另一个类别或与另一个类别相关联。</li><li>启动阶段：Rational统一过程的第一阶段，处理原始概念化和项目开始阶段。</li><li>继承：子类继承父类（超类）类的属性或特性。这些属性可以在子类中重写。</li><li>初始状态：在状态图或活动图中，这表示图开始的点。</li><li>实例：一个类像模板一样用来创建一个对象。这个对象被称为类的一个实例。可以创建任何数量的该类的实例。</li><li>接口：定义形成行为契约的属性和操作的分类器。提供者类或组件可以选择实现接口（即实现其属性和操作）。客户端类或组件可以依赖于接口，并因此使用提供者而不提供提供者的真实类别的任何细节。</li><li>迭代：一个小项目部分，在这个小项目中，一小部分功能被添加到项目中。包括分析，设计和编码的开发循环。 </li><li>加入：活动图中的一个点，多个并行控制线程同步并重新加入。</li><li>成员：分类器中的属性或操作。</li><li>合并：活动图中的一个点，不同的控制路径汇集在一起​​。</li><li>消息：从一个对象到另一个对象的请求，要求接收消息的对象执行某些操作。这基本上是对接收对象中的方法的调用。</li><li>方法：对象中的函数或过程。</li><li>模型：中央UML神器。由各个元素组成的层次结构，以及元素之间的关系。</li><li>多重性：显示在领域模型中，表示外部概念框，表示与其他对象的分位数的对象数量关系。</li><li>可导航性：指示关系的哪一端知道另一端。关系可以具有双向可导航性（每一端意识到另一端）或单向导航（一端意识到另一端，但反之亦然）。</li><li>符号：创建分析和设计方法的图形化文档。</li><li>注意：文字注释已添加到图表中以更详细地解释图表。</li><li>对象：对象：在活动图中，从活动接收信息或向活动提供信息的对象。在“协作图”或“序列图”中，参与图中所示场景的对象。通常：给定分类器（Actor，Class或Interface）的一个实例或示例。</li><li>包：逻辑上应该组合在一起的一组UML元素。</li><li>包图：所有元素都是包和依赖关系的类图。</li><li>模式：用于确定交互对象责任分配的解决方案。这是一个成功解决众所周知的常见问题的名称。</li><li>参数：一个操作的参数。</li><li>多态性：相同的消息，不同的方法。也用作模式。</li><li>私有：应用于属性或操作的可见性级别，指示只有包含该成员的分类器的代码才可以访问该成员。</li><li>处理器：在部署图中，代表可以部署代码的计算机或其他可编程设备。</li><li>受保护：应用于属性或操作的可见性级别，指示只有包含该成员或其子类的分类器的代码才能访问该成员。</li><li>公开：应用于属性或操作的可见性级别，指示任何代码都可以访问该成员。</li><li>读取方向箭头：指示领域模型中关系的方向。</li><li>实现：表示组件或类提供给定的接口。</li><li>角色：用于域模型，是关于角色角色的可选描述。</li><li>顺序图：一个图表，显示随着时间的推移对象的存在，以及随着时间的推移在这些对象之间传递的消息来执行一些行为。状态图图 - 显示所有可能的对象状态的图。</li><li>状态：在状态图中，这表示系统或子系统的一种状态：它在某个时间点所做的事情，以及其数据的值。</li><li>状态图：显示系统或子系统的状态，状态之间的转换以及导致转换的事件的图表。</li><li>静态：一个属性的修饰符，用于指示分类器的所有实例之间共享的属性只有一个副本。“操作”的修饰符，用于指示“操作”独立运行并且不在分类器的一个特定实例上操作。</li><li>刻板印象（Stereotype）：一个应用于Model元素的修饰符，用于指示它通常不能用UML表示的东西。从本质上讲，定型允许你定义你自己的UML“方言”。</li><li>子类：继承由子类通过泛化关系定义的属性和操作的类。</li><li>互動區：活动图的一个元素，指示系统或域的哪些部分执行特定的活动。泳道内的所有活动都由泳道所代表的对象，组件或者演员负责。</li><li>时间拳击：每次迭代都会有特定目标的时间限制。</li><li>过渡：在活动图中，表示从一个活动或分支或合并或分叉或连接到另一个的控制流程。在国家图中，代表着一个国家向另一个国家的转变。</li><li>过渡阶段 - Rational 统一过程的最后一个阶段，在这个阶段，用户接受使用新系统和系统的培训，用户可以使用这个阶段。</li><li>统一建模语言（ UML）：统一建模语言（ UML）利用文本和图形文档，通过在对象之间建立更紧密的关系，来增强软件项目的分析和设计</li><li>用例：在用例图中，表示系统响应来自Actor的某个请求所采取的操作。</li><li>用例图：显示参与者和用例之间关系的图表。</li><li>可见性：对属性或操作的修饰符，指示哪些代码可以访问成员。可见性级别包括公共，受保护和私有。</li><li>工作流程：一组产生特定结果的活动。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>UML</tag>
      
      <tag>统一建模语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025-01-14-Tue-T-实体关系图ERD</title>
    <link href="/2025/01/14/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/"/>
    <url>/2025/01/14/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="实体关系图-ERD-指南"><a href="#实体关系图-ERD-指南" class="headerlink" title="实体关系图(ERD)指南"></a>实体关系图(ERD)指南</h1><h2 id="什么是实体关系图（ERD）？"><a href="#什么是实体关系图（ERD）？" class="headerlink" title="什么是实体关系图（ERD）？"></a>什么是实体关系图（ERD）？</h2><p>数据库是软件系统中不可或缺的一个组成部分，若能在数据库工程中好好利用 ER 图，便能让您生成高质量的数据库设计，用于数据库创建，管理和维护，也为人员间的交流提供了具意义的基础。<br><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image.png" alt="alt text"><br>本文将深入介绍 ER 图表。通过阅读本ERD指南，您将获得有关 ER 图和数据库设计的基本知识和技能。你会学到什么是 ERD，为什么要绘制 ERD，ERD 符号，如何绘制 ERD 等，以及一堆 ERD 示例  </p><p>实体关系图也被称为 ERD、ER 图、实体联系模型、实体联系模式图或 ER 模型，是一种用于数据库设计的结构图。一幅 ERD 包含不同的符号和连接符，用于显示两个重要的信息： 系统范围内的主要实体，以及这些实体之间的相互关系。</p><blockquote><p>什么是实体？</p></blockquote><p>当我们谈论 ERD 中的实体时，我们经常提到诸如人员&#x2F;角色（例如学生），有形商业对象（例如产品），无形商业对象（例如日志）等业务对象。“关系”則是这些实体在系统内的相互关联。<br><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-1.png" alt="alt text">  </p><p>在典型的 ER 设计中，可以找到诸如圆角矩形和 (Rounded rectangle) 连接符（具有不同样式的末端）的符号来描述实体，它们的属性和相互关系。</p><blockquote><p>ERD 的符号有哪些？</p></blockquote><h2 id="何时绘制ER图？"><a href="#何时绘制ER图？" class="headerlink" title="何时绘制ER图？"></a>何时绘制ER图？</h2><p>那么，我们该在什么时候绘制ER图呢？虽然ER模型大多是为展示概念和设计物理数据库而绘制的，但也有别的用途的，以下是一些典型的用例。  </p><ul><li><p><strong>数据库设计</strong> : 直接在数据库更改数据库结构会有风险， 为避免破坏数据库中的数据，我们得仔细规划一切变更。通过绘制 ER 图来展示数据库设计意念，您能轻松找出错误和识别设计缺陷，并在执行数据库更改之前作出修正。</p></li><li><p><strong>数据库调试</strong> : 调试数据库问题往往具挑战性，特别是当数据库包含许多表时，你我编写复杂的SQL来获取所需的信息。通过 ERD 来展示数据库结构，您可以全面地了解整个数据库的结构。您可以轻松找到实体，查看其属性并确定与别的实体的关系，有助您更轻松地找出数据库的问题。</p></li><li><p><strong>数据库创建和修补</strong> : 像 Visual Paradigm 这样的 ERD 软件支持数据库生成工具，可以通过ER图来自动生成和修补数据库。使用这个 ER 图工具，您的ER设计不再仅仅是一个静态图，而是一个真实反映物理数据库结构的镜像。</p></li><li><p><strong>帮助收集需求</strong> : 您可以通过绘制 ERD 来表达系统中的高级业务对象以用于确定系统的需求。这种初始模型也可以演化为物理数据库模型，用于创建关系数据库，或为创建流程图和数据流模型提供有力的参考。</p></li></ul><h2 id="ERD-符号指南"><a href="#ERD-符号指南" class="headerlink" title="ERD 符号指南"></a>ERD 符号指南</h2><p>ER 图包含实体，属性和关系。在本节中，我们将详细介绍各 ERD 符号。  </p><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>ERD 实体是一个系统内可定义的事物或概念，如人&#x2F;角色（例如学生），对象（例如发票），概念（例如简介）或事件（例如交易）（注：在 ERD 中，术语“实体”通常用来代替“表”，但它们是一样的）。在考虑实体时，尝试把它们想成名词。在 ER 模型中，实体显示为圆角矩形，其名称位于上方，其属性列在实体形状的主体中。下面的 ERD 示例显示了 ER 实体的一个用例。<br><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-2.png" alt="alt text"></p><h3 id="实体属性"><a href="#实体属性" class="headerlink" title="实体属性"></a>实体属性</h3><p>也称为列 (Row)，意思是持有它的实体的属性或特性。</p><p>一个属性有一个描述属性的名称和一个描述属性种类的类型，例如代表字符串的 varchar，整数的 int。当为物理数据库开发绘制 ERD 时，得使用目标 RDBMS 支持的类型，以確保設計和物理数据库的一致性。</p><p>下面的 ER 图示例显示了一個包含属性的实体。 </p><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-3.png" alt="alt text"></p><h3 id="主键-Primary-Key"><a href="#主键-Primary-Key" class="headerlink" title="主键 (Primary Key)"></a>主键 (Primary Key)</h3><p>主键又称 PK，是一种特殊的实体属性，用于界定数据库表中的记录的独特性。一个表不能有两笔（或更多）拥有相同的主键属性值的记录，像是身份证明内的 ID 便是典型的例子，两个人即使性名相同，ID 是不会一样，若身份证明是个表，那ID 便是主键了。下面的 ERD 示例显示了拥有主键属性 “ID” 的实体 “Product”，以及数据库中表记录的预览。第三个记录是无效的，因为 ID ‘PDT-0002’ 的值已被另一个记录使用。</p><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-4.png" alt="alt text"> </p><h3 id="外键-Foreign-Key"><a href="#外键-Foreign-Key" class="headerlink" title="外键 (Foreign Key)"></a>外键 (Foreign Key)</h3><p>外键又称外来键和外部键，是对主键的引用，用于识别实体之间的关系。请注意，有别于主键，外键不必是唯一的，多个记录可以共享相同的值。下面的 ER Diagram 示例显示了一个包含一些列的实体，其中一个外键用于引用另一个实体。<br><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-5.png" alt="alt text">  </p><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>两个实体之间的关系表示<strong>这两个实体以某种方式相互关联</strong>。例如，学生可能参加课程。实体“学生”因此与“课程”相关，而这关系则在 ER 图中以连接线表达着。  </p><h3 id="基数-Cardinality"><a href="#基数-Cardinality" class="headerlink" title="基数 (Cardinality)"></a>基数 (Cardinality)</h3><p>基数定义了<strong>一个实与另一个实体的关系里面，某方可能出现次数</strong>。例如，一个团队有许多球员，若把这关系呈现于 ERD 时，团队和球员之间是一对多的关系。</p><p>在 ER 图中，基数表示为连接线端的乌鸦脚。三种常见的主要关系是一对一，一对多和多对多</p><ul><li><strong>一对一的基数的例子</strong>: 表示两个实体之间是唯一的关系，例如，用户和用户信息。</li></ul><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-6.png" alt="alt text"></p><ul><li><p><strong>一对多的基数的例子</strong>: 一对多关系是指两个实体 X 和 Y 之间的关系，其中 X 的一个实例可以链接到Y的许多实例，而 Y 的一个实例仅链接到 X 的一个实例。下图显示了一对多关系的一个例子。<br><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-7.png" alt="alt text">  </p></li><li><p><strong>多对多的基数的例子</strong>: 多对多关系是指两个实体 X 和 Y 之间的关系，其中 X 可以被链接到 Y 的许多实例，反之亦然。下图显示了一个多对多关系的例子。请注意，多对多关系在物理 ERD 中被分成一对一对多的关系，你会在下一节中学到什么是物理 ERD。</p></li></ul><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-8.png" alt="alt text">  </p><h2 id="概念，逻辑和物理数据模型"><a href="#概念，逻辑和物理数据模型" class="headerlink" title="概念，逻辑和物理数据模型"></a>概念，逻辑和物理数据模型</h2><p>ER 模型通常被绘制成最多三个抽象层次上：</p><ul><li>概念 ERD &#x2F; 概念数据模型</li><li>逻辑 ERD &#x2F; 逻辑数据模型</li><li>物理 ERD &#x2F; 物理数据模型</li></ul><p>虽然 ER 模型的三个层次都包含有属性和关系的实体，但它们的创建目的和目标受众都不同。</p><p>一般而言，业务分析人员使用概念和逻辑模型来展示系统中存在的业务对象 (Business Object)，而数据库设计人员或数据库工程师會為概念和逻辑ER模型加入更详细的数据，進而生成反映物理模型结构的物理数据模型，好为创建数据库作准备。下表列出了三种数据模型之间的差异。  </p><p><strong>概念模型 vs 逻辑模型 vs 数据模型：</strong><br><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-9.png" alt="alt text"></p><h3 id="概念数据模型"><a href="#概念数据模型" class="headerlink" title="概念数据模型"></a>概念数据模型</h3><p>概念性 ERD 表达了系统中该存在的业务对象以及它们之间的关系。建立概念模型，是为了通过识别所涉及的业务对象来呈现系统的宏观图像。概念数据模型<strong>定义了哪些实体存在</strong>，而非哪些表。例如，逻辑或物理数据模型中可能存在“多对多”表，但在概念数据模型下，它们只会表示为无基数的关系。  </p><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-10.png" alt="alt text"></p><blockquote><p>注意：概念性 ERD 支持使用泛化 (Generalization) 来表达两个实体之间的“一种”关系，例如三角形是一种形状，这个用法就像UML中的泛化一样。请注意只有概念 ERD 支持泛化。  </p></blockquote><blockquote><p>什么是UML？统一建模语言  </p></blockquote><h3 id="逻辑数据模型"><a href="#逻辑数据模型" class="headerlink" title="逻辑数据模型"></a>逻辑数据模型</h3><p>逻辑 ERD 是概念 ERD 的详细版本，通过明确定义每个实体中的列并引入操作和事务实体 (Transactional Entities)来让概念模型丰富起来。虽然逻辑数据模型仍流于高层次的设计(非为特定数据库系统而绘画)，但如果会影响数据库的设计，在绘制逻辑数据模型时仍然可酌情调整。  </p><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-11.png" alt="alt text"></p><h3 id="物理数据模型"><a href="#物理数据模型" class="headerlink" title="物理数据模型"></a>物理数据模型</h3><p>物理 ERD 是数据库的实际设计蓝图。物理数据模型通过为每列指定类型 (Type)，长度 (Length)，可为空 (Nullable) 等来详细阐述逻辑数据模型。由于物理 ERD 表達了如何在特定的 DBMS中构造和关联数据，因此在設計時要考虑到实际的数据库系统的需要和局限，倒如确保 DBMS 支持某列类型，并在命名实体和列中避用某些保留字 (Reserved Words)。  </p><h2 id="如何绘制-ER-图？"><a href="#如何绘制-ER-图？" class="headerlink" title="如何绘制 ER 图？"></a>如何绘制 ER 图？</h2><p>如果您发现绘制 ER 图很难，请不要担心，在本节中我们将给你一些 ERD 提示。尝试按照以下步骤以了解如何有效地绘制 ER 图吧。</p><ol><li>确保你清楚知道绘制 ERD 的目的。您是否试图呈现涉及业务对象定义的整体系统架构？或者你正在开发一个准备用于数据库创建的 ER 模型？您必须明了开发 ER 图的目的，方可使用合适的模型层次（概念&#x2F;逻辑和物理）来迎合您所需 （请阅读概念，逻辑和物理数据模型部分了解更详细信息）</li><li>确保你清楚模型的范围。了解建模范围可以防止在设计中包含冗余实体和关系。</li><li>画出范围内的主要实体。</li><li>通过添加列来定义实体的属性。</li><li>仔细检查 ERD 并检查实体和列是否足以存储系统的数据。如果不是，请考虑添加其他实体和列。通常，您可以在此步骤中确定一些事务 (Transactional)，操作 (Operational) 和事件 (Event) 实体。</li><li>考虑所有实体之间的关系，将它们联系起来，并写上正确的基数（例如客户和订单之间的一对多关系）。如果有任何实体沒有被连接上，请不要担心，虽然這不常见，但它是合法的。</li><li>使用数据库规范化技术 (Database Normalization)重构实体，以减少冗余数据和提高数据完整性。例如，“制造商”的信息可能最初存储在“产品”实体下，透过规范化过程，您可能会发“制造商”的记录不断重复，您便可将其拆分为单独的“制造商”实体，并使用外键將“产品”和“制造商”连接起來。</li></ol><h2 id="数据模型的例子"><a href="#数据模型的例子" class="headerlink" title="数据模型的例子"></a>数据模型的例子</h2><h3 id="ERD-示例-电影租赁系统"><a href="#ERD-示例-电影租赁系统" class="headerlink" title="ERD 示例 - 电影租赁系统"></a>ERD 示例 - 电影租赁系统</h3><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-12.png" alt="alt text"></p><h3 id="ERD-示例-贷款系统"><a href="#ERD-示例-贷款系统" class="headerlink" title="ERD 示例 - 贷款系统"></a>ERD 示例 - 贷款系统</h3><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-13.png" alt="alt text"></p><h3 id="ERD-示例-在线商店"><a href="#ERD-示例-在线商店" class="headerlink" title="ERD 示例 - 在线商店"></a>ERD 示例 - 在线商店</h3><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-14.png" alt="alt text"> </p><h2 id="使用ERD和数据流图（DFD）"><a href="#使用ERD和数据流图（DFD）" class="headerlink" title="使用ERD和数据流图（DFD）"></a>使用ERD和数据流图（DFD）</h2><p>在系统分析和设计中，可以绘制数据流图（DFD） 来展现系统流程中的信息流。在数据流图中，有一个名为数据储存 (Data Store)的符号，它代表一个提供系统所需信息的数据库表。  </p><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-15.png" alt="alt text"></p><p>由于物理 ER 图提供了实际数据库的蓝图，因此这种 ERD 中的实体与 DFD 中的数据存储一致。您可以 ERD 作为 DFD 的补充，以表达信息的结构；或以 DFD 补充 ERD，以显示系统在运行时如何运用数据。  </p><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-16.png" alt="alt text">  </p><h2 id="使用ERD和BPMN业务流程图（BPD）"><a href="#使用ERD和BPMN业务流程图（BPD）" class="headerlink" title="使用ERD和BPMN业务流程图（BPD）"></a>使用ERD和BPMN业务流程图（BPD）</h2><p>在业务流程映射中 (Business Process Mapping)，可以绘制 BPMN 业务流程图 （BPD） 以展示业务工作流程。在业务流程图中，有一个称为数据对象（Data Object）的符号，表示在流程输入&#x2F;输出的数据  </p><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-17.png" alt="alt text">  </p><p>由于概念和逻辑数据模型提供了系统内业务对象的高级视图，因此此类 ERD 中的实体与 BPD 中的数据对象一致。您可绘制 ERD 作为 BPD 的补充，以表示业务工作流程所需的数据对象的结构；或以 BPD 補充 ERD，以显示在整个业务流程中如何運用数据。  </p><p><img src="/img/2025-01-14-Tue-T-%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BEERD/image-18.png" alt="alt text">  </p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>数据架构</tag>
      
      <tag>数据库设计</tag>
      
      <tag>ERD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-11-26-Tue-T-SSM</title>
    <link href="/2024/11/26/2024-11-26-Tue-T-SSM/"/>
    <url>/2024/11/26/2024-11-26-Tue-T-SSM/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h1><p>SSM三者的关系<br><img src="/img/2024-11-26-Tue-T-SSM/image.png" alt="alt text"></p><h2 id="1-Spring-IoC容器"><a href="#1-Spring-IoC容器" class="headerlink" title="1 Spring IoC容器"></a>1 Spring IoC容器</h2><p>父子工程  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.learning.springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ssm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--父工程定义了版本, 子模块不需要再定义版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--父项目--&gt;</span><br>    <span class="hljs-comment">&lt;!--父项目一般不写代码--&gt;</span><br>    <span class="hljs-comment">&lt;!--适用场景：</span><br><span class="hljs-comment">        1. 组织和管理多个子模块的公共配置（如依赖、插件、构建配置）。</span><br><span class="hljs-comment">        2. 聚合子模块，使它们可以通过 mvn install 或 mvn package 一次性构建所有子模块。</span><br><span class="hljs-comment">        3. 父项目自身没有具体的功能实现，仅作为管理和继承的基础。--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--通常情况下，父项目的打包方式是 pom，这是最佳实践--&gt;</span><br>    <span class="hljs-comment">&lt;!--当父项目的打包方式为 pom 时，父项目本身不会生成实际的可部署包（如 jar 或 war），而仅作为一个配置聚合的容器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>ssm-spring-ioc<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--当父工程要统一管理依赖时, 使用&lt;dependencyManagement&gt;进行管理, 子模块引用时, 不用再指定版本--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;dependencyManagement&gt;</span><br><span class="hljs-comment">        &lt;dependencies&gt;</span><br><span class="hljs-comment">            &lt;dependency&gt;</span><br><span class="hljs-comment">                &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="hljs-comment">                &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="hljs-comment">            &lt;/dependency&gt;</span><br><span class="hljs-comment">        &lt;/dependencies&gt;</span><br><span class="hljs-comment">    &lt;/dependencyManagement&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="1-1-组件到容器"><a href="#1-1-组件到容器" class="headerlink" title="1.1 组件到容器"></a>1.1 组件到容器</h3><p>注册组件的方式:  </p><ol><li>使用@Import注解标识启动类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;Dog.class, Person.class&#125;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 跑起一个Spring的应用, 获取一个ApplicationContext, 即ioc容器</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(Application.class, args);<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>使用@Bean注解标识配置类方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DogConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">dog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-Scope调整组件的作用域"><a href="#1-2-Scope调整组件的作用域" class="headerlink" title="1.2 @Scope调整组件的作用域"></a>1.2 @Scope调整组件的作用域</h3><p>四个作用域:  </p><ol><li>singleton: 默认值, 单例模式, 容器启动时创建对象, 并且只会创建一个实例, 无论调用多少次getBean方法, 都会返回同一个对象  </li><li>prototype: 多例模式, 每次调用getBean方法, 都会创建一个新的对象   </li><li>request: 同一个请求创建一个单实例  </li><li>session: 同一个会话创建一个单实例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonConfig</span> &#123;<br><br>    <span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-3-Lazy懒加载"><a href="#1-3-Lazy懒加载" class="headerlink" title="1.3 @Lazy懒加载"></a>1.3 @Lazy懒加载</h3><ol><li>默认情况下, 容器启动时, 会创建所有的单实例对象  </li><li>@Lazy注解, 容器启动时不创建对象, 而是调用getBean方法时才创建对象</li><li>@Lazy注解, 只对单实例有效, 多实例无效</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonConfig</span> &#123;<br>    <span class="hljs-meta">@Lazy</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-FactoryBean"><a href="#1-4-FactoryBean" class="headerlink" title="1.4 FactoryBean"></a>1.4 FactoryBean</h3><p>FactoryBean, 用于创建复杂对象, 并且返回对象, 而不是直接返回对象  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BYD</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Car&gt;&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Spring调用此方法给ioc容器创建对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Car <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>        <span class="hljs-keyword">return</span> car;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> Car.class;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> FactoryBean.<span class="hljs-built_in">super</span>.isSingleton();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-Conditional条件注册"><a href="#1-5-Conditional条件注册" class="headerlink" title="1.5 @Conditional条件注册"></a>1.5 @Conditional条件注册</h3><p>@Conditional注解, 用于判断条件是否成立, 如果成立, 则执行对应的配置<br>@Conditional使用范围:  </p><ul><li>@Bean注解标注的方法上</li><li>@Configuration注解标注的类上</li></ul><p>场景:<br>判断当前电脑系统是否是windows系统还是Mac, 如果是windows, 则创建一个windowsMouse, 否则创建一个macMouse</p><ol><li>定义一个Mouse类  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mouse</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Mouse</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>定义两个条件类, 实现Spring context的Condition接口  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowEnvCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">osEnv</span> <span class="hljs-operator">=</span> context.getEnvironment().getProperty(<span class="hljs-string">&quot;OS&quot;</span>);<br>        System.out.println(osEnv);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;Windows&quot;</span>.equals(osEnv)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//返回true标识条件匹配</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MacEnvCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">osEnv</span> <span class="hljs-operator">=</span> context.getEnvironment().getProperty(<span class="hljs-string">&quot;OS&quot;</span>);<br>        System.out.println(osEnv);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;Mac&quot;</span>.equals(osEnv)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//返回true标识条件匹配</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在配置类中, 使用@Conditional注解, 指定条件类, 如果条件成立, 则创建对应的Mouse对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MouseConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean(&quot;macMouse&quot;)</span><br>    <span class="hljs-meta">@Conditional(&#123;MacEnvCondition.class&#125;)</span><br>    <span class="hljs-keyword">public</span> Mouse <span class="hljs-title function_">macMouse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mouse</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;mac&#x27;s mouse&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;windowsMouse&quot;)</span><br>    <span class="hljs-meta">@Conditional(&#123;WindowEnvCondition.class&#125;)</span><br>    <span class="hljs-keyword">public</span> Mouse <span class="hljs-title function_">windowMouse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mouse</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;window&#x27;s mouse&quot;</span>);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 跑起一个Spring的应用, 获取一个ApplicationContext, 即ioc容器</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(Application.class, args);<br>        System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br>        System.out.println(ioc.getBean(Mouse.class));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>Spring中也实现了一些条件类, 如:<br>@ConditionalOnBean(name &#x3D; “”)<br>@ConditionalOnMissingBean(name &#x3D; “”)<br>@ConditionalOnClass(name &#x3D; “”)等等</p><h3 id="1-6-注入"><a href="#1-6-注入" class="headerlink" title="1.6 注入"></a>1.6 注入</h3><ol><li>@Autowired注解: 依赖注入, 根据类型自动注入</li><li>@Qualifier注解: 依赖注入, 根据名称自动注入, 配合@Autowired注解使用</li><li>@Resource注解: 依赖注入, 根据名称自动注入, 不属于Spring官方注解  </li><li>@Value注解: 注入普通值<ol><li>@Value(“hello”): 注入普通值</li><li>@Value(“${name}”): 注入配置文件中的值</li><li>@Value(“#{SpEL}”): 注入SpEL表达式, 可以结合2使用  <code>@Value(&quot;#&#123;&#39;$&#123;app.name&#125;&#39;.toUpperCase()&#125;&quot;)</code></li></ol></li><li>@Profile注解: 根据环境变量, 注入不同的配置, 比如开发环境: @Profile(“dev”), 对应的配置文件中的内容为: <code>spring.profiles.active=dev</code>  </li><li>@PropertiesSource注解: 注入配置文件, 不使用此注解的默认配置文件是application.properties  </li><li>@Primary注解: 默认注入的组件, 如果有多个同类型的组件, 则会报错, 需要使用@Primary注解指定一个默认的组件</li></ol><h3 id="1-7-组件生命周期"><a href="#1-7-组件生命周期" class="headerlink" title="1.7 组件生命周期"></a>1.7 组件生命周期</h3><p><img src="/img/2024-11-26-Tue-T-SSM/image-1.png" alt="alt text"></p><ol><li><p>@Bean注解标注的方法, 在Bean初始化完成后调用</p></li><li><p>InitializingBean: 在Bean初始化完成后调用  </p></li><li><p>DisposableBean: 在Bean销毁前调用</p></li><li><p>@PostConstruct: 在Bean初始化完成后调用, 可以在构造方法之后调用  </p></li><li><p>@PreDestroy: 在Bean销毁前调用</p></li><li><p>BeanPostProcessor: 在Bean初始化前后调用, 可以在Bean初始化前后进行操作(很强大, 可以修改Bean的任何内容)  </p></li><li><p>@Bean注解标注的方法, 在Bean初始化完成后调用  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个User类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;User initMethod ......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;User destroyMethod ......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个UserConfig类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean(initMethod = &quot;initMethod&quot;, destroyMethod = &quot;destroyMethod&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;tom&quot;</span>);<br>        user.setAge(<span class="hljs-number">18</span>);<br>        <span class="hljs-keyword">return</span> user;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(Application.class, args);<br>        System.out.println(ioc.getBean(User.class));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs terminal">User initMethod ......<br>User(name=tom, age=18)<br>User destroyMethod ......<br></code></pre></td></tr></table></figure></li><li><p>InitializingBean: 在Bean初始化前调用</p></li><li><p>DisposableBean: 在Bean销毁前调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span>, DisposableBean &#123;<br>    <br>    <span class="hljs-comment">//在Bean销毁前调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;[DisposableBean] ======= User destroy&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//在属性设置之后调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;[initialization]======User afterPropertiesSet ......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>@PostConstruct: 在构造方法之后调用  </p></li><li><p>@PreDestroy: 在Bean销毁前调用</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//User类中</span><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preDestroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;[preDestroy]======User preDestroy&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postConstruct</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;[postConstruct]======User postConstruct&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>BeanPostProcessor: 后置处理器, 需要编写继承类并注解@Component</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.ssm.spring.ioc.processor;<br><br><span class="hljs-keyword">import</span> com.learning.ssm.spring.ioc.bean.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author fei</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> * Description TODO</span><br><span class="hljs-comment"> * DATA 2024/11/26  21:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">if</span>(!(bean <span class="hljs-keyword">instanceof</span> User))&#123;<br>            <span class="hljs-keyword">return</span> bean;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;初始化后置处理器=================  &quot;</span> + beanName);<br>        <span class="hljs-keyword">return</span> BeanPostProcessor.<span class="hljs-built_in">super</span>.postProcessAfterInitialization(bean, beanName);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">if</span>(!(bean <span class="hljs-keyword">instanceof</span> User))&#123;<br>            <span class="hljs-keyword">return</span> bean;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;初始化前置处理器==================   &quot;</span> + beanName);<br>        <span class="hljs-keyword">return</span> BeanPostProcessor.<span class="hljs-built_in">super</span>.postProcessBeforeInitialization(bean, beanName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2. 单元测试"></a>2. 单元测试</h2><p><img src="/img/2024-11-26-Tue-T-SSM/image-2.png" alt="alt text"></p><h2 id="3-Spring-AOP"><a href="#3-Spring-AOP" class="headerlink" title="3. Spring AOP"></a>3. Spring AOP</h2><p><img src="/img/2024-11-26-Tue-T-SSM/image-3.png" alt="alt text"></p><ol><li>添加aop依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(public * com.learning.ssm.ssmspringaop.calculator.MathCalculator.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-meta">@Before(&quot;execution(public * com.learning.ssm.ssmspringaop.calculator.MathCalculator.add(int, *))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aspectBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(joinPoint.getSignature().getDeclaringTypeName() + <span class="hljs-string">&quot;====.====&quot;</span> + joinPoint.getSignature().getName());<br>        System.out.println(<span class="hljs-string">&quot;before ..... &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aspectAfter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;after ..... &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>切入点表达式<br><img src="/img/2024-11-26-Tue-T-SSM/image-4.png" alt="alt text"><br><img src="/img/2024-11-26-Tue-T-SSM/image-5.png" alt="alt text"></p><h3 id="3-1-切入点执行顺序"><a href="#3-1-切入点执行顺序" class="headerlink" title="3.1 切入点执行顺序"></a>3.1 切入点执行顺序</h3><p><img src="/img/2024-11-26-Tue-T-SSM/image-6.png" alt="alt text"></p><p>通过@Order注解指定执行顺序<br>数字越小, 优先级越高  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span> <span class="hljs-comment">// </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(public * com.learning.ssm.ssmspringaop.calculator.MathCalculator.add(int, *))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aspectBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(joinPoint.getSignature().getDeclaringTypeName() + <span class="hljs-string">&quot;====.====&quot;</span> + joinPoint.getSignature().getName());<br>        System.out.println(<span class="hljs-string">&quot;before ..... &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-环绕通知"><a href="#3-2-环绕通知" class="headerlink" title="3.2 环绕通知"></a>3.2 环绕通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AroundAspect</span> &#123;<br><br>    <span class="hljs-meta">@Around(&quot;execution(public int com.learning..calculator.*.add(int,int))&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;[环绕] ----- 前置通知&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            result = joinPoint.proceed();<br>            System.out.println(<span class="hljs-string">&quot;[环绕] ----- 返回通知&quot;</span>);<br>            <br>        &#125;<span class="hljs-keyword">catch</span> (Throwable throwable)&#123;<br>            System.out.println(<span class="hljs-string">&quot;[环绕] --- 异常通知&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;[环绕] ----- 后置通知&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-Spring-声明式事务"><a href="#4-Spring-声明式事务" class="headerlink" title="4. Spring 声明式事务"></a>4. Spring 声明式事务</h2><p>通过注解等方式配置事务管理器  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//开启基于事务的自动化事务管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxApplication</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(TxApplication.class, args);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span> <span class="hljs-comment">// 对方法进行事务管理    </span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(String username, Integer bookId, Integer buyBum)</span> &#123;<br>    <span class="hljs-comment">//1. 查询书本信息</span><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">bookById</span> <span class="hljs-operator">=</span> bookDao.getBookById(bookId);<br><br>    <span class="hljs-comment">// 1.1 计算扣减额度</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">multiply</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(buyBum).multiply(bookById.getPrice());<br><br>    <span class="hljs-comment">//2. 修改账户金额</span><br>    accountDao.updateBalanceByUsername(username,multiply);<br><br>    <span class="hljs-comment">//3. 修改库存</span><br>    bookDao.updateBookStock(bookId,buyBum);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1-隔离级别"><a href="#4-1-隔离级别" class="headerlink" title="4.1 隔离级别"></a>4.1 隔离级别</h3><ul><li>读未提交: 事务可以读取其他事务未被提交到数据, 易产生脏读和幻读等问题  </li><li>读已提交: 事务只能读取到其他事务已经提交的数据, 不能读取到未提交的数据, 读取期间可以修改添加  </li><li>可重复读: 事务可以读取到其他事务已经提交的数据, 且读取期间不能修改, 可以添加  </li><li>串行化: 事务只能读取到其他事务已经提交的数据, 且读取期间不能修改, 不能添加</li></ul><p>前三种隔离级别导致的问题：  </p><ul><li>脏读：读取到未提交的数据。</li><li>不可重复读：两次读取同一数据，结果不一致（数据被修改）。</li><li>幻读：两次读取同样条件的记录，结果集条数发生变化（记录被插入或删除）。</li></ul><p><img src="/img/2024-11-26-Tue-T-SSM/image-7.png" alt="alt text"></p><h3 id="4-2-事务的传播行为"><a href="#4-2-事务的传播行为" class="headerlink" title="4.2 事务的传播行为"></a>4.2 事务的传播行为</h3><p>事务的传播行为，即一个事务方法被另一个事务方法调用时，该调用事务方法的事务行为。   </p><ul><li>REQUIRED(默认): 如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中，这是最常见的选择。 (常用)</li><li>SUPPORTS: 支持当前事务，如果当前没有事务，就以非事务方式执行。</li><li>MANDATORY: 必须存在事务，如果当前没有事务，就抛出异常。</li><li>REQUIRES_NEW: 无论是否有事务, 都新建一个事务。 (常用)</li><li>NOT_SUPPORTED: 以非事务方式执行，如果当前存在事务，就把当前事务挂起。</li><li>NEVER: 以非事务方式执行，如果当前存在事务，则抛出异常。 (常用)</li><li>NESTED: 新建事务，如果当前存在事务，则把当前事务挂起。</li></ul><p>子事务会继承父事务的隔离级别，以及除了传播行为的外的其他属性。  </p><h2 id="5-SpringMVC"><a href="#5-SpringMVC" class="headerlink" title="5. SpringMVC"></a>5. SpringMVC</h2><p>Web应用的核心就是<code>处理HTTP请求和HTTP响应</code>。  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果是前后分离的开发方式, 对于Controller, 统一使用<code>@RestController</code>注解   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * consumes代表服务器接收的数据类型</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/consume&quot;, consumes = &quot;application/json&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">consume</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world! --- Consume&quot;</span>;<br>&#125;<br><span class="hljs-comment">// produces代表服务器返回的数据类型</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/produce&quot;, produces = &quot;application/json&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">produce</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world! --- Produce&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(value = &quot;/html&quot;, produces = &quot;text/html;charset=UTF-8&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">html</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;h1&gt;这是HTML页面内容&lt;/h1&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-HTTP请求与响应"><a href="#5-1-HTTP请求与响应" class="headerlink" title="5.1 HTTP请求与响应"></a>5.1 HTTP请求与响应</h3><p>HTTP请求会携带各种数据:</p><ol><li>请求首行: (请求方式、请求路径、 请求协议)</li><li>请求头: 键值对信息 K:V (请求头信息、请求参数、Cookie、Session等)</li><li>请求体: 特定格式的请求数据</li></ol><p>而响应会携带响应头和响应体。 </p><h3 id="5-2-三种请求的处理"><a href="#5-2-三种请求的处理" class="headerlink" title="5.2 三种请求的处理"></a>5.2 三种请求的处理</h3><ol><li>普通参数请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// localhost:8080/user/pojo?name=zhangsan&amp;age=18</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/pojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">pojo</span><span class="hljs-params">(User user)</span>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world! --- File&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Json参数请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/pojoJson&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">pojoJson</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Person person)</span>&#123;<br>    System.out.println(person);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world! --- File&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>文件请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">file</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(file.getOriginalFilename());<br><br>    file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>( file.getOriginalFilename()));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world! --- File&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span>  <span class="hljs-comment"># 配置端口号</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">basedir:</span> <span class="hljs-string">your</span> <span class="hljs-string">directory</span> <span class="hljs-comment"># 配置Tomcat的basedir属性，指定Tomcat的根目录。  </span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">100MB</span> <span class="hljs-comment"># 设置上传文件的最大大小</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">200MB</span> <span class="hljs-comment"># 设置上传请求的总大小</span><br>      <span class="hljs-attr">resolve-lazily:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 设置是否立即解析请求参数，默认为false，即在请求参数解析之前就进行文件上传</span><br>      <span class="hljs-attr">location:</span> <span class="hljs-string">/tmp</span> <span class="hljs-comment"># 设置上传文件的临时目录</span><br>      <span class="hljs-attr">file-size-threshold:</span> <span class="hljs-string">10KB</span> <span class="hljs-comment"># 设置上传文件的大小阈值，超过该值则使用临时文件存储，默认为0，即不启用</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 设置是否启用文件上传功能，默认为true</span><br></code></pre></td></tr></table></figure><h3 id="5-3-两种返回数据格式"><a href="#5-3-两种返回数据格式" class="headerlink" title="5.3 两种返回数据格式"></a>5.3 两种返回数据格式</h3><ol><li>返回JSON数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/person&quot;)</span><br><span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>    person.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>    person.setAge(<span class="hljs-number">18</span>);<br>    person.setAddress(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;China&quot;</span>,<span class="hljs-string">&quot;Japan&quot;</span>&#125;);<br>    <span class="hljs-keyword">return</span> person;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>下载文件<br>因为是文件，需要设置响应头，告诉浏览器下载文件. 所以既要修改响应头,还需要修改响应体<br>Spring框架因此提供了ResponseEntity对象，用来封装响应头和响应体, 多用于文件的下载操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/download&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;InputStreamResource&gt; <span class="hljs-title function_">download</span><span class="hljs-params">(String fileName)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;/Users/fei/JavaCode/Java_basic/ssm/springmvc-01-helloworld/src/main/resources/static/dev.yaml&quot;</span>);<br><br>    <span class="hljs-comment">// 1. 解决文件名中文乱码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> URLEncoder.encode(<span class="hljs-string">&quot;中文dev.yaml&quot;</span>, StandardCharsets.UTF_8);<br><br>    <span class="hljs-comment">// 2. 解决文件内容过大(文件太大,如果读取byte[]结束再传输会导致oom内存溢出)</span><br>    <span class="hljs-type">InputStreamResource</span> <span class="hljs-variable">inputStreamResource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamResource</span>(fileInputStream);<br><br>    <span class="hljs-keyword">return</span> ResponseEntity<br>            .ok()<br>            .header(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span> + encode)<br>            .contentType(MediaType.APPLICATION_OCTET_STREAM)<br>            .contentLength(fileInputStream.available()) <span class="hljs-comment">// 内容大小</span><br>            .body(inputStreamResource);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-RestFul"><a href="#5-4-RestFul" class="headerlink" title="5.4 RestFul"></a>5.4 RestFul</h3><p><img src="/img/2024-11-26-Tue-T-SSM/image-8.png" alt="restful请求案例"></p><blockquote><p>调用别人的功能的方式:  </p><ol><li>API: 给第三方发送请求, 获取响应数据  </li><li>SDK: 导入jar包</li></ol></blockquote><h3 id="5-5-后端允许前端跨域"><a href="#5-5-后端允许前端跨域" class="headerlink" title="5.5 后端允许前端跨域"></a>5.5 后端允许前端跨域</h3><p>原理: 服务器给浏览器的响应头中添加字段, Access-Control-Allow-Origin: *<br>跨域访问过程:  </p><ol><li>浏览器发送OPTIONS预检请求–&gt; 请求到服务器  </li><li>服务器返回响应头Access-Control-Allow-Origin: *</li><li>浏览器收到响应头后, 允许跨域访问, 发送真正的请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin</span> <span class="hljs-comment">// 默认允许所有源跨域访问, value 指定允许的源, 例如 &quot;http://localhost:80&quot;</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/person&quot;)</span><br><span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-PathVariable-路径变量"><a href="#5-4-PathVariable-路径变量" class="headerlink" title="5.4 @PathVariable 路径变量"></a>5.4 @PathVariable 路径变量</h3><ol><li><code>/resource/&#123;id&#125;</code>: {}中的值封装到id变量中<ol><li>&#x2F;resource&#x2F;<code>1</code></li></ol></li><li><code>/resource/&#123;*path&#125;</code>: {}中的值封装到path变量中, {}中可以是多重路径<ol><li>&#x2F;resource&#x2F;<code>a.png</code></li><li>&#x2F;resource&#x2F;<code>a/b/c.png</code></li></ol></li><li><code>/resource/&#123;filename:\\w+&#125;.png</code>: {}中的值封装到filename变量中, 正则表达式匹配<ol><li>&#x2F;resource&#x2F;<code>a.png</code></li><li>&#x2F;resource&#x2F;<code>a_b.png</code></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/resource/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">resource</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world! --- Resource&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5-拦截器"><a href="#5-5-拦截器" class="headerlink" title="5.5 拦截器"></a>5.5 拦截器</h3><p>过滤器（Filter）：它的作用范围更广，通常用于处理整个请求和响应流。它不仅可以作用于 Spring MVC 的请求，也可以处理其他非 Spring 的请求（例如：静态资源、外部 API 请求等）。因此，如果你的需求是对整个应用层面的请求进行处理，应该选择过滤器。</p><p>拦截器（Interceptor）：拦截器是 Spring MVC 专用的，主要用于控制器方法的调用过程。如果你只需要在控制器级别进行操作（例如：权限校验、日志记录、方法执行的前后处理），那么拦截器更加合适。</p><p>一般情况, 只要使用Spring, 优先使用拦截器。  </p><ol><li><p>创建拦截器  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle.......&quot;</span>);<br>        <span class="hljs-keyword">return</span> HandlerInterceptor.<span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle.......&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置拦截器</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMVCConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MyInterceptor myInterceptor;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(myInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/interceptor&quot;</span>); <span class="hljs-comment">//拦截interceptor请求</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-6-异常处理"><a href="#5-6-异常处理" class="headerlink" title="5.6 异常处理"></a>5.6 异常处理</h3><p>两种异常处理方式: </p><ol><li>编程式异常处理: try-catch、throw exception</li><li>声明式异常处理: @ControllerAdvice + @ExceptionHandler</li></ol><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionController</span> &#123; <span class="hljs-comment">// 此类一般放到advice中</span><br><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">arithmeticError</span><span class="hljs-params">(ArithmeticException e)</span> &#123;<br>        System.out.println(e.getMessage());<br>        <span class="hljs-keyword">return</span> R.error(e, <span class="hljs-string">&quot;算数异常&quot;</span> + e.getMessage());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img/2024-11-26-Tue-T-SSM/image-9.png" alt="简单项目的异常相关类关系"></p><h3 id="5-7-数据校验"><a href="#5-7-数据校验" class="headerlink" title="5.7 数据校验"></a>5.7 数据校验</h3><p>后端的简单数据校验可以使用JSR303规范, JSR303是java为Bean数据合法性提供的标准框架, 它已经包含在JavaEE6标准中.<br>JSR303通过Bean属性上标注类似于@NotBlank&#x2F;@NotNull&#x2F;@Size&#x2F;@Min&#x2F;@Max&#x2F;@Pattern等注解, 来声明属性的合法性.  </p><p>校验流程:  </p><ol><li>引入校验依赖: spring-boot-starter-validation</li><li>定义封装的数据Bean</li><li>给Bean的字段添加校验注解, 并指定校验错误的消息提示</li><li>在Controller上添加@Valid注解,@Validated 激活校验</li><li>编写一个全局异常处理器, 拦截MethodArgumentNotValidException异常, 返回校验失败的错误信息  </li><li>使用自定义校验注解 + 校验器(implements ConstraintValidator)完成自定义校验</li><li>结合校验注解message属性于i18n文件, 实现错误消息国际化</li></ol><p><strong>编写校验规则</strong>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@NotNull(message = &quot;id 不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@NotNull(message = &quot;名字不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@NotBlank(message = &quot;密码不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>激活校验</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/validateGlobalException&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">VE</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> User user)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.ok(user);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>校验失败的异常处理</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">methodArgumentNotValidException</span><span class="hljs-params">(MethodArgumentNotValidException e)</span>&#123;<br><br>    Map&lt;String,String&gt; errorsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    e.getBindingResult().getFieldErrors().forEach(fieldError -&gt; &#123;<br>        <span class="hljs-comment">//获取属性名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> fieldError.getField();<br>        <span class="hljs-comment">//获取校验失败后的错误消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> fieldError.getDefaultMessage();<br>        errorsMap.put(field,message);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> R.error( <span class="hljs-number">400</span>, <span class="hljs-string">&quot;校验失败&quot;</span> ,errorsMap);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用正则表达式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pattern(regexp = &quot;^男|女$&quot;, message = &quot;性别只能为: “男” 或 “女” &quot;)</span><br><span class="hljs-meta">@NotBlank</span><br><span class="hljs-keyword">private</span> String gender;<br></code></pre></td></tr></table></figure><p><strong>自定义校验</strong>  </p><ol><li>定义自定义验证器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenderValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;Gender, String&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s 用户侧提交的还未校验的属性值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> constraintValidatorContext 校验上下文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s, ConstraintValidatorContext constraintValidatorContext)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;male&quot;</span>.equals(s) || <span class="hljs-string">&quot;female&quot;</span>.equals(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>定义校验注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Constraint(validatedBy = &#123;GenderValidator.class&#125;)</span> <span class="hljs-comment">// 校验器完成真正的校验功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Gender &#123;<br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&#123;validator.gender&#125;&quot;</span>;<br><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>定义国际化文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># messages.properties</span><br><span class="hljs-attr">validator.gender</span>=<span class="hljs-string">只能为男性或女性</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># messages_en_US.properties</span><br><span class="hljs-attr">validator.gender</span>=<span class="hljs-string">only can be male or female!</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># messages_zh_CN.properties</span><br><span class="hljs-attr">validator.gender</span>=<span class="hljs-string">只能为男性或女性</span><br></code></pre></td></tr></table></figure></li><li><p>测试-Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/validateGlobalException&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">VE</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> User user)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.ok(user);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试-Postman</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --location --request GET &#x27;http://localhost:8080/validateGlobalException&#x27; \<br>--header &#x27;Accept-Language: en-US&#x27; \<br>--header &#x27;Content-Type: application/json&#x27; \<br>--data &#x27;&#123;<br>    &quot;name&quot;: &quot;jack&quot;,<br>    &quot;id&quot;: 32,<br>    &quot;password&quot;: &quot;&quot;,<br>    &quot;gender&quot;: &quot;mafle&quot;<br><br>&#125;&#x27;<br></code></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;校验失败&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;密码不能为空&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;only can be male or female!&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ol><p>虽然通过以上方式可以实现数据的校验, 但是实际在生产当中, 为了准守单一职责的设计模式, 我们不会使用上述方式进行数据校验<br>各种xxO:  </p><ol><li>DAO: Data Access Object, 数据访问对象  </li><li>TO: Transfer Object, 传输对象</li><li>BO: Business Object, 业务对象</li><li>VO: View Object, 视图对象(用于与前端数据交互)</li><li>DTO: Data Transfer Object, 数据传输对象</li></ol><h3 id="5-8-接口文档Swagger"><a href="#5-8-接口文档Swagger" class="headerlink" title="5.8 接口文档Swagger"></a>5.8 接口文档Swagger</h3><p>Swagger可以快速生成接口文档，方便前后端开发人员协调沟通<br><a href="https://doc.xiaominfo.com/docs/quick-start">Knife4j –&gt; Swagger –&gt; OpenAPI</a>  </p><ol><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># springdoc-openapi项目配置</span><br><span class="hljs-attr">springdoc:</span><br>  <span class="hljs-attr">swagger-ui:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/swagger-ui.html</span><br>    <span class="hljs-attr">tags-sorter:</span> <span class="hljs-string">alpha</span><br>    <span class="hljs-attr">operations-sorter:</span> <span class="hljs-string">alpha</span><br>  <span class="hljs-attr">api-docs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/v3/api-docs</span><br>  <span class="hljs-attr">group-configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;default&#x27;</span><br>      <span class="hljs-attr">paths-to-match:</span> <span class="hljs-string">&#x27;/**&#x27;</span><br>      <span class="hljs-attr">packages-to-scan:</span> <span class="hljs-string">com.learning.ssm.springmvc02validation_exception.controller</span><br><span class="hljs-comment"># knife4j的增强配置，不需要增强可以不配</span><br><span class="hljs-attr">knife4j:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">setting:</span><br>    <span class="hljs-attr">language:</span> <span class="hljs-string">zh_cn</span><br></code></pre></td></tr></table></figure><ol start="3"><li>访问<br>地址: <code>http://localhost:8080/doc.html</code></li></ol><h3 id="5-9-SpringMVC运行流程"><a href="#5-9-SpringMVC运行流程" class="headerlink" title="5.9 SpringMVC运行流程"></a>5.9 SpringMVC运行流程</h3><p><img src="/img/2024-11-26-Tue-T-SSM/image-10.png" alt="alt text"></p><h2 id="6-MyBatis"><a href="#6-MyBatis" class="headerlink" title="6. MyBatis"></a>6. MyBatis</h2><p>MyBatis 是一款优秀的持久层框架</p><p>开发工具准备: 在IDEA中安装插件<code>MyBatisX</code><br>使用MyBatis流程:  </p><ol><li><p>配置数据库连接池</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mybatis-01-helloworld</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure></li><li><p>编写Dao层接口(Mapper)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span> <span class="hljs-comment">//告诉Spring, 这是Mybatis操作的接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">empMapper</span> &#123;<br>    Emp <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Mapper.xml文件(位于<code>resource/mapper</code>文件夹下)<br>可以通过MyBatisX插件生成  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.learning.ssm.mybatis.dao.empMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--namespace代表这个mapper接口和此xml文件进行绑定--&gt;</span><br>    <span class="hljs-comment">&lt;!-- select标签代表查询, id绑定方法名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.learning.ssm.mybatis.bean.Emp&quot;</span>&gt;</span><br>        select id, emp_name empName, age, emp_salary empSalary from t_tmp where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>通知MyBatis各个Mapper接口对应的Mapper.xml文件地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mybatis-01-helloworld</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/**.xml</span> <span class="hljs-comment"># 配置mapper.xml文件的位置</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启下划线自动转驼峰命名规则</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.learning.ssm.mybatis.mapper:</span> <span class="hljs-string">debug</span> <span class="hljs-comment"># 开启mybatis的日志级别为debug</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-1-两种取值方式的区别"><a href="#6-1-两种取值方式的区别" class="headerlink" title="6.1 两种取值方式的区别"></a>6.1 两种取值方式的区别</h3><ol><li><code>#&#123;id&#125;</code>: 占位符, 占位符的值是运行时从参数对象中取出对应的值</li><li><code>$&#123;id&#125;</code>: 拼串, 拼串的值是运行时从参数对象中取出对应的值, 但是拼串的值会被直接拼在sql中, 有sql注入的风险</li></ol><p>对于表名, 可以使用<code>$&#123;tableName&#125;</code>传入表名, 但是不能使用<code>#&#123;tableName&#125;</code>   </p><h3 id="6-2-自定义返回结果集"><a href="#6-2-自定义返回结果集" class="headerlink" title="6.2 自定义返回结果集"></a>6.2 自定义返回结果集</h3><ul><li>id标签: id标签用于定义主键</li><li>result标签: result标签用于定义普通值</li><li>association标签: association标签用于定义对象</li><li>collection标签: collection标签用于定义集合</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resultRM&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.learning.ssm.mybatis.bean.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <span class="hljs-comment">&lt;!--定义组件映射关系--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span> <span class="hljs-comment">&lt;!--定义普通值映射关系--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_salary&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empSalary&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById_&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultRM&quot;</span>&gt;</span><br>select *<br>from t_tmp<br>where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-11-21-Thu-T-SpringMVC</title>
    <link href="/2024/11/21/2024-11-21-Thu-T-SpringMVC/"/>
    <url>/2024/11/21/2024-11-21-Thu-T-SpringMVC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><blockquote><p><a href="https://github.com/fei-cn-xie/JavaCode">Demo代码</a></p></blockquote><h2 id="1-SpringMVC-简介"><a href="#1-SpringMVC-简介" class="headerlink" title="1 SpringMVC 简介"></a>1 SpringMVC 简介</h2><p>MVC是一种软件架构思想, 将软件按照模型、视图、控制器来划分<br><code>M: Model</code> : 模型层, 指工程中的Java Bean, 作用是处理数据<br>Java Bean分为两类:</p><ul><li>实体类Bean: 专门存储业务数据的, 比如User, Student</li><li>业务处理Bean: 指Service或者Dao, 专门用于处理业务逻辑和数据访问</li></ul><p><code>V: View</code> :视图层, 指工程中html或sp等页面, 作用是与用户进行交互, 展示数据<br><code>C: Controller</code> : 控制层, 指工程中的servlet, 作用是接受请求和响应浏览器  </p><p>SpringMVC是一个Spring的子项目, SpringMVC有如下特点: </p><ul><li>Spring系列原生产品, 与IOC容器等基础设施无缝对接  </li><li>基于原生的Servlet, 通过功能强大的前端控制器DispatcherServlet, 对请求和响应进行统一处理  </li><li>表述层各细分领域需要解决的问题全方面覆盖, 提供全面解决方案</li><li>代码清晰简洁、组件化程度高、可插拔式组件即插即用、性能卓越..</li></ul><h2 id="2-HelloWorld"><a href="#2-HelloWorld" class="headerlink" title="2. HelloWorld"></a>2. HelloWorld</h2><h3 id="2-1准备工作"><a href="#2-1准备工作" class="headerlink" title="2.1准备工作"></a>2.1准备工作</h3><ol><li><p>添加模块</p></li><li><p>打包方式war</p></li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--SpringMVC--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--日志--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--ServletAPI Tomcat中会自带此包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--依赖由运行环境（例如容器或框架）提供的库，比如 servlet-api（在 Servlet 容器中运行时由容器提供）。--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--Spring5和Thymeleaf整合包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring6<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在main目录下创建<code>webapp</code>目录 </p></li><li><p>载project structure中的module中添加web.xml(注意路径应该在webapp目录下)</p></li></ol><h3 id="2-2-配置web-xml"><a href="#2-2-配置web-xml" class="headerlink" title="2.2 配置web.xml"></a>2.2 配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet, </p><ul><li>默认配置方式<br>此配置作用下, SpringMVC的配置文件默认位于WEB-INF下, 默认名为<code>&lt;servlet-name&gt;-servlet.xml</code>, 例如, 以下配置对应的SpringMVC的配置文件位于WEB-INF下, 文件名为springMVC-servlet.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置SpringMVC的前端控制器, 对浏览器发出的请求进行统一的处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&quot;/&quot;包括除了.jsp之外的所有请求(.jsp本质是一个servlet, 需要由特定的servlet处理器处理--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>扩展配置方式(常用)<br>可通过init-param标签设置SpringMVC配置文件的位置和名称,  通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 前端控制器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        选择spring容器管理文件   管理mvc--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        加载方式 程序运行时--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        访问请求   / 接受所有请求  不包括.jps请求拒接   /* 接受所有请求 包括.jsp--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-创建请求控制器"><a href="#2-3-创建请求控制器" class="headerlink" title="2.3 创建请求控制器"></a>2.3 创建请求控制器</h3><p>由于前端控制器对浏览器发出的请求进行了统一的处理, 但是具体的请求有不同的处理过程, 因此需要创建处理具体请求的类, 即请求控制器<br>请求控制器中每一个处理请求的方法都成为控制器方法.<br>因为SpringMVC的控制器由一个POJO(普通的java类plain old java object)担任, 因此需要通过@Controller注解将其标识为一个控制层组件, 交给Spring ioc容器进行管理. 此时SpringMVC才能识别出控制器的存在.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HelloWorld</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-meta">@RequestMapping(value = &quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//返回视图名称</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-创建springMVC-xml"><a href="#2-4-创建springMVC-xml" class="headerlink" title="2.4 创建springMVC.xml"></a>2.4 创建springMVC.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 上下文包  组件 扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.learning.mvc.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--    视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;springResourceTemplateResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;templateEngine&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;springResourceTemplateResolver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-5-配置tomcat"><a href="#2-5-配置tomcat" class="headerlink" title="2.5 配置tomcat"></a>2.5 配置tomcat</h3><p> tomcat10</p><p> <img src="/img/2024-11-21-Thu-T-SpringMVC/image.png" alt="alt text"></p><h3 id="3-核心内容"><a href="#3-核心内容" class="headerlink" title="3. 核心内容"></a>3. 核心内容</h3><h3 id="3-1-RequestMapping注解"><a href="#3-1-RequestMapping注解" class="headerlink" title="3.1 @RequestMapping注解"></a>3.1 @RequestMapping注解</h3><p>@RequestMapping的作用就是将请求和处理请求的控制器关联起来, 建立映射关系  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> org.springframework.web.bind.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> org.springframework.aot.hint.annotation.Reflective;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.AliasFor;<br><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Mapping</span><br><span class="hljs-meta">@Reflective(&#123;ControllerMappingReflectiveProcessor.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RequestMapping &#123;<br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-meta">@AliasFor(&quot;path&quot;)</span><br>    String[] value() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-meta">@AliasFor(&quot;value&quot;)</span><br>    String[] path() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    RequestMethod[] method() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] params() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] headers() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] consumes() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] produces() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-1-RequestMapping注解的位置"><a href="#3-1-1-RequestMapping注解的位置" class="headerlink" title="3.1.1 @RequestMapping注解的位置"></a>3.1.1 @RequestMapping注解的位置</h4><ul><li>标识一个类: 设置请求路径的主路径</li><li>标识一个方法: 设置请求路径的子路径</li></ul><h4 id="3-1-2-RequestMapping注解的value属性"><a href="#3-1-2-RequestMapping注解的value属性" class="headerlink" title="3.1.2 @RequestMapping注解的value属性"></a>3.1.2 @RequestMapping注解的value属性</h4><ul><li><p>value属性通过请求地址匹配请求映射  </p></li><li><p>value属性是一个字符串数组, 标识其可以进行多个路径匹配</p></li><li><p>value属性必须设置, 不能缺少</p></li></ul><h4 id="3-1-3-RequestMapping注解的method属性"><a href="#3-1-3-RequestMapping注解的method属性" class="headerlink" title="3.1.3 @RequestMapping注解的method属性"></a>3.1.3 @RequestMapping注解的method属性</h4><p>@RequestMapping注解的method属性通过请求的请求方式(get、post等)匹配请求路径<br>@RequestMapping的method属性是一个RequestMethod类型的数组  </p><p>对于处理指定请求方式的控制器方法, SpringMVC提供了@Request Mapping的派生注解:  </p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li></ul><h4 id="3-1-4-RequestMapping的params属性"><a href="#3-1-4-RequestMapping的params属性" class="headerlink" title="3.1.4 @RequestMapping的params属性"></a>3.1.4 @RequestMapping的params属性</h4><p>@RequestMapping的params参数是一个字符串数组, 可以通过四种表达式设置请求和请求映射的匹配关系</p><ul><li><code>param</code>: 必须携带参数param</li><li><code>!param</code>: 只要不携带参数param即可</li><li><code>param=value</code>: 必须要参数param等于value</li><li><code>param!=value</code>: 只要参数param不等于value即可</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">例子</span><br><br>params = &#123;username&#125; # 必须携带username<br>params = &#123;!username&#125; # 只要不携带username即可<br>params = &#123;username=zhangsan&#125; # 必须username = zhangsan<br>params = &#123;username!=zhangsan&#125; # 只要username不等于zhangsan即可<br></code></pre></td></tr></table></figure><h4 id="3-1-5-SpringMVC支持ant风格的路径"><a href="#3-1-5-SpringMVC支持ant风格的路径" class="headerlink" title="3.1.5 SpringMVC支持ant风格的路径"></a>3.1.5 SpringMVC支持ant风格的路径</h4><ul><li><code>?</code>: 表示任意的单个字符</li><li><code>*</code>: 标识任意的0个或多个字符</li><li><code>**</code>: 表示任意的一层或多层目录</li><li>注意: 使用<code>**</code>时, 只能使用<code>/**/xxx</code>的方式</li></ul><h4 id="3-1-6-SpringMVC支持路径中的占位符-重点"><a href="#3-1-6-SpringMVC支持路径中的占位符-重点" class="headerlink" title="3.1.6 SpringMVC支持路径中的占位符(重点)"></a>3.1.6 SpringMVC支持路径中的占位符(重点)</h4><ul><li>原始方式: <code>/deleteUser?id=1</code> (面向操作)</li><li>Restful方式: <code>/deleteUser/1</code> (面向资源, 更易理解)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RequestMapping(&quot;/test/&#123;id&#125;/&#123;username&#125;&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@PathVariable</span> String username)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id, username);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-SpringMVC获取请求参数"><a href="#3-2-SpringMVC获取请求参数" class="headerlink" title="3.2 SpringMVC获取请求参数"></a>3.2 SpringMVC获取请求参数</h3><h4 id="3-2-1-RequestParam"><a href="#3-2-1-RequestParam" class="headerlink" title="3.2.1 @RequestParam"></a>3.2.1 @RequestParam</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一般不使用此方式</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;id&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(name,password);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SpringMVC方式</span><br><br><span class="hljs-comment">// 1. 默认情况</span><br>    <span class="hljs-comment">//保证形参名与请求参数中的名字一样, 比如此案例中应该为 /testParam?username=zs&amp;password=123</span><br>    <span class="hljs-comment">//对于多个相同的参数名, 可以使用数组接收</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/testParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(String username, String password)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br><span class="hljs-comment">//2. 使用@RequestParam注解</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/testParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-RequestHeader"><a href="#3-2-2-RequestHeader" class="headerlink" title="3.2.2 @RequestHeader"></a>3.2.2 @RequestHeader</h4><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系<br>@RequestHeader注解一共有三个属性: value, required, defaultValue, 用法与@RequestParam一样  </p><h4 id="3-2-3-CookieValue"><a href="#3-2-3-CookieValue" class="headerlink" title="3.2.3 @CookieValue"></a>3.2.3 @CookieValue</h4><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系<br>三个属性与@RequestParam一样  </p><h4 id="3-2-4-通过POJO获取请求参数"><a href="#3-2-4-通过POJO获取请求参数" class="headerlink" title="3.2.4 通过POJO获取请求参数"></a>3.2.4 通过POJO获取请求参数</h4><p>在控制器方法的形参位置设置一个实体的类型的形参, 浏览器请求的参数与该实体内属性一致, 则参数会自动赋值  </p><h3 id="3-3-域对象共享数据"><a href="#3-3-域对象共享数据" class="headerlink" title="3.3 域对象共享数据"></a>3.3 域对象共享数据</h3><p>域对象作用范围生命周期应用场景</p><ul><li><code>ServletContext</code>:全局范围Web 应用启动到销毁应用配置、全局统计信息</li><li><code>HttpSession</code>:会话范围用户访问到会话超时或销毁登录信息、购物车</li><li><code>ServletRequest</code>:请求范围单个 HTTP 请求处理期间请求数据、转发共享数据</li><li><code>PageContext</code>: 单个 JSP 页面从 JSP 页面开始执行到处理完成当前 JSP 页面内部存储 JSP 页面的临时变量</li></ul><h4 id="3-3-1-使用servletAPI向Request域对象共享数据"><a href="#3-3-1-使用servletAPI向Request域对象共享数据" class="headerlink" title="3.3.1 使用servletAPI向Request域对象共享数据"></a>3.3.1 使用servletAPI向Request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;Hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-3-2-使用ModelAndView向request域对象添加数据"><a href="#3-3-2-使用ModelAndView向request域对象添加数据" class="headerlink" title="3.3.2 使用ModelAndView向request域对象添加数据"></a>3.3.2 使用ModelAndView向request域对象添加数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModleAndView&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testModelAndView</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ModelAndView包含model和view功能</span><br><span class="hljs-comment">     * model主要用于向请求域中共享数据</span><br><span class="hljs-comment">     * view主要用于设置视图, 实现页面跳转</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">//向请求域中共享数据</span><br>    modelAndView.addObject(<span class="hljs-string">&quot;msg111&quot;</span>, <span class="hljs-string">&quot;testModelAndView + &quot;</span> + modelAndView);<br>    <span class="hljs-comment">//设置视图, 实现页面跳转</span><br>    modelAndView.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-3-使用Model向request域对象共享数据"><a href="#3-3-3-使用Model向request域对象共享数据" class="headerlink" title="3.3.3 使用Model向request域对象共享数据"></a>3.3.3 使用Model向request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModle&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span>&#123;<br>    model.setAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-4-使用Map向request域对象共享数据"><a href="#3-3-4-使用Map向request域对象共享数据" class="headerlink" title="3.3.4 使用Map向request域对象共享数据"></a>3.3.4 使用Map向request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMap</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>&#123;<br>    map.put(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-5-使用ModelMap向request域对象共享数据"><a href="#3-3-5-使用ModelMap向request域对象共享数据" class="headerlink" title="3.3.5 使用ModelMap向request域对象共享数据"></a>3.3.5 使用ModelMap向request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModleMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModelMap</span><span class="hljs-params">(ModelMap model)</span>&#123;<br>    model.setAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-6-向Session域共享数据"><a href="#3-3-6-向Session域共享数据" class="headerlink" title="3.3.6 向Session域共享数据"></a>3.3.6 向Session域共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testSession&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testSession</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>    session.setAttribute(<span class="hljs-string">&quot;testSession&quot;</span>, <span class="hljs-string">&quot;hello, session&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-6-向application域中共享数据"><a href="#3-3-6-向application域中共享数据" class="headerlink" title="3.3.6 向application域中共享数据"></a>3.3.6 向application域中共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testApp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testApp</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    application.setAttribute(<span class="hljs-string">&quot;testApp&quot;</span>, <span class="hljs-string">&quot;hellp application domain&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-4-SpringMVC的视图"><a href="#3-4-SpringMVC的视图" class="headerlink" title="3.4 SpringMVC的视图"></a>3.4 SpringMVC的视图</h3><p>SpringMVC的视图是View接口, 视图的作用是渲染数据, 将模型Model中的数据展示给用户<br>SpringMVC视图的种类有很多, 默认有转发视图InternalResourceView和重定向视图RedirectView<br>当工程引入jstl的依赖, 转发视图会自动转化为JstlView  </p><h4 id="3-4-1-ThymeleafView"><a href="#3-4-1-ThymeleafView" class="headerlink" title="3.4.1 ThymeleafView"></a>3.4.1 ThymeleafView</h4><p>若使用的视图为Thymeleaf, 在SpringMVC的配置文件中配置了Thymeleaf的视图解析器, 由此视图解析器解析之后所得到的是ThymeleafView</p><h4 id="3-4-2-InternalResourceView"><a href="#3-4-2-InternalResourceView" class="headerlink" title="3.4.2 InternalResourceView"></a>3.4.2 InternalResourceView</h4><p>SpringMVC中默认的转发视图是InternalResourceView<br>当控制器方法中所设置的视图名称以“forward:&#x2F;“为前缀时, 会创建InternalResourceView视图, 此时视图名称不会被SpringMVC配置文件中的所配置的视图解析器解析. 而是通过转发的方式跳转  </p><h4 id="3-4-3-RedirectView"><a href="#3-4-3-RedirectView" class="headerlink" title="3.4.3 RedirectView"></a>3.4.3 RedirectView</h4><p><img src="/img/2024-11-21-Thu-T-SpringMVC/image-1.png" alt="alt text"></p><h4 id="3-4-4-视图控制器view-controller"><a href="#3-4-4-视图控制器view-controller" class="headerlink" title="3.4.4 视图控制器view-controller"></a>3.4.4 视图控制器view-controller</h4><p>当控制器中的方法, 仅仅用来实现页面跳转, 即只需要设置视图名称时, 可以将处理器方法使用view-controller标签进行表示    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br>    <br> <span class="hljs-comment">&lt;!--配置了view- controller后注解驱动会失效, 需要重新开启--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-RESTful"><a href="#4-RESTful" class="headerlink" title="4. RESTful"></a>4. RESTful</h2><p>REST: Representational State Transfer 表现层资源状态转移  </p><ul><li><p>资源<br>处于服务器上一切可以访问的数据都可称为资源  </p></li><li><p>资源的表述<br>资源的表述是一段对于资源在某个特定时刻的状态的描述. 可以理解为数据的格式  </p></li><li><p>状态转移<br>状态转移是系统从一个状态变化到另一个状态的过程。状态（State）是系统在某一时刻的特定条件或配置，而转移（Transition）是由某种事件或条件触发的状态变化。例如: 用户已登陆, 用户未登录</p></li></ul><h3 id="3-1-RESTful的实现"><a href="#3-1-RESTful的实现" class="headerlink" title="3.1 RESTful的实现"></a>3.1 RESTful的实现</h3><p>HTTP协议中, 有四个表示对资源的操作动词: </p><ul><li><code>GET</code>:获取资源</li><li><code>POST</code>: 新建资源</li><li><code>PUT</code>: 更新资源</li><li><code>DELETE</code>: 删除资源</li></ul><p>RESTful风格提倡URL地址使用统一的风格设计, 从前到后各个单词使用斜杠分开, 不使用问号键值对的方式携带请求参数, 而是将要发送给服务器的数据作为url的一部分, 保证风格一致性  </p><p><img src="/img/2024-11-21-Thu-T-SpringMVC/image-2.png" alt="alt text"></p><h3 id="3-2-通过过滤器处理delete和put请求"><a href="#3-2-通过过滤器处理delete和put请求" class="headerlink" title="3.2 通过过滤器处理delete和put请求"></a>3.2 通过过滤器处理delete和put请求</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置过滤器HiddenHttpMethodFilter--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="5-SpringMVC执行流程"><a href="#5-SpringMVC执行流程" class="headerlink" title="5. SpringMVC执行流程"></a>5. SpringMVC执行流程</h2><h3 id="5-1-SpringMVC常用组件"><a href="#5-1-SpringMVC常用组件" class="headerlink" title="5.1 SpringMVC常用组件"></a>5.1 SpringMVC常用组件</h3><ul><li>DispatcherServlet: 前端控制器, 框架提供,不需要工程师开发. 整个流程控制的中心, 统一处理请求和响应. 由它调用其他组件处理用户的请求  </li><li>HandlerMapping: 处理器映射器, 框架提供, 不需要工程师开发. 根据请求的url,method等信息查找Handler, 即控制器方法  </li><li>Handler: 处理器,即控制器Controller, 需要工程师开发. 在DispatcherServlet的控制下, Handler对具体的用户请求进行处理  </li><li>HandlerAdapter: 处理器适配器, 由框架提供, 不需要工程师开发. 通过HandlerAdapter对控制器方法(处理器)进行执行  </li><li>ViewResolver: 视图解析器, 由框架提供, 不需要工程师开发. 进行视图解析, 得到对应的视图  </li><li>View: 视图, 不需要工程师开发, 由框架或视图技术提供. 将模型数据通过页面展示给用户</li></ul><h3 id="5-2-DispatcherServlet初始化过程"><a href="#5-2-DispatcherServlet初始化过程" class="headerlink" title="5.2 DispatcherServlet初始化过程"></a>5.2 DispatcherServlet初始化过程</h3><p>DispatcherServlet本质上是一个Servlet, 所以遵循Servlet的生命周期,  </p><p>Servlet生命周期  </p><ol><li>Servlet 初始化后调用 init () 方法。</li><li>Servlet 调用 service() 方法来处理客户端的请求。</li><li>Servlet 销毁前调用 destroy() 方法。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>    <span class="hljs-built_in">this</span>.initMultipartResolver(context);<br>    <span class="hljs-built_in">this</span>.initLocaleResolver(context);<br>    <span class="hljs-built_in">this</span>.initThemeResolver(context);<br>    <span class="hljs-built_in">this</span>.initHandlerMappings(context);<br>    <span class="hljs-built_in">this</span>.initHandlerAdapters(context);<br>    <span class="hljs-built_in">this</span>.initHandlerExceptionResolvers(context);<br>    <span class="hljs-built_in">this</span>.initRequestToViewNameTranslator(context);<br>    <span class="hljs-built_in">this</span>.initViewResolvers(context);<br>    <span class="hljs-built_in">this</span>.initFlashMapManager(context);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-SpringMVC执行流程"><a href="#5-3-SpringMVC执行流程" class="headerlink" title="5.3 SpringMVC执行流程"></a>5.3 SpringMVC执行流程</h3><ol><li>用户向服务器发起请求, 请求被SpringMVC前端控制器DispatcherServlet捕获  </li><li>DispatcherServlet对URL进行解析, 得到请求资源定位符URI, 判断请求URI对应的映射:<ol><li>不存在URI对应映射<ol><li>再判断是否配置了<code>mvc:default-servlet-handler</code><ol><li>如果没配置, 控制台报映射查找不到, 客户端显示404错误  </li><li>有配置, 则访问目标资源(一般是静态资源, html, js, css). 找不到式客户端会显示404</li></ol></li></ol></li><li>存在URI对应映射<ol><li>根据URI, 调用HandlerMapping得到该Handler配置的所有有关对象, 包括控制器和拦截器, 最后以HandlerExecutionChain执行链对象的形式返回  </li><li>DispatcherServlet根据的到的Handler, 选择一个合适的HandlerAdapter</li><li>如果成功或得HandlerAdapter, 开始执行拦截器的preHandler方法</li><li>提取Request中的模型数据, 填充Handler入参, 开始执行Handler(Controller)方法, 处理请求. 在填充Handler的入参过程中, 根据个人配置, Spring将完成一些额外的工作:  <ol><li>HttpMessageConvert: 将请求信息(json, xml等)转化为一个对象, 或者将对象转化为对应的响应信息  </li><li>数据转换: 比如String转化为Integer</li><li>数据格式化: 比如String转化为数字或者日期</li><li>数据验证: 验证数据有效性(长度, 格式等)</li></ol></li><li>Handler执行完成后, 向DispatcherServlet返回一个ModleAndView对象</li><li>此时将开始执行拦截器postHandler()方法</li><li>根据ModelAndView(如果有异常, 执行Handler ExceptionResolver进行异常处理), 选择一个合适的ViewResovler(普通、forward、redirect)进行视图解析, 根据model和view来渲染视图</li><li>将渲染结果返回给客户端</li></ol></li></ol></li></ol><h2 id="6-注解配置SpringMVC"><a href="#6-注解配置SpringMVC" class="headerlink" title="6. 注解配置SpringMVC"></a>6. 注解配置SpringMVC</h2><p>使用配置类和注解代替web.xml和SpringMVC配置文件功能  </p><h3 id="6-1-创建初始化类-代替web-xml"><a href="#6-1-创建初始化类-代替web-xml" class="headerlink" title="6.1 创建初始化类, 代替web.xml"></a>6.1 创建初始化类, 代替web.xml</h3><p>在Servlet3.0中, 容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类, 如果找到的话就用它来配置Servlet容器<br>Spring提供了这个接口的实现, 名为SpringServletContainerInitializer. 这个类还会查找实现WebApplicationInitializer的类, 并将配置的任务交给他们完成, Spring3.2引入了一个WebApplicationInitializer的实现类, AbstractAnnotationConfigDispatcherServletInitializer.<br>当我们继承了AbstractAnnotationConfigDispatcherServletInitializer并且将其部署到了Servlet3的容器中时, 容器会自动发现它, 并用它来配置Servlet上下文.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.mvc.anno.config;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.Filter;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.CharacterEncodingFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.HiddenHttpMethodFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author fei</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> * Description Web工程的初始化类</span><br><span class="hljs-comment"> * 用来代替web.xml</span><br><span class="hljs-comment"> * DATA 2024/11/22  19:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebXML</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定Spring配置类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定SpringMVC配置类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WebConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定DispatcherServlet的url- patter</span><br><span class="hljs-comment">     * 指定SpringMVC的映射规则，即url-pattern</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册过滤器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">characterEncodingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        characterEncodingFilter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        characterEncodingFilter.setForceEncoding(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">hiddenHttpMethodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;characterEncodingFilter, hiddenHttpMethodFilter&#125;;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-创建SpringMVC配置-代替SpringMVC-xml"><a href="#6-2-创建SpringMVC配置-代替SpringMVC-xml" class="headerlink" title="6.2 创建SpringMVC配置, 代替SpringMVC.xml"></a>6.2 创建SpringMVC配置, 代替SpringMVC.xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.mvc.anno.config;<br><br><span class="hljs-keyword">import</span> com.learning.mvc.anno.controller.TestController;<br><span class="hljs-keyword">import</span> com.learning.mvc.anno.interceptor.TestInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.support.StandardServletMultipartResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;<br><span class="hljs-keyword">import</span> org.thymeleaf.spring6.SpringTemplateEngine;<br><span class="hljs-keyword">import</span> org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver;<br><span class="hljs-keyword">import</span> org.thymeleaf.spring6.view.ThymeleafViewResolver;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author fei</span><br><span class="hljs-comment"> * Version 1.0</span><br><span class="hljs-comment"> * Description 代替SpringMVC配置文件</span><br><span class="hljs-comment"> * 1. 扫描组件</span><br><span class="hljs-comment"> * 2. 视图解析器、3. view-controller, 4. default- servlet-handler: WebMvcConfigurer</span><br><span class="hljs-comment"> * 5. mvc注解驱动  6. 文件上传解析器。7. 异常处理。8. 拦截器</span><br><span class="hljs-comment"> * DATA 2024/11/22  18:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.learning.mvc.anno&quot;)</span><br><span class="hljs-meta">@EnableWebMvc</span> <span class="hljs-comment">//5. 开启MVC注解驱动</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  配置default- servlet-handler:</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> configurer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 8 添加拦截器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestInterceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>); <span class="hljs-comment">//拦截所有</span><br><br><br>        WebMvcConfigurer.<span class="hljs-built_in">super</span>.addInterceptors(registry);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 3. view-controller,</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;forward:/index.html&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 6. 文件上传解析器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardServletMultipartResolver</span>();<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 。7. 异常处理。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resolvers</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureHandlerExceptionResolvers</span><span class="hljs-params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;<br>        <span class="hljs-type">SimpleMappingExceptionResolver</span> <span class="hljs-variable">exceptionResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMappingExceptionResolver</span>();<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.setProperty(<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>        exceptionResolver.setExceptionMappings(properties);<br>        exceptionResolver.setExceptionAttribute(<span class="hljs-string">&quot;exception&quot;</span>); <span class="hljs-comment">// 方便从请求域中获取异常信息</span><br>        resolvers.add(exceptionResolver);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置 thymeleaf视图解析器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> templateEngine</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ThymeleafViewResolver <span class="hljs-title function_">thymeleafViewResolver</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;springTemplateEngine&quot;)</span> SpringTemplateEngine templateEngine)</span> &#123;<br>        <span class="hljs-type">ThymeleafViewResolver</span> <span class="hljs-variable">viewResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThymeleafViewResolver</span>();<br>        viewResolver.setOrder(<span class="hljs-number">1</span>);<br>        viewResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        viewResolver.setTemplateEngine(templateEngine);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;springTemplateEngine&quot;)</span><br>    <span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">templateEngine</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;templateResolver&quot;)</span> SpringResourceTemplateResolver templateResolver)</span> &#123;<br>        <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">templateEngine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>        templateEngine.addTemplateResolver(templateResolver);<br>        <span class="hljs-keyword">return</span> templateEngine;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;templateResolver&quot;)</span><br>    <span class="hljs-keyword">public</span> SpringResourceTemplateResolver <span class="hljs-title function_">springResourceTemplateResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SpringResourceTemplateResolver</span> <span class="hljs-variable">templateResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringResourceTemplateResolver</span>();<br><br>        <span class="hljs-comment">//视图前缀</span><br>        templateResolver.setPrefix(<span class="hljs-string">&quot;classpath:/WEB-INF/templates/&quot;</span>);<br><br>        <span class="hljs-comment">//视图后缀</span><br>        templateResolver.setSuffix(<span class="hljs-string">&quot;.html&quot;</span>);<br>        templateResolver.setTemplateMode(<span class="hljs-string">&quot;HTML5&quot;</span>);<br>        templateResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-keyword">return</span> templateResolver;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-扩展功能"><a href="#7-扩展功能" class="headerlink" title="7. 扩展功能"></a>7. 扩展功能</h2><h3 id="7-1-HttpMessageConverter"><a href="#7-1-HttpMessageConverter" class="headerlink" title="7.1 HttpMessageConverter"></a>7.1 HttpMessageConverter</h3><p>HttpMessageConverter, 报文信息转换器, 将请求报文转化为Java对象, 或将java对象转化为响应报文<br>HttpMessageConverter提供了两个注解和两个类型:<br>注解:  </p><ul><li><code>@RequestBody</code>: 在控制器中设置一个形参, 并使用此注解<code>标识控制器</code></li><li><code>@ResponseBody</code>: <code>标识控制器方法</code>, 可以将该控制器的返回值作为响应体返回给浏览器<br>类型:  </li><li><code>RequestEntity</code>:  放入控制器方法的形参中, 当有请求匹配到此控制器中, 则请求体信息会自动注入该形参中  </li><li><code>ResponseEntity</code>: 用于控制器返回值类型, 就是响应到浏览器的响应报文</li></ul><p>@ResponseBody处理json对象需要引入注解才可以让java对象自动转化为json对象  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入json依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.16.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>@RestController &#x3D; @Controller + @ResponseBody<br>@RestController加载控制器的类上, 相当于为类添加了@Controller, 同时为类中每个控制器添加了@ResponseBody</p><h3 id="7-2-文件上传和下载"><a href="#7-2-文件上传和下载" class="headerlink" title="7.2 文件上传和下载"></a>7.2 文件上传和下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/testDown&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; testDown(HttpSession session) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;/static/img/a.png&quot;</span>);<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[fileInputStream.available()];<br>        fileInputStream.read(bytes);<br>        MultiValueMap&lt;String, String&gt; httpHeaders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        httpHeaders.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=a.png&quot;</span>);<br>        <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">httpStatus</span> <span class="hljs-operator">=</span> HttpStatus.OK;<br>        ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(bytes, httpHeaders, httpStatus);<br>        fileInputStream.close();<br>        <span class="hljs-keyword">return</span> responseEntity;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件上传需要先引入相关依赖:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传需要的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置bean  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置文件上传解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.support.StandardServletMultipartResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置解析器 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 前端控制器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        选择spring容器管理文件   管理mvc--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        加载方式 程序运行时--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">multipart-config</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--         上传文件最大为多少   --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">max-file-size</span>&gt;</span>10485760<span class="hljs-tag">&lt;/<span class="hljs-name">max-file-size</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--         最大的请求大小   --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">max-request-size</span>&gt;</span>10485760<span class="hljs-tag">&lt;/<span class="hljs-name">max-request-size</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--         多大以上的文件可以上传   --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">file-size-threshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">file-size-threshold</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">multipart-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表单  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testUp&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>  图片上传: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;photo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>控制器  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/testUp&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUp</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;photo&quot;)</span> MultipartFile photo, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(photo.getOriginalFilename());<br>    System.out.println(photo.getName());<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;photo&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath);<br>    <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>        file.mkdirs();<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">finalPath</span> <span class="hljs-operator">=</span> realPath + File.separator + photo.getOriginalFilename();<br>    photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(finalPath));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;testUP 成功&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="7-3-拦截器"><a href="#7-3-拦截器" class="headerlink" title="7.3 拦截器"></a>7.3 拦截器</h3><p><img src="/img/2024-11-21-Thu-T-SpringMVC/image-3.png" alt="alt text"></p><p>编写拦截器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstInterceptor</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;FirstInterceptor preHandle&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>    ;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;FirstInterceptor postHandle&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;FirstInterceptor afterCompletion&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写控制器  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/testInterceptor&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testInterceptor</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;interceptor&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>配置SpringMVC</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;bean class=&quot;com.learning.mvc.rest.interceptor.FirstInterceptor&quot;&gt;&lt;/bean&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testInterceptor&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>有多个拦截器时<br><img src="/img/2024-11-21-Thu-T-SpringMVC/image-4.png" alt="alt text"></p><h3 id="7-4-异常处理器"><a href="#7-4-异常处理器" class="headerlink" title="7.4 异常处理器"></a>7.4 异常处理器</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口: HandlerExceptionResolver<br>HandlerExceptionResolver的实现类有:  </p><ul><li>DefaultHandlerExceptionResolver  SpringMVC默认使用的异常处理器  </li><li>SimpleHandlerExceptionResolver:  留给开发人员自定义处理异常</li></ul><p>基于配置的异常处理  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置异常处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 将会自动跳转到error的页面 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>基于注解的异常处理  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionCatchController2</span> &#123;<br>    <br>    <span class="hljs-comment">//如果出现相应的异常, 那么就会调用这个controller</span><br>    <span class="hljs-meta">@ExceptionHandler(value = &#123;ArithmeticException.class, NullPointerException.class&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testExceptionHandler</span><span class="hljs-params">(Exception e)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-11-21-Thu-T-Spring6</title>
    <link href="/2024/11/21/2024-11-21-Thu-T-Spring6/"/>
    <url>/2024/11/21/2024-11-21-Thu-T-Spring6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><blockquote><p><a href="https://github.com/fei-cn-xie/JavaCode">Demo代码</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>Spring是一款主流的Java EE轻量级开源框架  </p><ul><li><p><strong>广义的Spring</strong><br>泛指以Spring Framework为核心的Spring技术栈, 如: Spring Framework, Spring MVC, SpringBoot, SpringCloud, SpringData, Spring Security, 其中Spring Framework是其他子项目的基础. </p></li><li><p><strong>狭义的Spring</strong><br>特指Spring Framework, 通常称为Spring框架. Spring框架是一个分层的、面向切面的java应用程序的一站式轻量级解决方案, 它是Spring技术栈的核心和基础, 是为了解决企业级应用开发的复杂性而创建的.<br>Spring有两个核心模块, IoC和AOP.<br>IoC: Inverse of Control: 控制反转, 指把创建对象的过程交给Spring进行管理<br>AOP: Aspect Oriented Programing: 面向切面编程. AOP用来封装多个类的公共行为, 将那些与业务无关, 却为业务模块所共同调用的逻辑封装起来, 减少系统的重复代码, 降低模块间的耦合度. 另外, AOP还解决了一些系统层面的问题, 比如日志、事务、权限等.</p></li></ul><h3 id="1-1-Spring-Framework特点"><a href="#1-1-Spring-Framework特点" class="headerlink" title="1.1 Spring Framework特点"></a>1.1 Spring Framework特点</h3><ul><li>非侵入式: 使用Spring Framework开发应用时, Spring对应用程序本身的结构影响非常小, 对领域模型可以做到零污染; 对功能性组件也只需要使用几个简单的注解进行标记, 完全不会破坏原有结构, 反而能将组件结构进一步简化. 这就让Spring Frame开发应用程序时结构清晰, 简洁优雅.  </li><li>控制反转: 框架创建对象</li><li>面向切面: 在不修改源代码的基础上增强代码功能</li><li>容器: Spring IoC是一个容器, 包含并管理组件对象的生命周期</li><li>组件化: Spring实现了使用简单的组件配置组合成一个复杂的应用, 在Spring中可以使用xml和注解组合这些对象</li><li>一站式: 可以整合各种开源框架</li></ul><h3 id="1-2-Spring模块组成"><a href="#1-2-Spring模块组成" class="headerlink" title="1.2 Spring模块组成"></a>1.2 Spring模块组成</h3><p><img src="/2023-10-11-T-JAVA/image.png" alt="alt text"></p><ol><li>Spring Core<ol><li>spring-core</li><li>spring-beans</li><li>spring-context</li><li>spring-expression</li></ol></li><li>Spring AOP<ol><li>spring-aop</li><li>spring-aspects</li><li>spring-instrument</li></ol></li><li>Spring Data Access<ol><li>spring-jdbc</li><li>spring-orm</li><li>spring-oxm</li><li>spring-jms</li><li>spring-tx</li></ol></li><li>Spring Web<ol><li>spring-web</li><li>spring-webmvc</li><li>spring-websocket</li><li>spring-webflux</li></ol></li><li>Spring Message<ol><li>spring-messaging</li></ol></li><li>Spring Test<ol><li>spring-test</li></ol></li></ol><h3 id="1-3-Spring6特点"><a href="#1-3-Spring6特点" class="headerlink" title="1.3 Spring6特点"></a>1.3 Spring6特点</h3><h3 id="1-4-Log4j2日志概述"><a href="#1-4-Log4j2日志概述" class="headerlink" title="1.4 Log4j2日志概述"></a>1.4 Log4j2日志概述</h3><p>Apache Log4j2是一个开源的日志记录组件, 在工程中代替了system.out等打印语句, 是java中最流行的日志工具<br><strong>Log4j2主要由几个重要组件组成</strong>  </p><ol><li>日志信息的优先级<ol><li>TRACE: 追踪, 是最低的日志级别, 相当于追踪程序的执行</li><li>DEBUG: 调试, 一般在开发中, 都将其设置为最低的日志级别</li><li>INFO: 信息, 输出一些重要信息, 使用较多</li><li>WARN: 警告, 输出警告信息</li><li>ERROR: 错误, 输出错误信息</li><li>FATAL: 严重错误</li></ol></li><li>日志信息的输出目的地: 指定了日志的输出是在控制台还是文件中</li><li>日志信息的输出格式: 控制了日志信息的显示内容</li></ol><p><strong>引入log4j2</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--log4j2--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>加载日志配置文件</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件名固定为log4j2.xml, 文件必须在类的根路径下--&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>使用日志</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(TestUser.class);<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLog</span><span class="hljs-params">()</span>&#123;<br>        logger.info(<span class="hljs-string">&quot;Log info printed....&quot;</span>);<br>        logger.debug(<span class="hljs-string">&quot;Log debug printed....&quot;</span>);<br>        logger.error(<span class="hljs-string">&quot;Log error printed....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-容器-IoC"><a href="#2-容器-IoC" class="headerlink" title="2 容器: IoC"></a>2 容器: IoC</h2><p>控制反转(IoC)通过依赖注入(DI)实现  </p><h3 id="2-1-基于xml方式进行bean管理"><a href="#2-1-基于xml方式进行bean管理" class="headerlink" title="2.1 基于xml方式进行bean管理"></a>2.1 基于xml方式进行bean管理</h3><p><strong>1. 获取Bean的三种方式</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.iocxml;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-comment">// 获取bean</span><br>        <span class="hljs-comment">//1. 根据id获取</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> (User)applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user1 = &quot;</span> + user1);<br><br>        <span class="hljs-comment">//2. 根据类型获取, ⚠️⚠️⚠️ !!!注意: 当根据类型获取bean时, 要求IOC容器中指定类型的bean有且只能有一个</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> applicationContext.getBean(User.class);<br>        System.out.println(<span class="hljs-string">&quot;user2 = &quot;</span> + user2);<br><br><br>        <span class="hljs-comment">//3.根据id和类型获取</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>        System.out.println(<span class="hljs-string">&quot;user3 = &quot;</span> + user3);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>2. 依赖注入之set注入</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--依赖注入--&gt;</span><br>    <span class="hljs-comment">&lt;!--1. 基于set方法注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.di.Book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3. 依赖注入之构造器注入</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--2. 基于构造器方式注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookContract&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.di.Book&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;DI&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jack&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>4. 特殊值处理</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1. 空值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--2. 特殊符号--&gt;</span><br><span class="hljs-comment">&lt;!--   &lt;xml实体&gt;.  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;lt;</span> <span class="hljs-symbol">&amp;gt;</span>&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- CDATA节 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>5. 为对象类型属性赋值</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1. 引用外部Bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.ditest.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Finance&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.ditest.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--普通属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jack&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;99&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--对象类型注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--2. 内部Bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.ditest.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--普通属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jack&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;99&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--内部Bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.ditest.Dept&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Tech&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--3. 级联属性赋值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.ditest.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;On Bench&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.ditest.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--普通属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jack&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;99&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--级连赋值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept3&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept.name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Human Resource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>6. 为数组类型属性赋值</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--数组类型属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empA&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.ditest.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tom&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;19&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept1&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--数组类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Guitar<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Piano<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>笛子<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--List集合注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptL&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.ditest.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Finance&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;emp1&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;emp2&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;empA&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>7. 为集合类型属性赋值</strong>  </p><p>方式一:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--集合类型注入--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;math&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.school.Teacher&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;liu&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;46&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chinese&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.school.Teacher&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;wang&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;70&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;english&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.school.Teacher&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Zhang&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fei&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.school.Student&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;fei&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;19&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;english&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;chinese&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;数学&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;math&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>方式二:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--标签添加util --&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/util</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lesson1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.school.Lesson&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;CHINESE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;teacherZhang&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lesson2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.school.Lesson&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;MATH&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;teacherLiu&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherZhang&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.school.Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;MR ZHANG&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;35&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherLiu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.school.Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;MR LIU&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.school.Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tom&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lessonList&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;lessonList&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherMap&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lessonList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;lesson1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;lesson2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:map</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>MATH<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherZhang&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>CHINESE<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherZhang&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:map</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>8. p命名空间</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 命名空间注入 --&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/util</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--P名称空间注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student_p&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.school.Student&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;Jerry&quot;</span> <span class="hljs-attr">p:lessonList-ref</span>=<span class="hljs-string">&quot;lessonList&quot;</span> <span class="hljs-attr">p:teacherMap-ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>9. 引入外部属性文件</strong>  </p><ol><li><p>加入数据库相关依赖  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--数据源, 连接池--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>创建外部属性文件, properties格式: 定义数据信息, 用户名、密码、地址等</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/spring?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建Spring配置文件, 引入context命名空间, 引入属性文件使用表达式完成注入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--引入外部属性文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--完成数据库信息注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo2</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-jdbc.xml&quot;</span>);<br>    <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> applicationContext.getBean(DruidDataSource.class);<br>    System.out.println(bean);<br>    System.out.println(bean.getUrl());<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>10. bean的作用域</strong>  </p><p>在spring中可以通过配置bean标签的scope属性来指定bean的作用域范围:  </p><ol><li>singleton(默认): 在IOC容器中, 这个bean的对象始终是单实例, 在IOC容器初始化时创建</li><li>prototype: 在IOC容器中有多实例, 获取bean时创建</li></ol><p>如果在WebApplicationContext环境下还有如下作用域(不常用):  </p><ol><li>request: 在一个请求中有效  </li><li>session: 在一个会话范围内有效</li></ol><p><strong>11. bean生命周期</strong>  </p><ol><li><strong>bean对象的创建</strong>(调用无参数构造)  </li><li><strong>给bean对象设置相关属性</strong></li><li><strong>调用bean前置处理器</strong>(初始化之前)</li><li><strong>bean对象初始化</strong>(调用指定的初始化方法)</li><li><strong>调用bean后置处理器</strong>(初始化之后)</li><li><strong>bean对象创建完成</strong></li><li><strong>bean对象销毁</strong>(配置指定的销毁方法) </li><li><strong>IoC容器关闭</strong></li></ol><p>案例:<br>bean类定义  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.iocxml.lifecircle;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/18  18:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//无参数构造, bean初始化时调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;1. bean对象创建, 调用无参数构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//bean初始化方法</span><br>    <span class="hljs-comment">//方法名随便起</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;4. bean对象初始化(调用指定的初始化方法)&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//bean销毁方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;7. bean对象销毁(配置指定的销毁方法)&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;6. bean对象创建完成, 使用bean&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;2. 给bean对象设置相关属性&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>bean配置  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.lifecircle.User&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;TOM&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--bean的后置处理器需要放入IOC容器才能生效--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.lifecircle.MyBeanProcess&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLife</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-life.xml&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>        System.out.println(user.getName());<br>        applicationContext.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>12. FactoryBean</strong>  </p><ol><li><p>自定义factorybean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;User&gt; &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> User.class;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>xml配置</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.factorybean.MyFactoryBean&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="3"><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFactoryBean</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFactoryBean</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-factorybean.xml&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>        System.out.println(user);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>13. 基于xml自动装配</strong>   </p><p><img src="/2023-10-11-T-JAVA/image-1.png" alt="alt text"></p><p>定义bean类, 以controller为例:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.iocxml.auto.controller;<br><br><span class="hljs-keyword">import</span> com.learning.spring6.iocxml.auto.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/18  19:29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        userService.addUserService();<br>        System.out.println(<span class="hljs-string">&quot;Controller method addUser executed&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>xml对应配置:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;controller&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.auto.controller.UserController&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.auto.service.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当autowire使用byName时, 需要让xml配置的id或name值与对应类中定义的属性名称保持一致 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.learning.spring6.iocxml.auto.dao.UserDaoImpl&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="3-2-2-基于注解方式进行bean管理"><a href="#3-2-2-基于注解方式进行bean管理" class="headerlink" title="3.2.2 基于注解方式进行bean管理"></a>3.2.2 基于注解方式进行bean管理</h3><p>注解是代码中的一种特殊标记, 在Spring中使用注解可以简化Spring的XML配置<br>Spring 通过注解实现自动装配的步骤如下:  </p><ol><li><p>引入依赖</p></li><li><p>开启组件扫描<br>spring 中默认是不使用注解装配bean, 因此需要在xml配置文件中开启Spring Beans的自动扫描功能  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.learning.spring6&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用注解定义Bean</p></li></ol><ul><li><code>@Component</code>: 用于描述Spring的bean, 它是一个泛化的概念, 仅仅表示容器中的一个组件(Bean). 并且可以应用到任何层次. 例如Service层, DAO层.</li><li><code>@Repository</code>: 该注解用于数据访问层(DAO), 将Dao层的类标识为Spring的Bean</li><li><code>@Service</code>: 用于业务层(Service)</li><li><code>@Controller</code>: 用于控制层(Controller)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>依赖注入</li></ol><ul><li><code>Autowire</code>: 默认根据类型进行匹配, Autowire注解属于Spring框架, 需要spring相关依赖  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注入service</span><br><span class="hljs-comment">//1. 属性注入 //根据类型找到对应的对象, 完成注入</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserService userService;<br><br><span class="hljs-comment">//2. set方法注入 </span><br><span class="hljs-meta">@Autowire</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span>&#123;<br>  <span class="hljs-built_in">this</span>.userService = userService;<br>&#125;<br><br><span class="hljs-comment">//3. 构造器注入</span><br><br><span class="hljs-meta">@Autowire</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">UserController</span><span class="hljs-params">(UserService userService)</span>&#123;<br>  <span class="hljs-built_in">this</span>.userService = userService;<br>&#125;<br><br><span class="hljs-comment">//4. 构造形参注入</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">UserController</span><span class="hljs-params">(<span class="hljs-meta">@Autowire</span> UserService userService)</span>&#123;<br>  <span class="hljs-built_in">this</span>.userService = userService;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><code>Qualifier</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(value = &quot;userDaoImpl&quot;)</span><br>UserDao userDao;<br></code></pre></td></tr></table></figure><ul><li><code>Resource</code>: Resource用在属性和setter方法上, 属于JDK扩展包的一部分, 标准注解, 具备通用型<br>如果jdk版本低于8或者高于11, 需要引入如下依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource(name = &quot;userDaoImpl&quot;, type = UserDao.class)</span><br>UserDao userDao;<br></code></pre></td></tr></table></figure><h3 id="2-3-全注解开发"><a href="#2-3-全注解开发" class="headerlink" title="2.3 全注解开发"></a>2.3 全注解开发</h3><p>全注解开发就是不再使用spring配置文件, 写一个配置类来代替配置文件  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//表示此类为配置类</span><br><span class="hljs-meta">@ComponentScan(&quot;com.learning.spring6.autowire&quot;)</span> <span class="hljs-comment">//开启组件扫描</span><br><span class="hljs-comment">// 等于xml中的配置“&lt;context:component-scan base-package=&quot;com.learning.spring6&quot;/&gt;”</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-原理-手写IoC"><a href="#3-原理-手写IoC" class="headerlink" title="3 原理: 手写IoC"></a>3 原理: 手写IoC</h2><p>实现过程<br><img src="/2023-10-11-T-JAVA/image-2.png" alt="alt text"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.bean;<br><br><span class="hljs-keyword">import</span> com.learning.anno.Bean;<br><span class="hljs-keyword">import</span> com.learning.anno.DI;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLDecoder;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 在spring中, IOC创建的对象都放在了一个Map的集合中, 这里做复现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/19  15:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAnnotationApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyApplicationContext</span> &#123;<br><br>    <span class="hljs-comment">//创建一个Map集合, 用于存放bean的实例对象</span><br>    Map&lt;Class,Object&gt; beans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> String rootPath;<br><br><br>    <span class="hljs-comment">//返回对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> beans.get(clazz);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAnnotationApplicationContext</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">//设置包的扫描规则</span><br>    <span class="hljs-comment">//当前包或者子包,如果类上有@Bean注解, 则通过反射将其实例化</span><br>    <span class="hljs-comment">//创建有参数的构造,传递包的路径</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAnnotationApplicationContext</span><span class="hljs-params">(String basePackage)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">packagePath</span> <span class="hljs-operator">=</span> basePackage.replaceAll(<span class="hljs-string">&quot;\\.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>        System.out.println(packagePath);<br>        Enumeration&lt;URL&gt; resources = Thread.currentThread().getContextClassLoader().getResources(packagePath);<br>        <span class="hljs-keyword">while</span> (resources.hasMoreElements()) &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> resources.nextElement();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> URLDecoder.decode(url.getFile(), StandardCharsets.UTF_8);<br>            rootPath = filePath.substring(<span class="hljs-number">0</span>, filePath.length() - packagePath.length());<br>            System.out.println(<span class="hljs-string">&quot;rootPath = &quot;</span> + rootPath);<br>            <span class="hljs-comment">//包扫描</span><br>            System.out.println(<span class="hljs-string">&quot;filePath = &quot;</span> + filePath);<br>            loadBean(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath));<br>            loadDI();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBean</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            File[] childrenFiles = file.listFiles();<br>            <span class="hljs-keyword">if</span>(childrenFiles == <span class="hljs-literal">null</span> &amp;&amp; childrenFiles.length &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (File childFile : childrenFiles) &#123;<br>                <span class="hljs-keyword">if</span> (childFile.isDirectory()) &#123;<br>                    loadBean(childFile);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//得到包路径</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">pathWithClass</span> <span class="hljs-operator">=</span> childFile.getAbsolutePath().substring(rootPath.length());<br>                    <span class="hljs-keyword">if</span>(pathWithClass.contains(<span class="hljs-string">&quot;.class&quot;</span>)) &#123;<br><br>                        <span class="hljs-comment">//得到com.learning.service.UserServiceImpl</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">allName</span> <span class="hljs-operator">=</span> pathWithClass.replaceAll(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>)<br>                                .replaceAll(<span class="hljs-string">&quot;.class&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                        System.out.println(<span class="hljs-string">&quot;all name is = &quot;</span> + allName);<br><br>                        Class&lt;?&gt; aClass = Class.forName(allName);<br>                        <span class="hljs-keyword">if</span>(!aClass.isInterface()) &#123;<br>                            <span class="hljs-keyword">if</span>(aClass.getAnnotation(Bean.class) != <span class="hljs-literal">null</span>)&#123;<br>                                <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> aClass.getConstructor().newInstance();<br>                                beans.put(aClass,instance);<br>                            &#125;<br>                        &#125;<br><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadDI</span><span class="hljs-params">()</span>&#123;<br>        Set&lt;Map.Entry&lt;Class, Object&gt;&gt; entries = beans.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Class, Object&gt; entry : entries) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> entry.getValue();<br>            Class&lt;?&gt; aClass = obj.getClass();<br>            Field[] fields = aClass.getDeclaredFields();<br>            <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>                <span class="hljs-type">DI</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> field.getAnnotation(DI.class);<br>                <span class="hljs-keyword">if</span>(annotation != <span class="hljs-literal">null</span>) &#123;<br>                    field.setAccessible(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        field.set(obj, beans.get(field.getType()));<br>                    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-面向切面-AOP"><a href="#4-面向切面-AOP" class="headerlink" title="4 面向切面: AOP"></a>4 面向切面: AOP</h2><h3 id="4-1-场景模拟"><a href="#4-1-场景模拟" class="headerlink" title="4.1 场景模拟"></a>4.1 场景模拟</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> learning.spring6.aop.example;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/19  16:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorLogImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志: a=&quot;</span>+a+<span class="hljs-string">&quot;,b = &quot;</span>+b);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a + b;<br>        System.out.println(<span class="hljs-string">&quot;日志: result =  &quot;</span>+result);<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result: &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志: a=&quot;</span>+a+<span class="hljs-string">&quot;,b = &quot;</span>+b);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a - b;<br>        System.out.println(<span class="hljs-string">&quot;日志: result =  &quot;</span>+result);<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result: &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志: a=&quot;</span>+a+<span class="hljs-string">&quot;,b = &quot;</span>+b);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a * b;<br>        System.out.println(<span class="hljs-string">&quot;日志: result =  &quot;</span>+result);<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result: &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志: a=&quot;</span>+a+<span class="hljs-string">&quot;,b = &quot;</span>+b);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a / b;<br>        System.out.println(<span class="hljs-string">&quot;日志: result =  &quot;</span>+result);<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result: &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-2-代理模式"><a href="#4-2-代理模式" class="headerlink" title="4.2 代理模式"></a>4.2 代理模式</h3><p><strong>静态代理</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorStaticProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>    <span class="hljs-comment">//传入目标对象</span><br>    <span class="hljs-keyword">private</span> Calculator calculator;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CalculatorStaticProxy</span><span class="hljs-params">(Calculator calculator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.calculator = calculator;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-comment">//输出日志</span><br>        System.out.println(<span class="hljs-string">&quot;日志: a=&quot;</span>+a+<span class="hljs-string">&quot;,b = &quot;</span>+b);<br>        <br>        <span class="hljs-comment">//调用目标方法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.add(a, b);<br>        <span class="hljs-comment">//输出日志</span><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result: &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态代理中, 由于代码写死了, 不具备灵活性, 如果有其他地方需要加日志, 还需要添加代码.  </p><p><strong>动态代理</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> learning.spring6.aop.example;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/19  17:13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br><br>    <span class="hljs-comment">//目标对象</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">//返回代理对象</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * ClassLoader: 加载动态生成代理类的类加载器</span><br><span class="hljs-comment">         * Class&lt;?&gt; [] interfaces: 目标对象实现的所有接口的class数组</span><br><span class="hljs-comment">         * InvocationHandler: 设置代理对象实现目标对象方法的过程</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> target.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             *</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> proxy the proxy instance that the method was invoked on</span><br><span class="hljs-comment">             * 代理对象</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> method the &#123;<span class="hljs-doctag">@code</span> Method&#125; instance corresponding to</span><br><span class="hljs-comment">             * the interface method invoked on the proxy instance.  The declaring</span><br><span class="hljs-comment">             * class of the &#123;<span class="hljs-doctag">@code</span> Method&#125; object will be the interface that</span><br><span class="hljs-comment">             * the method was declared in, which may be a superinterface of the</span><br><span class="hljs-comment">             * proxy interface that the proxy class inherits the method through.</span><br><span class="hljs-comment">             * 重写目标对象中的方法</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> args an array of objects containing the values of the</span><br><span class="hljs-comment">             * arguments passed in the method invocation on the proxy instance,</span><br><span class="hljs-comment">             * or &#123;<span class="hljs-doctag">@code</span> null&#125; if interface method takes no arguments.</span><br><span class="hljs-comment">             * Arguments of primitive types are wrapped in instances of the</span><br><span class="hljs-comment">             * appropriate primitive wrapper class, such as</span><br><span class="hljs-comment">             * &#123;<span class="hljs-doctag">@code</span> java.lang.Integer&#125; or &#123;<span class="hljs-doctag">@code</span> java.lang.Boolean&#125;.</span><br><span class="hljs-comment">             * 上述方法传入的参数</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                System.out.println(<span class="hljs-string">&quot;动态代理日志1: &quot;</span> + Arrays.toString(args));<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>                System.out.println(<span class="hljs-string">&quot;动态代理日志2: &quot;</span> + Arrays.toString(args));<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-3-AOP基本概念和相关术语"><a href="#4-3-AOP基本概念和相关术语" class="headerlink" title="4.3 AOP基本概念和相关术语"></a>4.3 AOP基本概念和相关术语</h3><p>Aspect Oriented Programming 是一种设计思想, 是软件设计领域的面向切面编程, 它是面向对象编程的一种补充和完善.<br><strong>相关术语</strong></p><ul><li>横切关注点: 分散在各个模块中解决同一个问题, 例如用户验证、日志管理、事务处理、数据缓存等都属于横切关注点. 同一类等非核心业务  </li><li>通知(增强): 通俗说就是需要增加等功能, 比如安全, 事务, 日志等. 每一个横切关注点所处理的东西都需要写一个方法来实现, 这个方法就是通知方法</li><li>切面: 封装通知方法的类</li><li>目标: 目标对象</li><li>代理: 代理对象</li><li>连接点: 逻辑概念, 不是语法定义, 通俗说就是spring中允许通知的地方</li><li>切入点: 通俗说就是实际需要增强方法的地方</li></ul><h3 id="4-4-基于注解的AOP"><a href="#4-4-基于注解的AOP" class="headerlink" title="4.4 基于注解的AOP"></a>4.4 基于注解的AOP</h3><p><strong>动态代理分类: JDK动态代理和cglib动态代理</strong>  </p><ol><li>当代理对象有实现接口时, 使用JDK动态代理, 生成接口实现类的代理对象(实现代理对象对应的接口):</li></ol><p><img src="/2023-10-11-T-JAVA/image-3.png" alt="alt text">  </p><ol start="2"><li>如果代理对象没有实现接口, 使用cglib动态代理, 生成子类的代理对象<br><img src="/2023-10-11-T-JAVA/image-4.png" alt="alt text"></li></ol><p>Spring是通过Aspectj中的注解实现了AOP功能. Aspectj是AOP的一种实现, 本质上采用静态代理. 将代理逻辑织入目标类编译得到的字节码文件, 所以最终效果是动态的  </p><p>使用Aspectj步骤:  </p><ol><li>引入相关依赖:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>创建目标资源<br>(1) 接口<br>(2) 实现类  </p></li><li><p>创建切面类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> learning.spring6.aop.annotationaop;<br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.Signature;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 切面类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/20  12:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//表示切面类</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//表示在spring的ioc容器中进行管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-comment">//设置切入点和通知类型</span><br>    <span class="hljs-comment">//通知类型: 前置 返回  异常  后置  环绕</span><br>    <span class="hljs-comment">//@Before(), @AfterReturning(), @AfterThrowing(), @After(), @Around()</span><br><br><br>    <span class="hljs-meta">@Before(value = &quot;execution(public int learning.spring6.aop.annotationaop.Calculator.add(int, int))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class="hljs-string">&quot;前置通知... ====&gt;&gt;&gt;&gt; &quot;</span> + methodName + <span class="hljs-string">&quot; === &quot;</span> + Arrays.toString(args) );<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(public * learning.spring6.aop.annotationaop.Calculator.add(..))&quot;, returning = &quot;anynameok&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturningMethod</span><span class="hljs-params">(JoinPoint joinPoint, <span class="hljs-type">int</span> anynameok)</span> &#123;<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> joinPoint.getSignature();<br>        System.out.println(<span class="hljs-string">&quot;返回后通知吗&gt;&gt;&gt;&gt;&gt;&gt; &quot;</span> + anynameok);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(public * learning.spring6.*.*.*.add(..))&quot;, throwing = &quot;anynameok&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowingMethod</span><span class="hljs-params">(JoinPoint joinPoint, Throwable anynameok)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;异常通知...&gt;&gt;&gt;&gt;&gt; &quot;</span> + anynameok);<br>    &#125;<br><br>    <span class="hljs-meta">@After(value = &quot;execution(public * learning.spring6.aop.annotationaop.Calculator.add(int, int))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;后置通知????? ====&gt;&gt;&gt;&gt; &quot;</span> + methodName);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(value = &quot;execution(public int learning.spring6.aop.annotationaop.Calculator.add(int, int))&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> Arrays.toString(args);<br>        System.out.println(<span class="hljs-string">&quot;环绕通知&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt;&gt; 目标方法之前&quot;</span>);<br>            <span class="hljs-comment">//调用目标方法</span><br>            result = joinPoint.proceed();<br>            System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt; 目标方法之后执行&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br><br>            System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt;&gt; 目标方法出现异常执行&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt; 目标方法完成后执行&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><p>切入点表达式语法:<br><img src="/2023-10-11-T-JAVA/image-5.png" alt="alt text"></p><p>使用<code>PointCut</code>重用切入点表达式:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(value = &quot;execution(public int learning.spring6.aop.annotationaop.Calculator.add(int, int))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><br><span class="hljs-meta">@After(value = &quot;pointCut()&quot;)</span><br><span class="hljs-comment">//或者 value=&quot;全类名.pointCut()&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;后置通知📢📢📢: 使用pointCut重用切入点表达式&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-5-切面的优先级"><a href="#4-5-切面的优先级" class="headerlink" title="4.5 切面的优先级"></a>4.5 切面的优先级</h3><p>相同目标方法上同时存在多个切面时, 切面的优先级控制切面的内外嵌套顺序:  </p><ul><li>优先级高的切面: 外面</li><li>优先级低的切面: 里面</li></ul><p>使用@Order注解可以控制切面的优先级:  </p><ul><li>@Order(较小的数): 优先级高  </li><li>@Order(较大的数): 优先级低</li></ul><p><img src="/2023-10-11-T-JAVA/image-6.png" alt="alt text"></p><h2 id="5-单元测试-JUnit"><a href="#5-单元测试-JUnit" class="headerlink" title="5 单元测试: JUnit"></a>5 单元测试: JUnit</h2><p>对于创建Spring容器, 最终获取对象, 这个过程每次测试都需要写相应的代码, 较为繁琐. 所以我们需要程序自动帮我我们创建容器.<br>Junit无法知晓我们是否使用了Spring. 但是对于Spring, 它提供了一个运行器, 可以读取配置文件或注解来创建容器. 我们只需告诉它配置文件位置即可.<br>这样我们就可以通过Spring整合Junit来创建spring容器了.  </p><ol><li>引入相关依赖  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring对junit支持的相关依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--junit5--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.junit.junit5;<br><br><span class="hljs-keyword">import</span> com.learning.spring6.junit.config.SpringConfig;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/20  14:02</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@SpringJUnitConfig(SpringConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJunit5</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> User user;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJunit5</span><span class="hljs-params">()</span> &#123;<br>        user.sayHello();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Junit4</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = SpringConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJunit4</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;user1&quot;)</span><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test 444&quot;</span>);<br>        user.sayHello();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-事务"><a href="#6-事务" class="headerlink" title="6 事务"></a>6 事务</h2><h3 id="6-1-JdbcTemplate"><a href="#6-1-JdbcTemplate" class="headerlink" title="6.1 JdbcTemplate"></a>6.1 JdbcTemplate</h3><p>Spring框架对JDBC进行封装, JdbcTemplate方便对数据库操作  </p><ol><li>引入相关依赖  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Spring持久化层支持的jar--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--数据源 连接池--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">USE spring;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">Table</span> `t_tmp` (<br>     `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>     `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT &quot;姓名&quot;,<br>     `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> Comment &quot;年龄&quot;,<br>     `sex` <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT &quot;性别&quot;,<br>     <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>     )ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><p>配置  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.tx.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/20  15:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-meta">@ComponentScan(&quot;com.learning.spring6.tx&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String jdbcUrl;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.user&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String jdbcUsername;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String jdbcPassword;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String jdbcDriverClassName;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(jdbcDriverClassName);<br>        dataSource.setUrl(jdbcUrl);<br>        dataSource.setUsername(jdbcUsername);<br>        dataSource.setPassword(jdbcPassword);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate</span><span class="hljs-params">(DruidDataSource dataSource)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(dataSource);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(SpringConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcTemplateTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//添加</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO t_tmp VALUES (NULL, ?,?,?)&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, <span class="hljs-string">&quot;东方不败&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;未知&quot;</span>);<br>        System.out.println(rows);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-事务的基本概念"><a href="#6-2-事务的基本概念" class="headerlink" title="6.2 事务的基本概念"></a>6.2 事务的基本概念</h4><p>数据库事务是一个对数据进行一系列操作的操作序列, 这些操作要么全部执行, 要么全部不执行, 是一个不可分割的单位.<br>事务由事务开始与事务结束之间的所有数据库操作组成  </p><p><strong>事务的特性ACID</strong>  </p><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><p>有编程式事务和声明式事务  </p><ul><li>编程式事务: 通过编写代码实现</li><li>声明式事务: spring框架通过配置声明实现 <ul><li>基于注解</li><li>基于xml</li></ul></li></ul><h2 id="7-资源操作-Resouces"><a href="#7-资源操作-Resouces" class="headerlink" title="7 资源操作: Resouces"></a>7 资源操作: Resouces</h2><p>Spring的Resource接口位于org.springframework.core.io中. 旨在成为一个强大的接口, 用于抽象对低级资源的访问   </p><h3 id="7-1-Resource接口"><a href="#7-1-Resource接口" class="headerlink" title="7.1 Resource接口"></a>7.1 Resource接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Resource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InputStreamSource</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">exists</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isReadable</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.exists();<br>    &#125;<br><br>    <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOpen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    URL <span class="hljs-title function_">getURL</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    URI <span class="hljs-title function_">getURI</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    File <span class="hljs-title function_">getFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    <span class="hljs-keyword">default</span> ReadableByteChannel <span class="hljs-title function_">readableChannel</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> Channels.newChannel(<span class="hljs-built_in">this</span>.getInputStream());<br>    &#125;<br><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">contentLength</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">lastModified</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    Resource <span class="hljs-title function_">createRelative</span><span class="hljs-params">(String relativePath)</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    <span class="hljs-meta">@Nullable</span><br>    String <span class="hljs-title function_">getFilename</span><span class="hljs-params">()</span>;<br><br>    String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-Resource实现类"><a href="#7-2-Resource实现类" class="headerlink" title="7.2 Resource实现类"></a>7.2 Resource实现类</h3><p>Resource接口是Spring资源访问策略的抽象, 它本身不提供任何资源访问实现, 具体资源访问由该接口的实现类完成  </p><ol><li><strong>UrlResource</strong>: 访问网络资源</li><li><strong>ClassPathResource</strong>: 获取类路径(classes)下的资源</li><li><strong>FileSystemResource</strong>: 访问文件资源系统, 一般用java本身的File类, 不使用本类访问</li><li>ServletContextResource: 用于Web应用程序</li></ol><h3 id="7-3-Resource类图"><a href="#7-3-Resource类图" class="headerlink" title="7.3 Resource类图"></a>7.3 Resource类图</h3><p><img src="/2023-10-11-T-JAVA/image-7.png" alt="alt text"></p><h3 id="7-4-ResourceLoader接口"><a href="#7-4-ResourceLoader接口" class="headerlink" title="7.4 ResourceLoader接口"></a>7.4 ResourceLoader接口</h3><p>该接口实现类的实例可以获得一个Resource实例<br>当Spring应用需要进行资源访问时, 实际上并不需要直接使用Resource实现类, 而是调用ResourceLoader实例的getResource()方法来获取资源. Resourceloader将会负责选择Resource实现类, 也就是确定具体的资源访问策略, 从而将应用程序和具体的资源访问策略分开.  </p><h3 id="7-5-ResourceLoaderAware接口"><a href="#7-5-ResourceLoaderAware接口" class="headerlink" title="7.5 ResourceLoaderAware接口"></a>7.5 ResourceLoaderAware接口</h3><p>ResourceLoaderAware接口实现类的实例中可以获取一个ResourceLoader的引用<br>ResourceLoaderAware接口也提供了一个setResourceLoader()方法, 该方法由spring容器负责调用, Spring容器会将一个ResourceLoader对象作为该方法的参数传入  </p><h3 id="7-6-使用Resource作为属性"><a href="#7-6-使用Resource作为属性" class="headerlink" title="7.6 使用Resource作为属性"></a>7.6 使用Resource作为属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.resource.di;<br><br><span class="hljs-keyword">import</span> org.apache.logging.log4j.core.config.plugins.validation.constraints.Required;<br><span class="hljs-keyword">import</span> org.springframework.aot.hint.annotation.Reflective;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/20  18:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceBean</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;r.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Resource resource;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;configUrl&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(resource.getFilename());<br>        System.out.println(resource.getDescription());<br>        System.out.println(url);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> Resource <span class="hljs-title function_">getResource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> resource;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setResource</span><span class="hljs-params">(Resource resource)</span> &#123;<br>        <span class="hljs-built_in">this</span>.resource = resource;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="8-国际化-I18n"><a href="#8-国际化-I18n" class="headerlink" title="8 国际化: I18n"></a>8 国际化: I18n</h2><p>配置类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ResourceBundleMessageSource <span class="hljs-title function_">getMessageSource</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ResourceBundleMessageSource</span> <span class="hljs-variable">messageSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceBundleMessageSource</span>();<br>    messageSource.setBasename(<span class="hljs-string">&quot;message&quot;</span>);<br>    messageSource.setDefaultEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-keyword">return</span> messageSource;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>    ResourceBundleMessageSource messageSource;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> messageSource.getMessage(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-literal">null</span>, Locale.US);<br>        System.out.println(test);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/2023-10-11-T-JAVA/image-8.png" alt="alt text"></p><h2 id="9-数据校验-Validation"><a href="#9-数据校验-Validation" class="headerlink" title="9 数据校验: Validation"></a>9 数据校验: Validation</h2><h3 id="9-1-通过实现Validator接口校验"><a href="#9-1-通过实现Validator接口校验" class="headerlink" title="9.1 通过实现Validator接口校验"></a>9.1 通过实现Validator接口校验</h3><ol><li>引入相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.0.5.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.el<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.validator.one;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/21  16:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>编写校验逻辑  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.validator.one;<br><br><span class="hljs-keyword">import</span> org.springframework.validation.Errors;<br><span class="hljs-keyword">import</span> org.springframework.validation.ValidationUtils;<br><span class="hljs-keyword">import</span> org.springframework.validation.Validator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/21  16:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Validator</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * supports方法表示这个校验需要用在哪个类型上</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> Person.class.equals(clazz);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 具体校验逻辑的地方</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> errors</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">(Object target, Errors errors)</span> &#123;<br>        <span class="hljs-comment">//name 不为空</span><br><br>        ValidationUtils.rejectIfEmpty(errors, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name.empty&quot;</span>, <span class="hljs-string">&quot;name is null&quot;</span>);<br><br>        <span class="hljs-comment">//age 0~200</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) target;<br>        <span class="hljs-keyword">if</span>(person.getAge() &lt; <span class="hljs-number">0</span>)&#123;<br>            errors.rejectValue(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;ageless0&quot;</span>, <span class="hljs-string">&quot;age is null&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(person.getAge() &gt; <span class="hljs-number">200</span>)&#123;<br>            errors.rejectValue(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;ageover200&quot;</span>, <span class="hljs-string">&quot;age is greater than 200&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.validator.one;<br><br><span class="hljs-keyword">import</span> org.springframework.validation.BindingResult;<br><span class="hljs-keyword">import</span> org.springframework.validation.DataBinder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/21  16:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">1000</span>);<br>        person.setName(<span class="hljs-string">&quot;jack&quot;</span>);<br><br>        <span class="hljs-comment">//创建person的databinder</span><br>        <span class="hljs-type">DataBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataBinder</span>(person);<br><br><br>        <span class="hljs-comment">//设置校验器</span><br>        binder.setValidator(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonValidator</span>());<br><br>        <span class="hljs-comment">//调用方法校验</span><br>        binder.validate();<br><br>        <span class="hljs-comment">//得到结果</span><br>        <span class="hljs-type">BindingResult</span> <span class="hljs-variable">bindingResult</span> <span class="hljs-operator">=</span> binder.getBindingResult();<br>        System.out.println(bindingResult);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="9-2-通过注解方式校验"><a href="#9-2-通过注解方式校验" class="headerlink" title="9.2 通过注解方式校验"></a>9.2 通过注解方式校验</h3><ol><li>创建配置类, 配置<code>LocalValidatorFactoryBean</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.validator.two;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/21  16:20</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.learning.spring6.validator.two&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LocalValidatorFactoryBean <span class="hljs-title function_">getLocalValidatorFactoryBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalValidatorFactoryBean</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>创建实体类, 创建set和get方法, 载属性上使用注解实现校验规则</li></ol><p>常用的注解<br><img src="/2023-10-11-T-JAVA/image-9.png" alt="alt text"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.validator.two;<br><br><span class="hljs-keyword">import</span> jakarta.validation.constraints.Max;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.Min;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/21  16:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Min(value = 0, message = &quot;不小于0&quot;)</span><br>    <span class="hljs-meta">@Max(value = 200,message = &quot;不大于200&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>创建校验器</li></ol><p><strong>1 使用jakarta包的validator</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.validator.two;<br><br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintViolation;<br><span class="hljs-keyword">import</span> jakarta.validation.Validator;<br><span class="hljs-keyword">import</span> jakarta.validation.groups.Default;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/21  16:26</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyValidator1</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Validator validator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validate1</span><span class="hljs-params">(User user)</span> &#123;<br>        Set&lt;ConstraintViolation&lt;User&gt;&gt; validate = validator.validate(user);<br>        <span class="hljs-keyword">return</span> validate.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2 使用spring框架的validator</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.validator.two;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.validation.BindException;<br><span class="hljs-keyword">import</span> org.springframework.validation.Validator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/21  16:28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyValidator2</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Validator validator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validate2</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-type">BindException</span> <span class="hljs-variable">bindException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindException</span>(user, user.getName());<br>        validator.validate(user, bindException);<br>        <span class="hljs-keyword">return</span> bindException.hasErrors();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@SpringJUnitConfig(ValidationConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestValidator</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyValidator1 myValidator1;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyValidator2 myValidator2;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">180</span>);<br>        user.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> myValidator1.validate1(user);<br>        System.out.println(b);<br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">18000</span>);<br>        user.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> myValidator2.validate2(user);<br>        System.out.println(b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="9-3-基于方法实现校验"><a href="#9-3-基于方法实现校验" class="headerlink" title="9.3 基于方法实现校验"></a>9.3 基于方法实现校验</h3><ol><li><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.learning.spring6.validator.by_method&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MethodValidationPostProcessor <span class="hljs-title function_">methodValidationPostProcessor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodValidationPostProcessor</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建实体类及校验规则</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Max(150)</span><br>    <span class="hljs-meta">@Min(0)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>创建校验方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMethod</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> <span class="hljs-meta">@Valid</span> User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(ValidationConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MyService myService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">10</span>);<br>        user.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> myService.testMethod(user);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="9-4-自定义校验"><a href="#9-4-自定义校验" class="headerlink" title="9.4 自定义校验"></a>9.4 自定义校验</h3><ol><li>自定义校验注解和校验器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.validator.by_selfdefine;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Constraint;<br><span class="hljs-keyword">import</span> jakarta.validation.Payload;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotBlank;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@DATA</span> 2024/11/21  17:17</span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-meta">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-comment">//@Repeatable(CannotBlank.List.class)</span><br><span class="hljs-meta">@Constraint(validatedBy = CannotBlankValidator.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CannotBlank &#123;<br>    <span class="hljs-comment">//默认提示信息</span><br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;不能包含空格&quot;</span>;<br><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br><br>    <span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br>    <span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br>    <span class="hljs-meta">@Documented</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> List &#123;<br>        CannotBlank[] value();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.validator.by_selfdefine;<br><br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintValidatorContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/21  17:19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CannotBlankValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;CannotBlank, String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String value, ConstraintValidatorContext context)</span> &#123;<br>        <span class="hljs-keyword">if</span>(value != <span class="hljs-literal">null</span> &amp;&amp; value.contains(<span class="hljs-string">&quot; &quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>定义实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.learning.spring6.validator.by_selfdefine;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> fei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATA</span> 2024/11/21  17:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@CannotBlank</span><br>    <span class="hljs-keyword">private</span> String name;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMethod</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> <span class="hljs-meta">@Valid</span> User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(ValidationConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMethod</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyService myService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;fdsfdsf&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> myService.testMethod(user);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="10-提前编译-AOT"><a href="#10-提前编译-AOT" class="headerlink" title="10 提前编译: AOT"></a>10 提前编译: AOT</h2><p>默认情况下, java使用实时编译JIT(Just In Time) 也叫动态编译, 进行编译, 边运行边编译. 特点是启动较慢, 编译时会占用运行时的资源,但是运行时可以进行性能优化  </p><p>预编译AOT(Ahead Of Time), 可以将源码直接转化为机器码, 启动速度快, 内存占用低, 不过运行时无法进行性能优化, 安装时间很长.<br><code>.java --&gt; .class --&gt; (使用jaotc编译工具) --&gt; .so(程序函数库, 即编译好的可以供其他程序使用的代码和数据)</code></p><p><img src="/2023-10-11-T-JAVA/image-10.png" alt="alt text">  </p><ol><li><p>安装GraalVM编译器:</p><ol><li>官网: <a href="https://www.graalvm.org/latest/getting-started/macos/">https://www.graalvm.org/latest/getting-started/macos/</a></li><li>国内安装SDKMAN: <code>curl -s &quot;https://gitee.com/iCode504/my-sdkman/raw/master/install.sh&quot; | bash</code></li><li>安装Graal: <code>sdk install java 17.0.12-graal</code></li><li>下载插件:  <code>gu install native-image</code></li></ol></li><li><p>编写java代码, 编译, 构建</p><ol><li>编写java代码: <code>Hello.java</code></li><li>代码编译: <code>javac Hello.java</code> &gt;&gt; <code>java.class</code></li><li>构建: <code>native-image Hello</code> &gt;&gt; <code>hello</code> </li><li>运行: <code>./hello</code></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-11-06-Wed-T-数据结构与算法</title>
    <link href="/2024/11/06/2024-11-06-Wed-T-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/2024/11/06/2024-11-06-Wed-T-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-简单"><a href="#1-简单" class="headerlink" title="1. 简单"></a>1. 简单</h1><h2 id="1-1-两数之和"><a href="#1-1-两数之和" class="headerlink" title="1.1 两数之和"></a>1.1 两数之和</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus">示例 <span class="hljs-number">1</span>：<br><br>输入：nums = <span class="hljs-selector-attr">[2,7,11,15]</span>, target = <span class="hljs-number">9</span><br>输出：<span class="hljs-selector-attr">[0,1]</span><br>解释：因为 nums<span class="hljs-selector-attr">[0]</span> + nums<span class="hljs-selector-attr">[1]</span> == <span class="hljs-number">9</span> ，返回 <span class="hljs-selector-attr">[0, 1]</span> 。<br>示例 <span class="hljs-number">2</span>：<br><br>输入：nums = <span class="hljs-selector-attr">[3,2,4]</span>, target = <span class="hljs-number">6</span><br>输出：<span class="hljs-selector-attr">[1,2]</span><br>示例 <span class="hljs-number">3</span>：<br><br>输入：nums = <span class="hljs-selector-attr">[3,3]</span>, target = <span class="hljs-number">6</span><br>输出：<span class="hljs-selector-attr">[0,1]</span><br> <br><br>提示：<br><br><span class="hljs-number">2</span> &lt;= nums<span class="hljs-selector-class">.length</span> &lt;= <span class="hljs-number">104</span><br>-<span class="hljs-number">109</span> &lt;= nums<span class="hljs-selector-attr">[i]</span> &lt;= <span class="hljs-number">109</span><br>-<span class="hljs-number">109</span> &lt;= target &lt;= <span class="hljs-number">109</span><br>只会存在一个有效答案<br> <br><br>进阶：你可以想出一个时间复杂度小于 <span class="hljs-built_in">O</span>(n2) 的算法吗？<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// O(n^2)</span><br><span class="hljs-comment">//按照距离寻找</span><br><span class="hljs-comment">//相邻, 间隔一位, 间隔二位, 间隔三位....</span><br><span class="hljs-comment">//01, 12,23,34,45,56....</span><br><span class="hljs-comment">//02, 13, 24, 35....</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &lt; nums.length; j++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[j-i] + nums[j] == target)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;j-i, j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//哈希表</span><br><span class="hljs-comment">//注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。</span><br><span class="hljs-comment">// 使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N) 降低到 O(1)。</span><br><span class="hljs-comment">// 这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</span><br><span class="hljs-comment">// 时间复杂度：O(N)，其中 N 是数组中的元素数量。对于每一个元素 x，我们可以 O(1) 地寻找 target - x。</span><br><span class="hljs-comment">// 空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销。</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">complement</span> <span class="hljs-operator">=</span> target - nums[i]; <span class="hljs-comment">// 寻找 target - x</span><br>        <span class="hljs-keyword">if</span> (map.containsKey(complement)) &#123; <span class="hljs-comment">// 如果存在，返回索引</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; map.get(complement), i &#125;;<br>        &#125;<br>        map.put(nums[i], i); <span class="hljs-comment">// 将 x 插入哈希表</span><br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;No two sum solution&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-两数相加"><a href="#1-2-两数相加" class="headerlink" title="1.2 两数相加"></a>1.2 两数相加</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">示例 1：<br>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.<br><br>示例 2：<br>输入：l1 = [0], l2 = [0]<br>输出：[0]<br><br>示例 3：<br>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, tail = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> l1 != <span class="hljs-literal">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> l2 != <span class="hljs-literal">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> n1 + n2 + carry;<br>            <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>                head = tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>                tail = tail.next;<br>            &#125;<br>            carry = sum / <span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">if</span> (l1 != <span class="hljs-literal">null</span>) &#123;<br>                l1 = l1.next;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l2 != <span class="hljs-literal">null</span>) &#123;<br>                l2 = l2.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>) &#123;<br>            tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-3-无重复字符的最长子串"><a href="#1-3-无重复字符的最长子串" class="headerlink" title="1.3 无重复字符的最长子串"></a>1.3 无重复字符的最长子串</h2><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长”子串”的长度。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">示例 1</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-attribute">输入</span><span class="hljs-punctuation">:</span> <span class="hljs-string">s = &quot;abcabcbb&quot;</span><br><span class="hljs-attribute">输出</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3 </span><br><span class="hljs-attribute">解释</span><span class="hljs-punctuation">:</span> <span class="hljs-string">因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br><span class="hljs-attribute">示例 2</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-attribute">输入</span><span class="hljs-punctuation">:</span> <span class="hljs-string">s = &quot;bbbbb&quot;</span><br><span class="hljs-attribute">输出</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br><span class="hljs-attribute">解释</span><span class="hljs-punctuation">:</span> <span class="hljs-string">因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br><span class="hljs-attribute">示例 3</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-attribute">输入</span><span class="hljs-punctuation">:</span> <span class="hljs-string">s = &quot;pwwkew&quot;</span><br><span class="hljs-attribute">输出</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br><span class="hljs-attribute">解释</span><span class="hljs-punctuation">:</span> <span class="hljs-string">因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br>     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。<br><br>提示：<br><br>0 &lt;= s.length &lt;= 5 * 104<br>s 由英文字母、数字、符号和空格组成<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//滑动窗口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> n;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = <span class="hljs-number">1</span>;<br>        HashSet&lt;Character&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        set.add(s.charAt(l));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(r&lt;n)&#123;<br>            <span class="hljs-keyword">while</span>(r&lt;n &amp;&amp; !set.contains(s.charAt(r)))&#123;<br>                set.add(s.charAt(r));<br>                r++;<br>            &#125;<br>            res = Math.max(res, r-l);<br>            set.remove(s.charAt(l)); <span class="hljs-comment">// </span><br>            l++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="1-4-寻找两个正序数组的中位数"><a href="#1-4-寻找两个正序数组的中位数" class="headerlink" title="1.4 寻找两个正序数组的中位数"></a>1.4 寻找两个正序数组的中位数</h2><h1 id="2-一般"><a href="#2-一般" class="headerlink" title="2. 一般"></a>2. 一般</h1><h1 id="3-困难"><a href="#3-困难" class="headerlink" title="3. 困难"></a>3. 困难</h1>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-09-12-Thu-T-Go语言</title>
    <link href="/2024/09/12/2024-09-12-Thu-T-Go%E8%AF%AD%E8%A8%80/"/>
    <url>/2024/09/12/2024-09-12-Thu-T-Go%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-09-12-Thu-T-文件处理微服务</title>
    <link href="/2024/09/12/2024-09-12-Thu-T-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2024/09/12/2024-09-12-Thu-T-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天哥们又接到一个文件处理的开发需求，要实现一个文件上传、下载的通用服务。为了快速满足这一需求，我使用了<code>SpringBoot</code> + <code>华为云OBS</code>快速写了一个小小的程序。</p><p>项目结构如下:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">src<br>└── main<br>    ├── <span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>    │   └── com<br>    │       └── xmbc<br>    │           └── file<br>    │               ├── XmbcFileApplication.<span class="hljs-keyword">java </span><span class="hljs-comment"># 启动类</span><br>    │               ├── <span class="hljs-built_in">config</span><br>    │               │   ├── HuaweiObsConfig.<span class="hljs-keyword">java </span><span class="hljs-comment"># 华为云OBS的配置 （1）</span><br>    │               │   └── ResourcesConfig.<span class="hljs-keyword">java </span> <br>    │               ├── controller <br>    │               │   ├── HuaweiObsFileController.<span class="hljs-keyword">java </span><span class="hljs-comment"># 文件上传下载的Controller （4）</span><br>    │               │   └── SysFileController.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>    │               ├── service<br>    │               │   ├── ISysFileService.<span class="hljs-keyword">java </span><span class="hljs-comment"># 文件处理的接口 （2）</span><br>    │               │   └── impl<br>    │               │       ├── FastDfsSysFileServiceImpl.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>    │               │       ├── HuaweiObsSysFileServiceImpl.<span class="hljs-keyword">java </span><span class="hljs-comment"># 华为云OBS的实现 （3）</span><br>    │               │       └── LocalSysFileServiceImpl.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>    │               └── utils<br>    │                   └── FileUploadUtils.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>    └── resources<br>        ├── application-dev.yaml  <span class="hljs-comment"># 若依的框架原配置，没啥用，当个备份吧</span><br>        ├── application-local.yaml <span class="hljs-comment"># 本地配置</span><br>        ├── <span class="hljs-keyword">banner.txt </span><span class="hljs-comment"># 默认的logo</span><br>        ├── <span class="hljs-keyword">bootstrap.yaml </span><span class="hljs-comment"># 启动类</span><br>        └── logback.xml <span class="hljs-comment"># 日志配置</span><br><span class="hljs-number">12</span> <span class="hljs-keyword">directories, </span><span class="hljs-number">15</span> files<br></code></pre></td></tr></table></figure><p>好吧，大佬一看就知道这是使用了某个开源的框架，本文使用了<a href="https://github.com/yangzongzhuan/RuoYi-Cloud">若依</a>的框架(对应ruoyi-file)。因为本文作者是个程序菜鸟，为了快速满足开发组长的需求，所以使用起来比较粗糙。  </p><p>首先，看看我做了什么好事。在<code>bootstrap.yaml</code>和<code>application-local.yaml</code>中配置好参数，如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># bootstrap.yaml</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">local</span><br><br><span class="hljs-comment"># application-local.yaml</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9300</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">activate:</span><br>      <span class="hljs-attr">on-profile:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">xmbc-file</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 禁用nacos</span><br><span class="hljs-attr">obs:</span><br>  <span class="hljs-attr">huawei:</span><br>    <span class="hljs-attr">bucketName:</span> <span class="hljs-string">test-xcmg-app-fileprocessing</span> <span class="hljs-comment"># 华为云OBS的bucket名称</span><br>    <span class="hljs-attr">endPoint:</span> <span class="hljs-string">https://obs.cn-east-3.myhuaweicloud.com</span> <span class="hljs-comment"># 华为云OBS的endpoint</span><br><br><span class="hljs-attr">file:</span> <span class="hljs-comment"># 先随便乱写的，为了保证config可以读取，这里随便写一个。后续有需要再修改</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/&quot;</span> <br>  <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;xmbc_file&quot;</span> <br>  <span class="hljs-attr">domain:</span> <span class="hljs-string">&quot;local.xmbc.com&quot;</span><br></code></pre></td></tr></table></figure><p>启动配置完成之后，我们就根据我上文的目录结构后注释的编号来看看对应的代码：</p><h3 id="1-HuaweiObsConfig-java"><a href="#1-HuaweiObsConfig-java" class="headerlink" title="(1) HuaweiObsConfig.java"></a>(1) HuaweiObsConfig.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xmbc.file.config;<br><br><span class="hljs-keyword">import</span> com.obs.services.ObsClient;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Minio 配置信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xmbc</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;obs&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaweiObsConfig</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * endpoint填写桶所在的endpoint</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Value(&quot;$&#123;obs.huawei.endPoint&#125;&quot;)</span><br>    String endPoint;<br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 华为云Access Key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">accessKey</span> <span class="hljs-operator">=</span> System.getenv(<span class="hljs-string">&quot;HUAWEICLOUD_SDK_AK&quot;</span>); <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 华为云Secret Key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> System.getenv(<span class="hljs-string">&quot;HUAWEICLOUD_SDK_SK&quot;</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存储桶名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;obs.huawei.bucketName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String bucketName;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建ObsClient实例</span><br><span class="hljs-comment">     * 使用永久AK/SK初始化客户端</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ObsClient <span class="hljs-title function_">getHuaweiObsClient</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObsClient</span>(accessKey, secretKey,endPoint);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-ISysFileService-java"><a href="#2-ISysFileService-java" class="headerlink" title="(2) ISysFileService.java"></a>(2) ISysFileService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xmbc.file.service;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.InputStreamResource;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文件接口</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xmbc</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ISysFileService</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件上传接口</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file 上传的文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 访问地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件下载接口</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileName 下载的文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 访问地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> InputStreamResource <span class="hljs-title function_">downloadFile</span><span class="hljs-params">(String fileName)</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-HuaweiObsSysFileServiceImpl-java"><a href="#3-HuaweiObsSysFileServiceImpl-java" class="headerlink" title="(3) HuaweiObsSysFileServiceImpl.java"></a>(3) HuaweiObsSysFileServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xmbc.file.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.nacos.common.utils.IoUtils;<br><span class="hljs-keyword">import</span> com.obs.services.ObsClient;<br><span class="hljs-keyword">import</span> com.obs.services.model.PutObjectRequest;<br><span class="hljs-keyword">import</span> com.obs.services.model.PutObjectResult;<br><span class="hljs-keyword">import</span> com.xmbc.file.config.HuaweiObsConfig;<br><span class="hljs-keyword">import</span> com.xmbc.file.service.ISysFileService;<br><span class="hljs-keyword">import</span> com.xmbc.file.utils.FileUploadUtils;<br><span class="hljs-keyword">import</span> io.minio.MinioClient;<br><span class="hljs-keyword">import</span> io.minio.PutObjectArgs;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.core.io.InputStreamResource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *文件存储</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xmbc</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(value = &quot;huaweiObsSysFileService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaweiObsSysFileServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ISysFileService</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HuaweiObsConfig huaweiObsConfig;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ObsClient huaweiObsClient;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Minio文件上传接口</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file 上传的文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 访问地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUploadUtils.extractFilename(file);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>        <span class="hljs-type">PutObjectRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PutObjectRequest</span>();<br>        request.setBucketName(huaweiObsConfig.getBucketName());<br>        request.setObjectKey(fileName);<br>        request.setInput(inputStream);<br>        <span class="hljs-type">PutObjectResult</span> <span class="hljs-variable">putObjectResult</span> <span class="hljs-operator">=</span> huaweiObsClient.putObject(request);<br>        IoUtils.closeQuietly(inputStream);<br><br>        <span class="hljs-keyword">return</span> putObjectResult.getObjectUrl();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> InputStreamResource <span class="hljs-title function_">downloadFile</span><span class="hljs-params">(String fileName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamResource</span>(huaweiObsClient.getObject(huaweiObsConfig.getBucketName(), fileName).getObjectContent());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-HuaweiObsController-java"><a href="#4-HuaweiObsController-java" class="headerlink" title="(4) HuaweiObsController.java"></a>(4) HuaweiObsController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.xmbc.file.controller;<br><br><span class="hljs-keyword">import</span> com.xmbc.common.core.domain.R;<br><span class="hljs-keyword">import</span> com.xmbc.common.core.utils.file.FileUtils;<br><span class="hljs-keyword">import</span> com.xmbc.file.service.ISysFileService;<br><span class="hljs-keyword">import</span> com.xmbc.system.api.domain.SysFile;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.core.io.InputStreamResource;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文件请求处理</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xmbc</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaweiObsFileController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HuaweiObsFileController.class);<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;huaweiObsSysFileService&quot;)</span><br>    <span class="hljs-keyword">private</span> ISysFileService huaweiObsSysFileService;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上传对象文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> multipartFile</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/uploadObject&quot;, method = &#123;RequestMethod.POST, RequestMethod.PUT&#125; , produces = MediaType.APPLICATION_JSON_VALUE)</span><br>    <span class="hljs-keyword">public</span> R&lt;SysFile&gt; <span class="hljs-title function_">uploadObject</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile multipartFile)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-comment">// 上传并返回访问地址</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> huaweiObsSysFileService.uploadFile(multipartFile);<br>            <span class="hljs-type">SysFile</span> <span class="hljs-variable">sysFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SysFile</span>();<br>            sysFile.setName(FileUtils.getName(url));<br>            sysFile.setUrl(url);<br>            <span class="hljs-keyword">return</span> R.ok(sysFile);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)<br>        &#123;<br>            log.error(<span class="hljs-string">&quot;上传文件失败&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;上传文件失败: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 下载对象文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileName 文件名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 文件对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/downloadObject&quot;, method = &#123;RequestMethod.GET&#125; , produces = MediaType.APPLICATION_JSON_VALUE)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity <span class="hljs-title function_">downloadObject</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;fileName&quot;)</span> String fileName, <span class="hljs-meta">@RequestParam(value = &quot;openStyle&quot;,required = false)</span> String openStyle)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            openStyle= <span class="hljs-string">&quot;inline&quot;</span>.equals(openStyle)?<span class="hljs-string">&quot;inline&quot;</span>:<span class="hljs-string">&quot;attachment&quot;</span>;<br>            <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>            <span class="hljs-type">InputStreamResource</span> <span class="hljs-variable">inputStreamResource</span> <span class="hljs-operator">=</span> huaweiObsSysFileService.downloadFile(fileName);<br>            headers.add(HttpHeaders.CONTENT_DISPOSITION, openStyle + <span class="hljs-string">&quot;; filename=&quot;</span> + fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>)+<span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">return</span> ResponseEntity.ok()<br>                    .headers(headers)<br>                    .body(inputStreamResource);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)<br>        &#123;<br>            log.error(<span class="hljs-string">&quot;下载文件失败&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> ResponseEntity.of(Optional.of(e.getMessage()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>文件处理</tag>
      
      <tag>微服务</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-09-06-Fri-T-技术学习路线</title>
    <link href="/2024/09/06/2024-09-06-Fri-T-%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <url>/2024/09/06/2024-09-06-Fri-T-%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-目的"><a href="#1-目的" class="headerlink" title="1. 目的"></a>1. 目的</h1><p>说到目的，我现在学习技术的目的已经不再单纯的是因为着迷于技术本身，而是为了生活，过去两年的职业生活，让我逐渐意识到经济基础才能决定上层建筑。我的想法很丰富，想去遨游世界，想当老板，想成为一个技术大佬，想做个歌手… 而这些都好遥远啊，现在的我只能作为一个小小的打杂人员游离于这个社会之中，没有稳定的社交圈，没有自己的稳定居所，只有一份不上不下的工作维持这糟糕的生活。但是我不想这样下去，我想去成都找一份工作，能支撑我有一间自己的稳定居所，有自己的社交圈，不用现在每天提心吊胆，担心裁员，被孤独和焦虑折磨。 所以，所以这一次我重新安排自己的技术学习路线就是为了自己未来有一份稳定可观的工作，最好是在成都，这是我的目标，现在就这么确定好了。我会努力的！加油！</p><h1 id="2-技术学习路线"><a href="#2-技术学习路线" class="headerlink" title="2. 技术学习路线"></a>2. 技术学习路线</h1><p>参考课程：<br><a href="https://www.bilibili.com/video/BV1w4411y7Go?p=11&vd_source=3e149ab79eab845696a34aa43635df76">1.尚硅谷课程</a></p><p>按照自研项目的顺序进行学习。这个顺序也是一般应用部署的工作流程，所以对于记忆也更方便。</p><ul><li><p>自研项目:</p><ol><li>基础设施: Linux</li><li>运行环境: Kubernetes, Docker</li><li>后端: <ol><li>SpringBoot, SpringCloud</li><li>Flowable</li><li>PostgreSQL or MySQL</li></ol></li><li>前端: <ol><li>Vue</li><li>Vue Element Admin</li></ol></li><li>中间件: RabbitMQ, Nacos, Zookeeper, ElasticSearch, Nginx, Redis</li></ol></li><li><p>操作系统</p><ol><li>Linux – 巩固</li></ol></li><li><p>语言:</p><ol><li>Java – 巩固</li><li>Python – 保持</li><li>Go – 有时间去学习</li></ol></li><li><p>数据库:</p><ol><li>postgresql – 有时间去学习</li><li>mysql – 巩固</li><li>redis – 必学</li></ol></li><li><p>云原生：</p><ol><li>Kubernetes – 必学</li><li>Docker – 巩固</li></ol></li><li><p>前后端框架：</p><ol><li>SpringBoot – 巩固</li><li>SpringCloud – 专业学习</li><li>Vue – 专业学习</li></ol></li><li><p>中间件:</p><ol start="4"><li>RabbitMQ – 必学</li><li>Nacos – 必学</li><li>Zookeeper – 必学</li><li>ElasticSearch – 必学</li><li>Nginx – 必学</li><li>Redis – 必学</li></ol></li><li><p>开源项目:<br>  前端: Vue Element Admin – 必学<br>  后端: Flowable – 必学</p></li></ul><h1 id="3-心路历程"><a href="#3-心路历程" class="headerlink" title="3. 心路历程"></a>3. 心路历程</h1><p>2024-09-06: 又一次准备开始，这一次没有以前的那种强烈的斗志，不知道能坚持到什么时候，但是我必须得这么做，为了自己能在一两年内转到成都找一份收入可观的工作，我要努力💪。加油吧！！</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>职业发展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-09-04-Wed-T-Docker</title>
    <link href="/2024/09/04/2024-09-04-Wed-T-Docker/"/>
    <url>/2024/09/04/2024-09-04-Wed-T-Docker/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://liaoxuefeng.com/blogs/all/2022-05-24-docker">https://liaoxuefeng.com/blogs/all/2022-05-24-docker</a></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-09-04-Wed-T-Podman</title>
    <link href="/2024/09/04/2024-09-04-Wed-T-Podman/"/>
    <url>/2024/09/04/2024-09-04-Wed-T-Podman/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>虽然“容器是Linux”，但Podman也可以在Mac和Windows上运行，它提供了一个原生的Podman CLI，并嵌入了一个客户Linux系统来启动您的容器。此访客被称为Podman机器，并使用Podman机器命令进行管理。Mac和Windows上的Podman还监听Docker API客户端，支持直接使用基于Docker的工具和从您选择的语言进行编程访问。</p><h1 id="容器仓库"><a href="#容器仓库" class="headerlink" title="容器仓库"></a>容器仓库</h1><p>配置镜像仓库<br>打开配置文件 <code>/var/home/core/.config/containers/registries.conf</code></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">unqualified-search-registries</span> = [<span class="hljs-string">&quot;docker.io&quot;</span>, <span class="hljs-string">&quot;quay.io&quot;</span>, <span class="hljs-string">&quot;docker.m.daocloud.io&quot;</span>]<br><br><span class="hljs-section">[[registry]]</span><br><span class="hljs-attr">prefix</span> = <span class="hljs-string">&quot;docker.io&quot;</span><br><span class="hljs-attr">location</span> = <span class="hljs-string">&quot;registry-1.docker.io&quot;</span><br><br><span class="hljs-section">[[registry.mirror]]</span><br><span class="hljs-attr">location</span> = <span class="hljs-string">&quot;mirror.baidubce.com&quot;</span><br><br><span class="hljs-section">[[registry]]</span><br><span class="hljs-attr">prefix</span> = <span class="hljs-string">&quot;quay.io&quot;</span><br><span class="hljs-attr">location</span> = <span class="hljs-string">&quot;quay.io&quot;</span><br><br><span class="hljs-section">[[registry.mirror]]</span><br><span class="hljs-attr">location</span> = <span class="hljs-string">&quot;quay-mirror.qiniu.com&quot;</span><br><br><span class="hljs-section">[[registry]]</span><br><span class="hljs-attr">prefix</span> = <span class="hljs-string">&quot;docker.m.daocloud.io&quot;</span><br><span class="hljs-attr">location</span> = <span class="hljs-string">&quot;docker.m.daocloud.io&quot;</span><br><span class="hljs-comment">## [[registry]]</span><br><span class="hljs-comment">## prefix = &quot;example.com/foo&quot;</span><br><span class="hljs-comment">## insecure = false</span><br><span class="hljs-comment">## blocked = false</span><br><span class="hljs-comment">## location = &quot;internal-registry-for-example.com/bar&quot;</span><br><br></code></pre></td></tr></table></figure><h1 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h1><p>Podman和Docker都可以直接在Linux上运行，但是如果是在Windows或者MacOS上，需要创建一个linux的虚拟机，让Docker和Podman在虚拟机中运行。Docker的方式是通过Docker Desktop来创建Linux虚拟机，而Podman则是需要手动<code>podman machine init</code>来创建Linux虚拟机。</p><h3 id="Podman和Docker区别"><a href="#Podman和Docker区别" class="headerlink" title="Podman和Docker区别"></a>Podman和Docker区别</h3><p><img src="/img/2024-09-04-Wed-T-Docker/image.png" alt="alt text"></p><h3 id="Podman和Docker-与K8S"><a href="#Podman和Docker-与K8S" class="headerlink" title="Podman和Docker 与K8S"></a>Podman和Docker 与K8S</h3><p><img src="/img/2024-09-04-Wed-T-Docker/image-1.png" alt="alt text"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Podman</tag>
      
      <tag>Docker</tag>
      
      <tag>Container</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-08-15-Thu-T-Linux</title>
    <link href="/2024/08/15/2024-08-15-Thu-T-Linux/"/>
    <url>/2024/08/15/2024-08-15-Thu-T-Linux/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、基础篇"><a href="#一、基础篇" class="headerlink" title="一、基础篇"></a>一、基础篇</h1><h2 id="1-1-Linux入门"><a href="#1-1-Linux入门" class="headerlink" title="1.1 Linux入门"></a>1.1 Linux入门</h2><p>linux 官网: <a href="http://www.kernel.org/">www.kernel.org</a></p><p>网站扫描: <a href="https://sitereport.netcraft.com/">https://sitereport.netcraft.com</a></p><ul><li>Linux和Unix关系<ul><li>Uninx<ul><li>BSD<ul><li>FreeBSD</li></ul></li><li>Sun Solaris</li><li>IBM AIX</li><li>AT&amp;T System V</li><li>Minix<ul><li>GUN&#x2F;Linux内核<ul><li>Ubuntu</li><li>RedHat<ul><li>centOS</li><li>RedhatOS</li></ul></li><li>SUSE</li><li>Fedora</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="1-2-vm和Linux安装"><a href="#1-2-vm和Linux安装" class="headerlink" title="1.2 vm和Linux安装"></a>1.2 vm和Linux安装</h2><p>使用相应工具安装linux虚拟机, 本文使用multipass安装虚拟机<br>安装multipass <code>brew install multipass</code></p><p>虚拟机网络连接模式介绍</p><ul><li>桥接模式: 虚拟机会获得一个与主机网络相同网段的IP地址，与主机、同网段的其他设备以及外网设备进行通信. 桥接模式将虚拟机直接连接到物理网络，虚拟机像是主机网络中的一台真实设备, 适合需要与外网和局域网中的其他设备自由通信的虚拟机，常用于企业网络、开发测试等。可能会引起ip冲突. </li><li>NAT模式: 虚拟机被分配一个虚拟的私有IP地址，外部网络无法直接访问该虚拟机。虚拟机通过主机的NAT转发来访问外网，主机充当网关角色。虚拟机只能通过主机访问外网，不能直接访问局域网中的其他设备。不会引起ip冲突</li><li>仅主机模式:仅主机模式为虚拟机和主机之间创建一个完全隔离的网络环境，虚拟机不能直接访问外网。虚拟机和主机通过一个专用的虚拟网络接口互相通信，但不会与外部网络相连。不能访问外网，也不能与局域网中的其他设备通信。</li></ul><p>虽然虚拟机与局域网中的其他设备隔离，但虚拟机与主机之间仍然可以直接通信。通常，Multipass 会为主机和虚拟机建立一个虚拟网络接口，用于相互访问。<br>通过这个接口，主机可以使用虚拟机的内部 IP 地址直接访问虚拟机的服务。这个功能设计为方便主机与虚拟机之间的数据交换，尤其是在不需要外部网络访问的开发和测试场景中。</p><h2 id="1-3-Linux目录结构"><a href="#1-3-Linux目录结构" class="headerlink" title="1.3 Linux目录结构"></a>1.3 Linux目录结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── bin -&gt; usr/bin<br>├── bin.usr-is-merged<br>├── boot<br>├── dev<br>├── etc<br>├── home<br>├── lib -&gt; usr/lib<br>├── lib.usr-is-merged<br>├── lost+found<br>├── media<br>├── mnt<br>├── opt<br>├── proc<br>├── root<br>├── run<br>├── sbin -&gt; usr/sbin<br>├── sbin.usr-is-merged<br>├── snap<br>├── srv<br>├── sys<br>├── tmp<br>├── usr<br>└── var<br></code></pre></td></tr></table></figure><ul><li><code>/bin (/usr/bin, /usr/local/bin)</code>: Binary的缩写, 用于存放经常使用的命令</li><li><code>/sbin (/usr/sbin, /usr/local/sbin)</code>: Super User Binary, 系统管理员使用的系统管理命令</li><li><code>/home</code>: 存放普通用户的目录</li><li><code>/root</code>: 管理员用户主目录</li><li><code>/lib</code>: 系统开机所需要的最基本的动态连接共享库</li><li><code>/lost+found</code>: 这个目录一般情况是空的, 当系统非法关机后, 这里会存放一些文件</li><li><code>/etc</code>: 所有的系统管理所需要的配置文件和子目录</li><li><code>/usr</code>: 用户的很多应用程序文件都放在这个目录下, 类似于windows program files</li><li><code>/boot</code>: 存放用于启动Linux的一些核心文件, 包括连接文件和镜像文件</li><li><code>/proc</code>: 虚拟的目录, 系统内存的映射, 访问这个目录可以获取系统信息</li><li><code>/srv</code>: service缩写, 存放一些服务启动后需要提取的数据</li><li><code>/sys</code>: 这是linux2.6内核的一个变化, 该目录下安装了2.6内核新出现的一个文件系统sysfs</li><li><code>/tmp</code>: 用于存放临时文件</li><li><code>/dev</code>: device, 所有的硬件用文件的形式存储到此处</li><li><code>/media</code>: Linux会自动识别一些设备, 如U盘, 光驱, 当识别到这些设备后, 会将其挂载在此目录下</li><li><code>/mnt</code>: 挂载其他文件系统使用</li><li><code>/opt</code>: 给主机额外安装软件所摆放的目录, </li><li><code>/usr/local</code>: 给主机额外安装软件的安装目录, 一般是通过通过编译源码的方式安装的程序</li><li><code>/var</code>: 用于存放日志等不断扩充的内容, 或者经常被修改的内容都存放在此目录下</li><li><code>/selinux</code>: security enhanced linux, selinux是一种安全子系统, 它能控制程序, 有三种模式, 可以自行设置.</li></ul><h1 id="二、实际操作篇"><a href="#二、实际操作篇" class="headerlink" title="二、实际操作篇"></a>二、实际操作篇</h1><h2 id="2-1-远程登录"><a href="#2-1-远程登录" class="headerlink" title="2.1 远程登录"></a>2.1 远程登录</h2><p> 编辑虚拟机ssh配置文件<code>/etc/ssh/sshd_config</code><br> 修改或添加: <code>PermitRootLogin yes</code><br> 这样虚拟机可以通过ssh服务进行账号密码的登录<br> <code>ssh -p22 root@192.168.64.19</code></p><p> 同时可以进行文件传输<br> <code>scp root@node2:/home/ubuntu/cni-plugins-linux-amd64-v1.3.0.tgz ./</code> : 此命令将远程主机node2上的文件下载到当前目录下  </p><h2 id="2-2-vim和vi"><a href="#2-2-vim和vi" class="headerlink" title="2.2 vim和vi"></a>2.2 vim和vi</h2><p> Linux系统会内置vi编辑器<br> vim是vi的增强版本, 可以主动根据字体颜色辨别语法正确性. 代码补全, 编译以及错误跳转等方便编程等功能特别丰富<br> 命令行输入<code>vimtutor</code>进入vim tutor, 可以学习一些基本操作<br> <a href="https://yianwillis.github.io/vimcdoc/doc/usr_01.html#usr_01.txt">vim手册(同<code>:help user-manual</code>)</a></p><p> <strong>vi和vim的三种模式</strong><br> 其实官方文档里没有按照此分类</p><ol><li>默认模式<br>   以vim打开一个文档就进入了默认模式. 在这个模式中, 可以使用上下左右键和删除键来移动光标. 同时可以通过一些字母键来编辑文本内容</li><li>插入模式<br>   按下: <code>i</code>, <code>I</code>, <code>o</code>, <code>O</code>, <code>a</code>, <code>A</code>, <code>r</code>, <code>R</code>等任何一个字符进入编辑模式, 通常使用<code>i</code>. (airo)<br>   <code>i</code>:从当前光标之前插入<br>   <code>I</code>: 从行首插入<br>   <code>A</code>: 从行尾追加<br>   <code>a</code>: 从当前光标之后追加<br>   <code>r</code>: 替换当前光标所在的单个字符, 替换后自动结束<br>   <code>R</code>: 替换当前光标所在字符, 替换后移动到下一个字符继续替换</li><li>命令行模式<br>   在此模式下, 可以根据相关指令, 完成读取, 存盘, 替换, 退出vim, 显示行号等操作.</li></ol><p> 三种模式的关系:</p><p><img src="/img/2024-08-15-Thu-T-Linux/vim%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F.svg" alt="alt text"></p><h3 id="2-2-1-快捷键使用"><a href="#2-2-1-快捷键使用" class="headerlink" title="2.2.1 快捷键使用"></a>2.2.1 快捷键使用</h3><p><strong>编辑模式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 拷贝与粘贴</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝当前行</span><br>yy<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝当前行向下的5行(从当前行为1开始计算, 1,2,3,4,5)</span><br>5yy<br><span class="hljs-meta prompt_"># </span><span class="language-bash">粘贴</span><br>p # 从下一行的行首开始粘贴复制或剪贴的内容<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.删除</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除当前行</span><br>dd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除当前行向下的5行(从当前行为1开始计算, 1,2,3,4,5)</span><br>5dd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除某个字母</span><br>dw<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除光标下的某个字符</span><br>x<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">撤销上一步操作</span><br>u<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 查找</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在文件中查找某个单词, 例如: <span class="hljs-string">&quot;test&quot;</span></span><br>/test # 输入回车后查找, 查找下一个输入n<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 设置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置文件行号</span><br>set nu # 开启行号<br>set nonu # 关闭行号<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">5. 其他操作</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到首行 good game</span><br>gg<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到末行</span><br>G<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到当前行的行首</span><br>0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到当前行的行尾</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"></span><br><span class="language-bash"></span><br><br><br><br><br></code></pre></td></tr></table></figure><h2 id="2-3-开机、重启和用户登录、注销"><a href="#2-3-开机、重启和用户登录、注销" class="headerlink" title="2.3 开机、重启和用户登录、注销"></a>2.3 开机、重启和用户登录、注销</h2><h3 id="2-3-1-关机、重启和注销"><a href="#2-3-1-关机、重启和注销" class="headerlink" title="2.3.1 关机、重启和注销"></a>2.3.1 关机、重启和注销</h3><p><code>shutdown -h now</code>: 立即关机, halt<br><code>shutdown</code> &#x3D;&#x3D; <code>shutdown -h 1</code>: 一分钟后关机<br><code>shutdown -r now</code>: 立即重启<br><code>halt</code>: 关机, 不会等待设备关闭, 与shutdown -h now效果相同<br><code>reboot</code>: 重启<br><code>sync</code>: 将内存的数据同步到磁盘  </p><p>Note: 不管是重启还是关机, 首先要运行sync命令, 将内存数据写到磁盘,否则数据可能丢失<br>目前shutdown&#x2F;reboot&#x2F;halt 等命令均已经在关机前运行了sync, 但是还是有可能丢失数据, 因此还是建议在关机前运行sync  </p><h3 id="2-3-2-用户登录、注销"><a href="#2-3-2-用户登录、注销" class="headerlink" title="2.3.2 用户登录、注销"></a>2.3.2 用户登录、注销</h3><p><code>su -l root</code>: 切换到root用户, -l参数表示登录<br><code>su - root</code>: 切换到root用户, 不登录<br><code>logout</code>: 退出当前用户, 在运行级别5下, 但是在运行级别3下, 退出不会关机  </p><h3 id="2-3-3-用户管理"><a href="#2-3-3-用户管理" class="headerlink" title="2.3.3 用户管理"></a>2.3.3 用户管理</h3><p><strong>1. 添加用户</strong><br><code>useradd 用户名</code>: 创建用户, 默认密码为空, 默认家目录为&#x2F;home&#x2F;用户名<br><code>useradd -g 组名 用户名</code>: 为用户指定组<br><code>useradd -d /home/用户名 用户名</code>: 为用户指定家目录  </p><p><code>passwd 用户名</code>: 修改用户密码  </p><p><strong>2. 修改用户</strong>  </p><p><code>usermod -g 组名 用户名</code>: 修改用户组<br><code>usermod -aG sudo 用户名</code>: 将用户添加到sudo用户组  </p><p><strong>3. 删除用户</strong><br><code>userdel 用户名</code>: 删除用户, 会保留家目录<br><code>userdel -r 用户名</code>: 删除用户, -r参数表示删除用户家目录<br>一般情况, 建议保留家目录, 以免数据丢失  </p><p><strong>4. 查询用户信息</strong><br><code>id 用户名</code>: 查看用户信息<br><code>who</code>: 查看当前登录用户<br><code>w</code>: 查看当前登录用户, 显示时间<br><code>last</code>: 查看系统登录日志<br><code>whoami</code>: 查看当前用户名<br><code>who am i</code>: 查看当前用户名, 显示ip地址, 登录时间  </p><h3 id="2-3-4-组管理"><a href="#2-3-4-组管理" class="headerlink" title="2.3.4 组管理"></a>2.3.4 组管理</h3><p><strong>5. 组管理</strong><br><code>groupadd 组名</code>: 创建组<br><code>groupmod -n 新组名 老组名</code>: 修改组名<br><code>groupdel 组名</code>: 删除组  </p><p>添加用户时, 如果没有指定组, 则默认生成一个组, 该组名称与用户名相同  </p><p><strong>6. 用户和组相关的文件</strong><br><code>/etc/passwd</code>: 用户信息 (用户名:密码:UID:GID:注释:主目录:shell)   </p><p><code>/etc/group</code>: 组信息 (组名:密码:GID:用户列表)  </p><p><code>/etc/shadow</code>: 用户密码信息 (登录名:加密口令:最后一次密码修改日期:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效日期:标志)  </p><h2 id="2-4-实用指令"><a href="#2-4-实用指令" class="headerlink" title="2.4 实用指令"></a>2.4 实用指令</h2><p><code>shel</code>的理解:<br><img src="/img/2024-08-15-Thu-T-Linux/image.png" alt="alt text"></p><h3 id="2-4-1-运行级别"><a href="#2-4-1-运行级别" class="headerlink" title="2.4.1 运行级别"></a>2.4.1 运行级别</h3><p><strong>基本介绍</strong>  </p><ul><li>0: 系统停机状态，系统默认运行级别不能设为0，否则不能正常启动。  </li><li>1: 单用户工作状态，root权限，用于系统维护，禁止远程登陆。  </li><li>2: 多用户状态(没有NFS)。NFS Network File System，即网络文件系统，用于挂载远程文件系统。  </li><li>3: 完全的多用户状态(有NFS)，登陆后进入控制台命令行模式。  </li><li>4: 系统未使用，保留。  </li><li>5: X11控制台，登陆后进入图形GUI模式。  </li><li>6: 系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动。</li></ul><p><code>systemctl get-default</code>: 获取当前默认运行级别。  </p><p>通过init切换运行级别。<br>应用实例: <code>init [0123456]</code>  </p><p><strong>开启设定</strong><br>对于centOS7以前: <code>/etc/inittab</code><br>ubuntu:  <code>/usr/lib/systemd/system</code>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">multi-user.target: analogous to runlevel 3   # 多用户等价于运行级别3<br>graphical.target: analogous to runlevel 5  # 图形化界面等价于运行级别5<br></code></pre></td></tr></table></figure><p>设置默认的运行级别: <code>systemctl set-default graphical.target</code>  </p><h3 id="2-4-2-帮助指令"><a href="#2-4-2-帮助指令" class="headerlink" title="2.4.2 帮助指令"></a>2.4.2 帮助指令</h3><p><code>man [命令或配置文件]</code>: 查看帮助<br><code>help [命令]</code>: 查看shell内置命令的帮助信息<br><code>top</code>: 查看系统进程使用情况<br><code>history</code>: 查看命令历史, <code>history 10</code>: 查看最近10条命令, <code>!100</code>: 执行历史记录中第100条命令<br><code>df -h</code>: 查看磁盘使用情况<br><code>free -m</code>: 查看内存使用情况  </p><h2 id="2-4-3-文件-文件夹操作"><a href="#2-4-3-文件-文件夹操作" class="headerlink" title="2.4.3 文件&#x2F;文件夹操作"></a>2.4.3 文件&#x2F;文件夹操作</h2><p><code>mkdir [选项] 目录名</code>: 创建目录, <code>-p</code>创建多级目录<br><code>rmdir [选项] 目录名</code>: 删除空目录<br><code>touch [选项] 文件名</code>: 创建文件<br><code>rm [选项] 文件名</code>: 删除文件, <code>-r</code>递归删除<br><code>cp [选项] 源文件 目标文件</code>: 复制文件<br><code>mv [选项] 源文件 目标文件</code>: 移动文件, <code>-u</code>移动文件并更新软连接<br><code>ln [选项] 源文件 软连接名</code>: 创建软连接, <code>-s</code>创建软连接<br><code>cat [选项] 文件名</code>: 显示文件内容, <code>-n</code>显示行数<br><code>head [选项] 文件名</code>: 显示文件前几行, <code>-n</code>指定显示前n行, 不加参数则显示前10行<br><code>tail [选项] 文件名</code>: 显示文件后几行, <code>-n</code>指定显示后n行, 不加参数则显示后10行, <code>-f</code>实时显示文件内容<br><code>more [选项] 文件名</code>: 分页显示文件内容,<br><code>less [选项] 文件名</code>: 分页显示文件内容, <code>/</code>搜索, <code>n</code>下一行, <code>N</code>上一行, <code>q</code>退出  </p><h3 id="2-4-4-时间日期类"><a href="#2-4-4-时间日期类" class="headerlink" title="2.4.4 时间日期类"></a>2.4.4 时间日期类</h3><p><code>date +%Y-%m-%d_%H:%M:%S</code>: 2024-11-07_03:08:38  </p><h3 id="2-4-5-搜索查找类"><a href="#2-4-5-搜索查找类" class="headerlink" title="2.4.5 搜索查找类"></a>2.4.5 搜索查找类</h3><p><code>find [选项] 路径名</code>: 在指定路径下查找文件, <code>-name</code>按文件名查找, <code>-user</code>按用户查找, <code>-type</code>按文件类型查找, <code>-mtime</code>按修改时间查找, <code>-size</code>按文件大小查找(+代表大于, -代表小于, 不写代表等于. k, M, G), <code>-exec</code>执行命令, <code>-delete</code>删除文件  </p><p><code>locate 文件名</code>: 定位文件路径, 第一次执行之前需要执行<code>updatedb</code>命令  </p><p><code>grep [选项] 关键字 文件名</code>: 在文件中查找关键字, <code>-i</code>不区分大小写, <code>-n</code>显示行号和匹配行, <code>-v</code>反向查找, <code>-r</code>递归查找, <code>-l</code>只显示文件名  </p><h3 id="2-4-6-压缩和解压"><a href="#2-4-6-压缩和解压" class="headerlink" title="2.4.6 压缩和解压"></a>2.4.6 压缩和解压</h3><p><code>gzip [选项] 文件名</code>: 压缩文件, 只能压缩为*.gz文件 <code>-d</code>解压文件, <code>-k</code>保留文件名, <code>-f</code>强制解压, <code>-c</code>压缩文件到标准输出<br><code>gunzip [选项] 文件名</code>: 解压文件  </p><p><code>zip [选项] 文件名 压缩的内容</code>: 压缩文件, 可以压缩为*.zip文件, <code>-r</code>递归压缩, <code>-d</code>解压文件, <code>-k</code>保留文件名, <code>-f</code>强制解压, <code>-c</code>压缩文件到标准输出<br><code>unzip [选项] 文件名</code>: 解压文件, <code>-d</code>指定解压路径  </p><p><code>tar [选项] xxx.tar.gz 打包的内容</code>: 压缩文件, 可以压缩为*.tar.gz文件, <code>-z</code>打包同时压缩, <code>-v</code>显示详细信息, <code>-f</code>指定压缩后的文件名, <code>-c</code>产生.tar打包文件, <code>-x</code>解压.tar文件  </p><h2 id="2-5-组管理和权限管理"><a href="#2-5-组管理和权限管理" class="headerlink" title="2.5 组管理和权限管理"></a>2.5 组管理和权限管理</h2><p>在linux中, 每个用户必须属于一个组, 不能独立于组之外.<br>对于每一个文件, 有:  </p><ul><li>所有者</li><li>所在组</li><li>其他组</li></ul><p><code>chown [选项] 新所有者:新组 新文件</code>: 修改文件所有者和所在组, <code>-R</code>递归修改<br><code>groupadd [选项] 新组名</code>: 创建新组<br><code>groupmod [选项] 老组名 新组名</code>: 修改组名<br><code>chgrp [选项] 新组 新文件</code>: 修改文件所在组, <code>-R</code>递归修改  </p><p><code>usermod -g 新组 用户名</code>: 修改用户所在组<br><code>usermod -d 新目录 用户名</code>: 修改用户主目录, <code>-m</code>将用户主目录移动到新目录(usermod -d &#x2F;home&#x2F;tom -m newtomgroup)  </p><p><strong>权限介绍</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l # 显示的内容如下:  <br>drwxr-x--- 6 ubuntu ubuntu 4096 Nov  7 02:52    ubuntu<br>0123456789 10   11   12    13(byte) 14(modify time)   15<br></code></pre></td></tr></table></figure><p>0-9位说明:  </p><ul><li><p>第0位: 文件类型</p><ul><li><code>d</code>: 目录</li><li><code>-</code>: 普通文件</li><li><code>l</code>: 符号链接</li><li><code>c</code>: 字符设备文件</li><li><code>b</code>: 块设备文件, 比如硬盘</li></ul></li><li><p>第1-3位: 文件所有者权限</p></li><li><p>第4-6位: 文件所在组权限</p></li><li><p>第7-9位: 其他用户权限</p><ul><li><code>r</code> &#x3D;&#x3D; <code>4</code>: 读权限</li><li><code>w</code> &#x3D;&#x3D; <code>2</code>: 写权限</li><li><code>x</code> &#x3D;&#x3D; <code>1</code>: 执行权限</li></ul></li></ul><p>第10位说明: </p><ul><li>如果是目录: 子目录数</li><li>如果是文件: 硬链接数</li></ul><p><strong>chmod详解</strong>  </p><ol><li>第一种类型操作  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过+ - =变更权限</span><br>chmod g+w file # 没有指定u,g,o,a则默认添加给所有者权限, 添加给其他组除写权限之外的指定权限<br>chmod g+wrx file # 添加给所在组rwx权限<br>chmod o-wrx file # 删除其他组rwx权限<br>chmod o=x file #给其他组执行权限<br></code></pre></td></tr></table></figure></li></ol><ul><li><code>u</code>: 所有者</li><li><code>g</code>: 所在组</li><li><code>o</code>: 其他用户</li><li><code>a</code>: 所有者、所在组、其他用户</li></ul><ol start="2"><li>第二种类型操作</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过4, 2, 1 变更权限</span><br>chmod 777 file # 添加rwx权限给所有用户<br>chmod 755 file # 添加rwx权限给所在组和执行权限给其他用户<br>chmod 751 file # 添加rwx权限给所在组和rw权限给其他用户<br>chmod 640 file # 添加rw权限给所在组，添加x权限给其他用户<br><br></code></pre></td></tr></table></figure><ul><li><code>4</code>: 读权限</li><li><code>2</code>: 写权限</li><li><code>1</code>: 执行权限</li></ul><h2 id="2-6-定时任务调度"><a href="#2-6-定时任务调度" class="headerlink" title="2.6 定时任务调度"></a>2.6 定时任务调度</h2><h3 id="2-6-1-crontab定时任务"><a href="#2-6-1-crontab定时任务" class="headerlink" title="2.6.1 crontab定时任务"></a>2.6.1 crontab定时任务</h3><p><code>crontab [选项]</code> :</p><ul><li><code>-e</code>: 编辑crontab文件</li><li><code>-l</code>: 查询crontab任务</li><li><code>-r</code>: 删除当前用户crontab文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">* * * * * /bin/bash /root/script.sh # 每分钟执行一次<br>*/1 * * * * /bin/bash /root/script.sh # 每隔1分钟执行一次<br>0 8 * * * /bin/bash /root/script.sh # 每天早上8点执行一次<br>0 8 * * 1 /bin/bash /root/script.sh # 每周一早上8点执行一次<br>0 8 1 * * /bin/bash /root/script.sh # 每月1号早上8点执行一次<br>0 8 1 1,6,12,18 * /bin/bash /root/script.sh # 每月1号、6号、12号、18号早上8点执行一次<br><br></code></pre></td></tr></table></figure><ul><li><code>*</code>: 任意值</li><li><code>-</code>: 值范围, 如: 1-5 表示1到5</li><li><code>/</code>: 步长</li><li><code>,</code>: 列举多个值, 如: 1,3,5</li></ul><p><strong>其他操作</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">service crond restart # 重启定时服务<br><br></code></pre></td></tr></table></figure><h3 id="2-6-2-at定时任务"><a href="#2-6-2-at定时任务" class="headerlink" title="2.6.2 at定时任务"></a>2.6.2 at定时任务</h3><p><code>at</code>命令是一次性定时任务，需要指定时间，在指定的时间执行命令，命令执行完毕，该定时任务自动结束。<br>默认情况是1分钟后执行  </p><p><code>at [选项] 时间</code>: 在指定时间执行命令, 输入CRL+D结束输入  </p><p><code>at</code>选项: </p><ul><li><code>-f &lt;文件名&gt;</code> : 从指定文件读取任务</li><li><code>-m</code>: 任务完成后发送邮件通知</li><li><code>-q &lt;队列名&gt;</code>: 指定队列名，默认为<code>cron</code></li><li><code>-t &lt;时间戳&gt;</code>: 指定时间戳，格式为<code>%s</code>，如<code>1577836800</code>，表示2020年1月1日0点0分0秒</li><li><code>-I</code>: 列出<code>at</code>队列, 等同于<code>atq</code> </li><li><code>-d &lt;任务ID&gt;</code>: 删除指定任务, 等同于<code>atrm</code></li><li><code>-v</code>: 显示任务将被执行的时间</li><li><code>-l</code>: 列出所有任务</li><li><code>-c &lt;任务ID&gt;</code>: 打印任务的内容到标准输出(命令行)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">实例</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定时间</span><br>at 10:00 2024-08-15 <br><span class="hljs-meta prompt_">at&gt; </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> &gt;&gt; /tmp/test.txt</span><br><span class="hljs-meta prompt_">at&gt; </span><span class="language-bash"><span class="hljs-built_in">date</span> &gt;&gt; /tmp/test.txt</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">相对时间</span><br>at now + 5 minutes<br>at now + 7 hours<br>at now + 1 days<br>at now + 1 weeks<br>at now + 1 months<br>at now + 1 years  <br><br></code></pre></td></tr></table></figure><h2 id="2-7-磁盘分区、挂载"><a href="#2-7-磁盘分区、挂载" class="headerlink" title="2.7 磁盘分区、挂载"></a>2.7 磁盘分区、挂载</h2><p>Linux无论有几个分区, 分给哪一个目录使用, 它归根结底就只有一个根目录, 一个独立的且唯一的文件结构. Linux中每个分区都是用来组成整个文件系统的一部分.<br>Linux采用了一种叫“载入”的处理方法, 它的整个文件系统中包含了一整套的文件和目录, 且将一个分区和一个目录关联起来, 这样, 就可以认为, 这个分区是属于这个目录的.<br>示意图:<br><img src="/img/2024-08-15-Thu-T-Linux/image-2.png" alt="alt text"></p><h3 id="2-7-1-磁盘分区及挂载"><a href="#2-7-1-磁盘分区及挂载" class="headerlink" title="2.7.1 磁盘分区及挂载"></a>2.7.1 磁盘分区及挂载</h3><p><code>lsblk</code> 或 <code>lsblk -f</code>: 查看磁盘分区情况<br><code>fdisk /dev/sda</code>: 分区磁盘  </p><ul><li><code>m</code>: 查看命令列表  </li><li><code>l</code>: 查看磁盘分区情况, 同 <code>p</code>  </li><li><code>n</code>: 新增分区  </li><li><code>d</code>: 删除分区</li><li><code>w</code>: 写入分区</li></ul><p>分区完成后, 需要格式化磁盘分区, 格式化磁盘分区, 可以使用<code>mkfs</code>命令:<br><code>mkfs -t ext4 /dev/sda1</code>: 格式化磁盘分区, <code>ext4</code>是文件系统类型<br>挂载磁盘分区(临时, 重启后会丢失):<br><code>mount /dev/sda1 /mnt/data</code>: 将磁盘分区挂载到<code>/mnt/data</code>目录下<br>卸载磁盘分区:<br><code>umount /dev/sda1</code>: 卸载磁盘分区  </p><p>挂载磁盘分区(永久):<br><code>vim /etc/fstab</code>: 编辑挂载文件, 将磁盘分区挂载到<code>/mnt/data</code>目录下  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/dev/sda1    /mnt/data      ext4    defaults        0 0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设备         挂载点        文件系统       选项       dump(0表示不备份,1表示备份)    fsck(0表示不检查硬盘, 1检查其他目录, 2检查根目录)</span><br></code></pre></td></tr></table></figure><p>修改<code>/etc/fstab</code>文件后, 需要重启系统,或使用<code>mount -a</code>能生效:  </p><h3 id="2-7-2-磁盘情况查询"><a href="#2-7-2-磁盘情况查询" class="headerlink" title="2.7.2 磁盘情况查询"></a>2.7.2 磁盘情况查询</h3><p><code>df -h</code>: 查看磁盘使用情况<br><code>du [选项] [文件或目录]</code>: 显示该目录及该目下目录或文件磁盘占用情况<br>  -<code>-h</code>: 显示时带计量单位, 如: 1K, 1M, 1G<br>  -<code>-s</code>: 仅显示该目录大小<br>  -<code>--max-depth</code>: 限制显示目录深度, 默认不限制<br>  -<code>-c</code>: 列出明细同时, 显示汇总(total)值<br>  -<code>-a</code>: 显示所有文件, 包括隐藏文件  </p><h3 id="2-7-3-磁盘实用指令"><a href="#2-7-3-磁盘实用指令" class="headerlink" title="2.7.3 磁盘实用指令"></a>2.7.3 磁盘实用指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 统计/opt文件夹下“文件”的个数</span><br>ls -l /opt | grep &quot;^-&quot; | wc -l<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 统计/opt文件夹下“目录”的个数</span><br>ls -l /opt | grep &quot;^d&quot; | wc -l<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 统计/opt文件夹及子目录下“文件”的个数</span><br>ls -lR /opt | grep &quot;^-&quot; | wc -l<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 以树状结构显示目录结构</span><br>tree /opt -L 2 # 显示深度为2<br> <br><br><br></code></pre></td></tr></table></figure><h2 id="2-8-网络配置"><a href="#2-8-网络配置" class="headerlink" title="2.8 网络配置"></a>2.8 网络配置</h2><p><img src="/img/2024-08-15-Thu-T-Linux/image-1.png" alt="alt text"></p><ul><li>IP获取方式<ul><li>DHCP 动态获取IP地址</li><li>静态配置IP地址</li></ul></li></ul><h3 id="2-8-1-静态配置IP地址"><a href="#2-8-1-静态配置IP地址" class="headerlink" title="2.8.1 静态配置IP地址"></a>2.8.1 静态配置IP地址</h3><p>直接修改配置文件来指定IP, 并可以连接到外网(推荐)  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">CentOS 的ens33网卡配置为例</span><br>vim /etc/sysconfig/network-scripts/ifcfg-ens33<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改内容如下</span><br>DEVICE=eth0 # 接口名(设备, 网卡)<br>HWADDR=00:50:56:00:00:00 # 网卡MAC地址<br>TYPE= Ethernet # 网络类型<br>UUID= 01b0f841-c5c3-4a23-a6f2-035a83b0acb7 # 网卡唯一标识<br>NOBOOT=no # 系统启动时, 网络接口是否有效<br>BOOTPROTO= static # IP的配置方法, none(引导时不使用协议)|dhcp(动态分配)|bootp(bootp协议)|static(静态手动分配)<br>IPADDR= 192.168.1.100 # IP地址<br>GATEWAY= 192.168.1.1 # 网关IP地址<br>DNS1= 114.114.114.114 # DNS服务器IP地址<br><br></code></pre></td></tr></table></figure><h3 id="2-8-2-设置主机名和hosts映射"><a href="#2-8-2-设置主机名和hosts映射" class="headerlink" title="2.8.2 设置主机名和hosts映射"></a>2.8.2 设置主机名和hosts映射</h3><p>为了方便记忆, 可以给Linux系统设置主机名, 也可以根据需要修改主机名<br><code>hostname</code>: 查看当前主机名<br>修改文件<code>/etc/hostname</code>文件, 修改主机名. 修改后重启生效<br>设置主机名和hosts映射: <code>vim /etc/hosts</code>  </p><h3 id="2-8-3-主机名解析分析"><a href="#2-8-3-主机名解析分析" class="headerlink" title="2.8.3 主机名解析分析"></a>2.8.3 主机名解析分析</h3><p>实例: 用户在浏览器输入了<a href="http://www.baidu.com/">www.baidu.com</a><br><img src="/img/2024-08-15-Thu-T-Linux/image-3.png" alt="alt text"></p><h2 id="2-9-进程管理"><a href="#2-9-进程管理" class="headerlink" title="2.9 进程管理"></a>2.9 进程管理</h2><p>在linux中, 每个执行的程序都称为一个进程, 每一个进程都分配一个ID号(PID, 进程号)<br>每一个进程都可能以两种方式存在:  </p><ul><li>前台: 用户目前屏幕上可以进行操作的进程</li><li>后台: 实际在运行中, 但是屏幕无法看到</li></ul><p>一般系统的服务都是以后台进程的方式存在, 而且都会常驻载系统中, 直到关机才结束  </p><h3 id="2-9-1-查看与终止进程"><a href="#2-9-1-查看与终止进程" class="headerlink" title="2.9.1 查看与终止进程"></a>2.9.1 查看与终止进程</h3><ul><li>显示系统执行的程序<ul><li><code>ps</code>: 显示当前正在运行的进程  <ul><li><code>ps -a</code>: 显示所有进程, 包括前台和后台进程  </li><li><code>ps -u</code>: 以用户身份显示  </li><li><code>ps -x</code>: 显示后台进程运行的参数</li><li><code>ps -ef</code>: 以全格式显示当前所有进程, -e显示所有进程, -f全格式</li></ul></li></ul></li><li>终止进程<ul><li><code>kill [选项] 进程号</code>: 终止进程<ul><li><code>kill -9 进程号</code>: 强制终止进程, 强制终止进程, 即使该进程正在运行中, 也可以强制终止</li></ul></li><li><code>killall 进程名称</code>: 终止进程名称为进程名称的进程</li></ul></li></ul><p>最佳实践:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 踢掉某个非法登录用户</span><br>ps -aux | grep &quot;sshd&quot; # 通过查询sshd运行服务, 找到tom登录的进程号<br>kill 11421 # 强制终止11421进程, 从而让踢掉tom登录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 终止远程登录服务sshd, 在适当的时候再重启sshd服务</span><br>kill sshd服务对应的进程号<br>systemctl start sshd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 终止多个gedit</span><br>killall gedit <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 强制杀死一个终端(命令行)</span><br>ps -aux | grep &quot;bash&quot;<br>kill -9 10487 # 不使用-9参数, 无法终止终端命令行<br><br></code></pre></td></tr></table></figure><p><strong>查看进程树</strong><br><code>pstree [选项]</code>: 可以更直观的来看进程信息  </p><ul><li><code>-p</code>: 显示进程的PID  </li><li><code>-u</code>: 显示进程的用户名</li></ul><h3 id="2-9-2-服务-service-管理"><a href="#2-9-2-服务-service-管理" class="headerlink" title="2.9.2 服务(service)管理"></a>2.9.2 服务(service)管理</h3><p> service本质就是进程, 但是是运行在后台的, 通常都会监听某个端口, 等待其他进程的请求, 比如(mysql, sshd, 防火墙等). 因此我们又称为守护进程,   </p><p> service管理指令:</p><ul><li><code>service|systemctl [选项] 服务名 [start|stop|restart|reload|status]</code>: 管理服务</li></ul><h3 id="2-9-3-服务管理"><a href="#2-9-3-服务管理" class="headerlink" title="2.9.3 服务管理"></a>2.9.3 服务管理</h3><p>Linux系统有7种运行级别, 常用的是3和5  </p><ul><li>0: 系统停机状态，系统默认运行级别不能设为0，否则不能正常启动。  </li><li>1: 单用户工作状态，root权限，用于系统维护，禁止远程登陆。  </li><li>2: 多用户状态(没有NFS)。NFS Network File System，即网络文件系统，用于挂载远程文件系统。  </li><li>3: 完全的多用户状态(有NFS)，登陆后进入控制台命令行模式。  </li><li>4: 系统未使用，保留。  </li><li>5: X11控制台，登陆后进入图形GUI模式。  </li><li>6: 系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动。</li></ul><p>开机流程说明:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">开机--&gt; BIOS --&gt; /boot --&gt; systemd进程 --&gt; 运行级别 --&gt; 运行级别对应的服务<br></code></pre></td></tr></table></figure><p><strong>chkconfig</strong><br>通过chkconfig可以给服务各个级别设置自启动&#x2F;关闭<br>chkconfig指令管理的服务在&#x2F;etc&#x2F;etc&#x2F;init.d查看<br>基本语法: </p><ul><li><code>chkconfig --list</code> #显示服务在各个运行级别的自启动状态</li><li><code>chkconfig --level 5 service_name [on|off]</code></li><li>演示:(对network服务进行操作) <code>chkkonfig --level 3 network on</code></li></ul><p><strong>systemctl</strong><br>基本语法: <code>systemctl [start|stop|restart|reload|status] service_name</code><br>systemctl管理的指令在<code>/usr/lib/systemd/system</code>查看  </p><ul><li>systemctl设置服务自启动状态<ul><li><code>systemctl list-unit-files | grep service_name</code>: 查看服务开机自启动状态</li><li><code>systemctl enable service_name</code>: 设置开机自启动</li><li><code>systemctl disable service_name</code>: 设置开机不启动</li><li><code>systemctl is-enabled service_name</code>: 查看服务是否开机启动</li></ul></li></ul><p>案例: 查看当前防火墙的状态, 关闭防火墙和重启防火墙  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l /usr/lib/systemd/system/firewalld.service # 查看防火墙服务文件<br>systemctl list-unit-files | grep firewalld<br>systemctl status firewalld<br>systemctl stop firewalld<br>telnet 127.0.0.1 22 # 测试是否关闭<br><br></code></pre></td></tr></table></figure><p><strong>防火墙firwall指令</strong>  </p><ul><li><code>firewall-cmd --permanenet --add-port=端口号/协议</code>: 打开端口   </li><li><code>firewall-cmd --permanent --remove-port=端口号/协议</code>: 关闭端口  </li><li><code>firewall-cmd --reload</code>: 重新加载, 才能生效</li><li><code>firewall-cmd --query-port=端口号/协议</code>: 查看端口是否开放</li><li><code>firewall-cmd --list-ports</code>: 查看已开放的端口</li><li><code>firewall-cmd --list-all</code>: 查看防火墙状态</li><li><code>netstat -antp</code>: 查看端口是否开放</li></ul><p><strong>动态监控进程top</strong><br>top与ps类似, 它们都用来显示正在执行的进程, Top与ps最大的不同之处, 在于top在执行一段时间可以更新正在运行的进程.<br>基本语法: <code>top [选项]</code>  </p><ul><li><code>-i</code>: 不显示任何限制或者僵死的进程</li><li><code>-d 秒速</code>: 刷新间隔, 可以设置成0.1秒, 但是刷新间隔过短, 会导致top的cpu占用率非常高, 默认为3秒  </li><li><code>-p 进程号</code>: 查看某个进程的详细信息</li></ul><p>交互操作: </p><ul><li><code>q</code>: 退出top</li><li><code>d</code>: 修改刷新间隔</li><li><code>k</code>: 杀死进程</li><li><code>u</code>: 按用户筛选</li><li><code>P</code>: 按CPU使用率排序, 默认</li><li><code>M</code>: 按内存使用率排序</li><li><code>N</code>: 按进程号排序</li></ul><p><strong>监控网络状态netstat</strong><br>基本语法: <code>netstat [选项]</code>  </p><ul><li><code>-an</code>: 按一定顺序排列输出</li><li><code>-p</code>: 显示进程号和进程名</li></ul><h2 id="2-10-RPM和APT"><a href="#2-10-RPM和APT" class="headerlink" title="2.10 RPM和APT"></a>2.10 RPM和APT</h2><p>RPM 用于互联网下载包的打包及安装工具, 它包含在某些Linux发行版中, 比如CentOS, Fedora等。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查询已安装的软件包</span><br>rpm -q [包名] # 查看是否已安装指定的软件包<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询安装的所有软件包</span><br>rpm -qa # 列出系统中所有已安装的软件包<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询软件包的信息</span><br>rpm -qi [包名] # 查看某个已安装包的详细信息<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询软件包文件列表</span><br>rpm -ql [包名] # 显示某个已安装包包含的文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询文件属于哪个软件包</span><br>rpm -qf [文件路径] # 通过文件路径查询它所属的软件包<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装软件包</span><br>rpm -ivh [包文件名] # 安装指定的 .rpm 包文件 (-i安装, -v显示详细信息, -h显示进度条)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">升级软件包</span><br>rpm -Uvh [包文件名] # 升级或安装软件包 (-U升级或安装)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">仅升级已安装的软件包</span><br>rpm -Fvh [包文件名] # 仅升级已安装的软件包（如包未安装则不操作）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载软件包</span><br>rpm -e [包名] # 卸载已安装的包（需指定包名而非文件名）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">验证软件包完整性</span><br>rpm -V [包名] # 验证指定包中的文件是否已被更改<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查安装包文件的依赖关系</span><br>rpm -qpR [包文件名] # 检查安装某个 .rpm 包文件时可能存在的依赖关系<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查已安装包的依赖</span><br>rpm -qR [包名] # 检查已安装的包的依赖关系<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示包文件的说明信息（不安装）</span><br>rpm -qip [包文件名] # 查看指定 .rpm 包文件的描述信息<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示包文件包含的文件列表（不安装）</span><br>rpm -qlp [包文件名] # 查看指定 .rpm 包文件中包含的文件列表<br><br></code></pre></td></tr></table></figure><p>APT  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">更新源</span><br>vim /etc/apt/sources.list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新软件包列表</span><br>sudo apt update # 从软件源获取最新的包信息，但不安装更新<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">升级所有已安装的软件包</span><br>sudo apt upgrade # 安装所有已安装包的最新版本（不会移除包）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">升级所有已安装的软件包，并允许移除旧包</span><br>sudo apt full-upgrade # 在需要时移除冲突的旧包，以完成系统的全面升级<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装软件包</span><br>sudo apt install [包名] # 安装指定软件包，如果已安装则不重复安装<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装特定版本的软件包</span><br>sudo apt install [包名]=[版本号] # 安装指定版本的软件包<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载软件包（保留配置文件）</span><br>sudo apt remove [包名] # 卸载指定软件包，但保留配置文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">完全卸载软件包（包含配置文件）</span><br>sudo apt purge [包名] # 完全卸载指定软件包及其配置文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">自动移除不再需要的依赖包</span><br>sudo apt autoremove # 移除安装时自动添加、但现在已不再需要的依赖包<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">搜索软件包</span><br>apt search [关键词] # 在包列表中搜索与关键词匹配的包<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示软件包的信息</span><br>apt show [包名] # 显示指定包的详细信息（包括描述、依赖等）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看软件包是否已安装</span><br>dpkg -l | grep [包名] # 使用 dpkg 列出并过滤出指定包的信息<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出软件包的依赖关系</span><br>apt depends [包名] # 列出指定包的依赖关系<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出包的反向依赖（哪些包依赖此包）</span><br>apt rdepends [包名] # 列出指定包的反向依赖关系<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清理下载的包缓存</span><br>sudo apt clean # 清空 /var/cache/apt/archives 中的已下载包文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清除已删除软件包的缓存文件</span><br>sudo apt autoclean # 清除不再需要的包缓存文件（已删除包的缓存）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查系统中是否有未满足的依赖</span><br>sudo apt check # 检查系统中是否存在依赖问题<br><br></code></pre></td></tr></table></figure><h2 id="2-11-Shell编程"><a href="#2-11-Shell编程" class="headerlink" title="2.11 Shell编程"></a>2.11 Shell编程</h2><p>Shell是一个命令行解释器, 它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序, 用户可以用shell来启动、挂起、停止甚至是编写一些程序  </p><h3 id="2-11-1-执行方式"><a href="#2-11-1-执行方式" class="headerlink" title="2.11.1 执行方式"></a>2.11.1 执行方式</h3><ol><li>脚本的格式要求:<ul><li>脚本以<code>#/bin/bash</code>开头  </li><li>脚本需要有可执行权限</li></ul></li><li>脚本常用执行方式:<ul><li>直接执行脚本：<code>sh 脚本文件名</code></li><li>脚本文件执行：<code>./脚本文件名</code> (需要添加执行权限 +x)</li></ul></li></ol><p>案例: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash <span class="hljs-comment"># 声明解释器, 一般默认是bash, 所以有时候没有添加这一行也会执行后续内容</span></span><br>echo &quot;Hello World!&quot;<br></code></pre></td></tr></table></figure><h3 id="2-11-2-Shell中的变量"><a href="#2-11-2-Shell中的变量" class="headerlink" title="2.11.2 Shell中的变量"></a>2.11.2 Shell中的变量</h3><ol><li>普通变量：<ul><li><code>set</code> 显示当前shell中所有的变量</li><li>系统变量<ul><li>$HOSTNAME</li><li>$USER</li><li>$PATH</li><li>$HOME</li><li>定义环境变量: <code>export VAR_NAME=VALUE</code></li></ul></li><li>自定义变量<ul><li>变量定义规则: 可以由字母数字下划线组成, 但是不能以数字开头; 等号两边不能有空格; 变量名一般大写</li><li>定义变量: <code>变量名=值</code></li><li>引用变量：<code>$变量名</code></li><li>删除变量：<code>unset 变量名</code></li><li>声明静态变量：<code>readonly 变量名</code> (静态变量不能被unset, 也不能被修改)</li></ul></li><li>将命令返回值赋值给变量: 使用用反引号或者是括号</li></ul></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">A=`date`<br>echo &quot;$A&quot;<br><br>C=(date)<br>echo &quot;$C&quot;<br><br></code></pre></td></tr></table></figure><ol start="4"><li><p>Shell脚本多行注释: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">:&lt;&lt;! 内容 <br>内容<br>!<br><br></code></pre></td></tr></table></figure></li><li><p>位置参数变量<br>  当执行一个shell脚本时, 如果希望获取命令行的参数信息, 可以使用位置参数变量.<br>  比如: <code>./myshell.sh 100 200</code></p></li></ol><ul><li>基本语法:<ul><li><code>$n</code>: n为数字, 0代表命令本身(不含参数), 1-9代表第一到第九个参数, 参数超过十个(包含10), 使用大括号, 例如<code>$&#123;12&#125;</code></li><li><code>$*</code>: 代表命令行中所有的参数, 把所有参数看成一个整体</li><li><code>$@</code>: 代表命令行中所有的参数, 把每个参数看成单独个体</li><li><code>$#</code>: 代表命令行中参数的个数</li></ul></li></ul><ol start="3"><li>预定义变量<br>   shell设计者事先已经定义好的变量, 可以直接在shell中使用.</li></ol><ul><li><code>$$</code>: 当前进程的进程号</li><li><code>$!</code>: 后台运行的最后一个进程的进程号</li><li><code>$?</code>: 最后一次执行命令的返回状态, 如果变量为0, 则说明上一个命令执行成功</li></ul><h3 id="2-11-3-Shell中的运算符"><a href="#2-11-3-Shell中的运算符" class="headerlink" title="2.11.3 Shell中的运算符"></a>2.11.3 Shell中的运算符</h3><p>   基本语法:</p><ol><li><code>$((运算式))</code>, <code>$[运算式]</code>, <code>expr 运算式</code></li><li><code>expr</code>运算符之间需要有空格, 加、减、乘、除、取余用<code>+, -, \*, /, %</code>表示</li></ol><h3 id="2-11-4-条件判断"><a href="#2-11-4-条件判断" class="headerlink" title="2.11.4 条件判断"></a>2.11.4 条件判断</h3><p>   基本语法: </p><ol><li><code>[ condition ]</code>: 非空返回true, 可以使用<code>$?</code>验证, 0为true, 1为false(注意: condition前后需要有空格)</li></ol><p>   if判读:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">基本语法</span><br>if [ condition ]; then<br>Do some things<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者</span><br>if [ condition ]<br>then<br>Do some things<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者</span><br>if [ condition ]<br>then<br>Do some things<br>elif [ condition ]<br>then<br>Do other things<br>else<br>then<br>Don&#x27;t do it<br>fi<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">数值比较</span><br>-eq：等于<br>    if [ &quot;$a&quot; -eq &quot;$b&quot; ]; then<br>      echo &quot;a equals b&quot;<br>    fi<br><br>-ne：不等于<br>    if [ &quot;$a&quot; -ne &quot;$b&quot; ]; then<br>      echo &quot;a is not equal to b&quot;<br>    fi<br><br>-lt：小于<br>    if [ &quot;$a&quot; -lt &quot;$b&quot; ]; then<br>      echo &quot;a is less than b&quot;<br>    fi<br><br>-le：小于或等于<br>    if [ &quot;$a&quot; -le &quot;$b&quot; ]; then<br>      echo &quot;a is less than or equal to b&quot;<br>    fi<br><br>-gt：大于<br>    if [ &quot;$a&quot; -gt &quot;$b&quot; ]; then<br>      echo &quot;a is greater than b&quot;<br>    fi<br><br>-ge：大于或等于<br>    if [ &quot;$a&quot; -ge &quot;$b&quot; ]; then<br>      echo &quot;a is greater than or equal to b&quot;<br>    fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">字符串比较</span><br>=：字符串相等<br>    if [ &quot;$str1&quot; = &quot;$str2&quot; ]; then<br>      echo &quot;Strings are equal&quot;<br>    fi<br><br>!=：字符串不相等<br>    if [ &quot;$str1&quot; != &quot;$str2&quot; ]; then<br>      echo &quot;Strings are not equal&quot;<br>    fi<br><br>-z：字符串为空<br>    if [ -z &quot;$str1&quot; ]; then<br>      echo &quot;str1 is empty&quot;<br>    fi<br><br>-n：字符串不为空<br>    if [ -n &quot;$str2&quot; ]; then<br>      echo &quot;str2 is not empty&quot;<br>    fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件判断</span><br>-e：文件存在<br>    if [ -e &quot;$file&quot; ]; then<br>      echo &quot;File exists&quot;<br>    fi<br><br>-f：文件存在且为普通文件<br>    if [ -f &quot;$file&quot; ]; then<br>      echo &quot;File is a regular file&quot;<br>    fi<br><br>-d：文件存在且为目录<br>    if [ -d &quot;$file&quot; ]; then<br>      echo &quot;It is a directory&quot;<br>    fi<br><br>-r：文件存在且可读<br>    if [ -r &quot;$file&quot; ]; then<br>      echo &quot;File is readable&quot;<br>    fi<br><br>-w：文件存在且可写<br>    if [ -w &quot;$file&quot; ]; then<br>      echo &quot;File is writable&quot;<br>    fi<br><br>-x：文件存在且可执行<br>    if [ -x &quot;$file&quot; ]; then<br>      echo &quot;File is executable&quot;<br>    fi<br><br>-s：文件存在且大小大于 0<br>    if [ -s &quot;$file&quot; ]; then<br>      echo &quot;File size is greater than 0&quot;<br>    fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">逻辑运算</span><br>-a：逻辑与（AND）<br>    if [ -r &quot;$file&quot; -a -w &quot;$file&quot; ]; then<br>      echo &quot;File is readable and writable&quot;<br>    fi<br><br>-o：逻辑或（OR）<br>    if [ -r &quot;$file&quot; -o -w &quot;$file&quot; ]; then<br>      echo &quot;File is readable or writable&quot;<br>    fi<br><br>!：逻辑非（NOT）<br>    if [ ! -x &quot;$file&quot; ]; then<br>      echo &quot;File is not executable&quot;<br>    fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">组合条件</span><br>&amp;&amp;：条件1和条件2都为真<br>    if [ &quot;$a&quot; -lt &quot;$b&quot; ] &amp;&amp; [ &quot;$str1&quot; != &quot;$str2&quot; ]; then<br>      echo &quot;a is less than b and str1 is not equal to str2&quot;<br>    fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用双中括号（更适合字符串和正则匹配）</span><br>[[ ... ]]：字符串和正则表达式匹配<br>    if [[ &quot;$str1&quot; =~ ^h.*o$ ]]; then<br>      echo &quot;str1 matches the regex pattern&quot;<br>    fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：检查变量是否为空</span><br>-z：字符串为空<br>    if [ -z &quot;$var&quot; ]; then<br>      echo &quot;var is empty&quot;<br>    fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：检查文件是否存在且可执行</span><br>-x：文件存在且可执行<br>    if [ -x &quot;$file&quot; ]; then<br>      echo &quot;File is executable&quot;<br>    fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：两个条件都为真</span><br>&amp;&amp;：条件1和条件2都为真<br>    if [ &quot;$a&quot; -eq 5 ] &amp;&amp; [ &quot;$b&quot; -eq 10 ]; then<br>      echo &quot;Both conditions are true&quot;<br>    fi<br><br></code></pre></td></tr></table></figure><h3 id="2-11-5-case语句"><a href="#2-11-5-case语句" class="headerlink" title="2.11.5 case语句"></a>2.11.5 case语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">基本语法</span><br>case $变量名 in<br>&quot;var1&quot;)<br>Do the thing of var1<br>;;<br>&quot;var2&quot;)<br>Do the thing of var2<br>&#x27;&#x27;<br>&quot;var3&quot;)<br>Do the thing of var3<br>*)<br>Do the things that are not the case var1, var2, var3<br>esac<br></code></pre></td></tr></table></figure><h3 id="2-11-6-循环控制"><a href="#2-11-6-循环控制" class="headerlink" title="2.11.6 循环控制"></a>2.11.6 循环控制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> 循环基本语法分</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">基本语法 1</span><br>for var in var1 var2 var3<br>do<br>Do some repeate things<br>done<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例如</span><br>for i in $@<br>do<br>echo $i<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">基本语法 2</span><br>for (( start_var;condition;var_change))<br>do <br>Do sone repeate things<br>done<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例如</span><br>for ((i=0;i&lt;9;i++))<br>do<br>echo $i<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">while</span> 循环</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">基本语法</span><br>while [ condition ] # 注意空格<br>do<br>Do some things repeately<br>done<br><br><br></code></pre></td></tr></table></figure><h3 id="2-11-7-读取控制台输入"><a href="#2-11-7-读取控制台输入" class="headerlink" title="2.11.7 读取控制台输入"></a>2.11.7 读取控制台输入</h3><p>基本语法: <code>read [选项] [参数]</code></p><ul><li>选项:<ul><li><code>-p</code>: 指定读取值时的提示符</li><li><code>-t</code>: 指定读取值时的等待时间(秒)</li></ul></li><li>参数: 指定读取值的变量名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">案例</span><br>read -p &quot;请输入A:&quot; A<br>echo &quot;A = $A&quot;<br><br>read -p &quot;请输入B:&quot; -t 3 B # 3秒之内输入B的值, 否则自动执行下一行<br>echo &quot;B = $B&quot;<br><br></code></pre></td></tr></table></figure><h3 id="2-11-8-函数"><a href="#2-11-8-函数" class="headerlink" title="2.11.8 函数"></a>2.11.8 函数</h3><p>shell中的函数包括系统函数和自定义函数  </p><ol><li>系统函数</li></ol><ul><li><p><code>basename</code><br>基本语法: <code>basename [pathname] [suffix]</code><br>功能: 返回完整路径最后&#x2F;的部分(不包括&#x2F;), 常用于获取文件名<br>suffix为后缀, 如果指定suffix, basename会将pathname中的suffix去掉<br>例子: <code>basename /home/ubuntu/t.txt .txt</code>, 结果是<code>t</code></p></li><li><p><code>dirname</code><br>基本语法: <code>dirname pathname</code><br>功能: 返回完整路径的目录(即除去pathname中最后的&#x2F;及之后的部分)<br>例子: <code>dirname /home/ubuntu/t.txt</code> 结果是: <code>/home/ubuntu</code></p></li></ul><ol start="2"><li>自定义函数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">基本语法</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">定义</span><br>[ function ] funcname()<br>&#123;<br>  Action;<br>  [return int];<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">调用</span><br>funcname [value]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例子1:</span> <br><br>func1()&#123;<br>  echo &quot;$1&quot;<br>  echo &quot;$2&quot;<br>&#125;<br><br>func1 23 43<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出为:</span><br>23 43<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例子2:</span> <br>function func2()&#123;<br>    echo $A<br>    echo $B<br>&#125;<br>read -p &quot;请输入一个字符: &quot; A # AAA<br>read -p &quot;请输入一个字符: &quot; B # BBB<br>func2 $A $B<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出为:</span><br>AAA<br>BBB<br><br></code></pre></td></tr></table></figure><h3 id="2-11-9-综合案例"><a href="#2-11-9-综合案例" class="headerlink" title="2.11.9 综合案例"></a>2.11.9 综合案例</h3><p>每天凌晨2:30备份数据库testDatabse到&#x2F;data&#x2F;backup&#x2F;db<br>开始备份和备份结束都能给出相应的提示信息<br>备份后的文件要求以备份时间为文件名, 并打包为.tar.gz的形式<br>在备份的同时, 检查是否有10天前的备份数据库文件, 有就将其删除  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置备份路径和数据库名称</span><br>BACKUP_DIR=&quot;/data/backup/db&quot;<br>DB_NAME=&quot;testDatabase&quot;<br>TIMESTAMP=$(date +&quot;%Y%m%d%H%M&quot;)<br>BACKUP_FILE=&quot;$&#123;BACKUP_DIR&#125;/$&#123;DB_NAME&#125;_$&#123;TIMESTAMP&#125;.tar.gz&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建备份目录（如果不存在）</span><br>mkdir -p &quot;$BACKUP_DIR&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开始备份</span><br>echo &quot;开始备份数据库 $&#123;DB_NAME&#125; 到 $&#123;BACKUP_FILE&#125;&quot;<br>mysqldump -u root -pYOUR_PASSWORD $DB_NAME | gzip &gt; &quot;$BACKUP_FILE&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查备份是否成功</span><br>if [ $? -eq 0 ]; then<br>  echo &quot;数据库备份成功: $&#123;BACKUP_FILE&#125;&quot;<br>else<br>  echo &quot;数据库备份失败&quot;<br>  exit 1<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除 10 天前的备份文件</span><br>find &quot;$BACKUP_DIR&quot; -name &quot;$&#123;DB_NAME&#125;_*.tar.gz&quot; -type f -mtime +10 -exec rm -f &#123;&#125; \;<br><br>echo &quot;旧备份文件清理完成&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存为/usr/sbin/mysql_db_backup.sh</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">30 02 * * * sh /usr/sbin/mysql_db_backup.sh<br><br></code></pre></td></tr></table></figure><h1 id="三、高级篇"><a href="#三、高级篇" class="headerlink" title="三、高级篇"></a>三、高级篇</h1><h2 id="3-1-日志管理"><a href="#3-1-日志管理" class="headerlink" title="3.1 日志管理"></a>3.1 日志管理</h2><p>日志文件是重要的系统信息文件, 其中记录了许多重要的系统事件, 包括用户的登录信息, 系统的启动信息, 系统的安全信息, 邮件相关信息, 各种服务相关信息<br>日志对于安全来说很重要, 它记录了系统每天发生的各种事件, 通过日志来检查错误发生的原因, 或者受到攻击时攻击者留下的痕迹.<br>日志是用来记录重大事件的工具.<br><code>/var/log</code>目录就是系统日志文件的保存位置  (variable)<br><code>rsyslogd</code>是用于记录日志的后台程序, 对应的配置文件是<code>/etc/rsyslog.conf</code>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">/var/log/boot.log            # 系统启动日志<br>/var/log/cron                # cron 作业调度器日志<br>/var/log/cpus               # CPU 使用情况日志<br><br><br><br>/var/log/syslog              # 系统日志（记录系统的常规操作信息和错误）<br>/var/log/messages            # 系统消息日志，包含大多数常规系统事件<br>/var/log/auth.log            # 用户认证相关日志（登录、sudo等）<br>/var/log/dmesg               # 内核启动信息日志<br><br>/var/log/mail.log            # 邮件系统日志<br>/var/log/apache2/            # Apache Web 服务器日志（可能位于该目录或 /var/log/httpd/）<br>/var/log/nginx/              # Nginx Web 服务器日志<br>/var/log/mysql/              # MySQL 数据库日志<br>/var/log/postgresql/         # PostgreSQL 数据库日志<br>/var/log/daemon.log          # 系统守护进程的日志<br>/var/log/kern.log            # 内核日志<br>/var/log/user.log            # 用户相关的日志（用户登录/注销等）<br>/var/log/lpr.log             # 打印服务日志<br>/var/log/ufw.log             # 防火墙日志（Ubuntu的ufw）<br>/var/log/debug               # 调试日志（开发调试使用）<br>/var/log/apt/history.log     # APT 包管理历史日志<br>/var/log/apt/term.log        # APT 包管理终端输出日志<br><br></code></pre></td></tr></table></figure><h3 id="3-1-1-rsyslogd配置文件"><a href="#3-1-1-rsyslogd配置文件" class="headerlink" title="3.1.1 rsyslogd配置文件"></a>3.1.1 rsyslogd配置文件</h3><p> <code>ps -aux | grep rsyslog | grep -v grep</code> 查看rsyslogd进程是否启动, 只有启动了日志才能正常记录<br> <code>systemctl list-unit-files | grep rsyslog</code> 查看rsyslogd是否是自启动状态  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件 : /etc/rsyslog.con</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑文件时的格式为:</span>  <br>*.*    存放日志文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改配置文件后重启日志服务生效</span><br>systemctl restart rsyslog<br><span class="hljs-meta prompt_"># </span><span class="language-bash">其中第一个*代表日志类型，第二个*代表日志级别</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">日志类型分为:</span><br>auth   ##pam产生的日志<br>authpriv ##ssh、ftp等登录信息的验证信息<br>corn  ##时间任务相关<br>kern  ##内核<br>lpr  ##打印<br>mail  ##邮件<br>mark(syslog)-rsyslog ##服务内部的信息，时间标识<br>news  ##新闻组<br>user  ##用户程序产生的相关信息<br>uucp  ##unix to nuix copy主机之间相关的通信<br>local 1-7  ##自定义的日志设备<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">日志级别为:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">从上到下，级别从低到高，记录信息越来越少</span><br>debug    ##有调试信息的，日志通信最多<br>info     ##一般信息日志，最常用<br>notice   ##最具有重要性的普通条件的信息<br>warning  ##警告级别<br>err      ##错误级别，阻止某个功能或者模块不能正常工作的信息<br>crit     ##严重级别，阻止整个系统或者整个软件不能正常工作的信息<br>alert    ##需要立刻修改的信息<br>emerg    ##内核崩溃等重要信息<br>none     ##什么都不记录<br><br></code></pre></td></tr></table></figure><p><strong>日志的格式包含以下4列</strong>  </p><ul><li>事件产生的时间</li><li>产生事件的服务器的主机名</li><li>产生事件的服务名或程序名</li><li>事件的具体信息<br>例如: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">2024-11-13T07:20:59.433134+00:00 LinuxLearn rsyslogd: [origin software=&quot;rsyslogd&quot; swVersion=&quot;8.2312.0&quot; x-pid=&quot;823762&quot; x-info=&quot;https://www.rsyslog.com&quot;] start<br>2024-11-13T07:21:01.985136+00:00 LinuxLearn CRON[823844]: pam_unix(cron:session): session opened for user root(uid=0) by root(uid=0)<br>2024-11-13T07:21:01.985662+00:00 LinuxLearn CRON[823845]: (root) CMD (date &gt; mydate.txt)<br>2024-11-13T07:21:01.987758+00:00 LinuxLearn CRON[823844]: pam_unix(cron:session): session closed for user root<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-1-2-日志轮替"><a href="#3-1-2-日志轮替" class="headerlink" title="3.1.2 日志轮替"></a>3.1.2 日志轮替</h3><p>日志轮替就是把旧的日志文件移动并改名, 同时建立新的空日志文件, 当旧的日志文件超出保存范围之后, 就会被自动删除  </p><ol><li>Linux使用<code>logrotate</code>进行日志轮替管理，要想改变日志轮替文件名字，通过 <code>/etc/logrotate.conf</code> 配文件中“dateext”等参数  </li><li>如果配置文件中有“dateext”参数，那么日志会用<strong>日期</strong>来作为日志文件的后缀，例如“secure-20201010” 。这样日志文件名不会重叠，也就不需要日志文件的改名，只需要指定保存日志个数，删除多余的日志文件即可</li><li>如果配置文件中没有“dateext参数，日志文件就需要进行改名了。当第一次进行日志轮替时，当前的“secure“日志会自动改名为“secure.1”. 然后新创建“secure”日志, 用来保存新的日志.</li><li>当第二次进行日志轮替时, “secure.1”会自动改名为“secure.2”, 当前的“secure”日志会自动改名为“secure.1”, 然后也会新建“secure”日志, 用来保存新的日志. 依次类推.如果超过日志的默认保存个数, 系统会自动删除目前存在的最旧的日志.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/logrotate.conf</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">全局配置</span><br>weekly  # 每周对日志文件进行一次轮替<br>rotate 5 # 保留5个日志文件<br><br>create  # 日志轮替后创建新的空日志文件<br><br>dateext  # 使用日期作为日志文件后缀<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">单独配置 (优先级更高)</span><br><br>/var/log/btmp&#123;<br>  missingok # 如果日志不存在, 忽略该日志的警告信息<br>  monthly <br>  create 0600 root utmp # 建立新的日志文件, 权限是0664 (0普通文件, 664(wr-wr-r--)), 所有者为root, 组织属于utmp<br>  rotate 1<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>配置参数说明</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局配置参数：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-----------------------</span><br>daily                         # 每天轮替日志<br>weekly                        # 每周轮替日志<br>monthly                       # 每月轮替日志<br>yearly                        # 每年轮替日志<br>rotate &lt;num&gt;                  # 保留最近的 &lt;num&gt; 个轮替文件<br>compress                      # 启用压缩（默认使用 gzip）<br>delaycompress                 # 延迟压缩，直到下次轮替<br>notifempty                    # 如果日志文件为空，则不轮替<br>missingok                     # 如果日志文件丢失，不报错<br>create &lt;mode&gt; &lt;owner&gt; &lt;group&gt;  # 创建新日志文件时设置权限（mode）、所有者（owner）和组（group）<br>sharedscripts                 # 脚本共享，轮替多个文件时只运行一次脚本<br>postrotate                    # 轮替后执行的脚本（结束脚本）<br>endscript                     # 结束脚本标记<br>prerotate                     # 轮替前执行的脚本（开始脚本）<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-----------------------</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">针对特定日志文件配置的参数：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-----------------------</span><br>size &lt;size&gt;                    # 当日志文件达到指定大小时进行轮替（例如：size 100M）<br>ifempty                       # 即使日志文件为空，也进行轮替<br>dateext                       # 使用日期扩展名进行轮替（例如：logfile.1 -&gt; logfile-20231111.1）<br>dateformat &lt;format&gt;            # 自定义日期扩展名的格式（默认为：%Y%m%d）<br>su &lt;user&gt; &lt;group&gt;              # 使用指定的用户和组运行 logrotate 进程<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-----------------------</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">其他常见选项：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-----------------------</span><br>compresscmd &lt;cmd&gt;              # 自定义压缩命令，默认是 gzip<br>uncompresscmd &lt;cmd&gt;            # 自定义解压命令，默认是 gunzip<br>compressext &lt;ext&gt;              # 自定义压缩文件扩展名，默认为 .gz<br>createonerr                    # 如果日志文件创建失败，则立即退出<br>olddir &lt;dir&gt;                   # 将旧日志文件移动到指定目录（例如：/var/log/old）<br>nomail                        # 禁止发送邮件<br>mail &lt;email&gt;                   # 如果轮替失败，发送邮件给指定用户<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-----------------------</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-----------------------</span><br>/var/log/nginx/*.log &#123;<br>  daily<br>  rotate 7<br>  compress<br>  delaycompress<br>  missingok<br>  notifempty<br>  create 0640 www-data www-data<br>  postrotate<br>    systemctl reload nginx<br>  endscript<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">针对 MySQL 日志轮替示例：</span><br>/var/log/mysql/*.log &#123;<br>  weekly<br>  rotate 5<br>  compress<br>  missingok<br>  notifempty<br>  create 0644 mysql mysql<br>  sharedscripts<br>  postrotate<br>    /usr/bin/mysqladmin flush-logs<br>  endscript<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-1-3-查看内存日志"><a href="#3-1-3-查看内存日志" class="headerlink" title="3.1.3 查看内存日志"></a>3.1.3 查看内存日志</h3><p> <code>journalctl</code>可以查看内存日志<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"> journalctl                        # 查看所有日志<br>journalctl -b                     # 查看当前启动的日志<br>journalctl -b -1                  # 查看上次启动的日志<br>journalctl -xe                    # 查看错误日志，显示详细的错误信息<br>journalctl -f                     # 实时查看日志（类似于 `tail -f`）<br>journalctl -u &lt;service_name&gt;      # 查看特定服务的日志（例如：journalctl -u nginx）<br>journalctl --since &quot;2024-11-01&quot;   # 查看从某个日期之后的日志<br>journalctl --until &quot;2024-11-02&quot;   # 查看到某个日期的日志<br>journalctl --since &quot;2 hours ago&quot;  # 查看最近 2 小时的日志<br>journalctl -p err                 # 查看日志级别为 error 及以上的日志<br>journalctl -n 50                  # 查看最近 50 行日志<br>journalctl -o short               # 以简洁的格式输出日志<br>journalctl -o json                # 以 JSON 格式输出日志<br>journalctl -r                     # 反向查看日志（最新的日志显示在最前面）<br>journalctl --no-pager             # 禁止分页输出，所有日志一次性输出<br>journalctl -k                     # 只显示内核日志<br>journalctl -t &lt;unit_name&gt;          # 按系统单元名称过滤日志（例如：journalctl -t nginx）<br>journalctl -u &lt;service_name&gt; -f   # 实时查看指定服务的日志<br>journalctl _PID=1 _COMM=sshd      # 按进程 ID 和进程名过滤日志（例如：journalctl _PID=1 _COMM=sshd）<br></code></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>dmesg | grep -i memory           # 查看内核启动日志中的内存信息<br>free -h                          # 查看系统内存使用情况（以人类可读的格式）<br>vmstat                           # 查看虚拟内存、进程、CPU等的统计信息<br>top                              # 实时查看系统资源使用情况（包括内存）<br>htop                             # 类似于 top，但提供更友好的交互界面（需要安装）<br>cat /proc/meminfo                # 查看详细的内存信息（包括总内存、可用内存、缓存等）<br>cat /proc/slabinfo               # 查看内核内存分配器的状态<br>watch -n 1 free -h               # 每秒更新一次，实时监控内存使用情况<br>ps aux --sort=-%mem              # 查看按内存占用排序的进程列表<br>sar -r 1 3                       # 使用 sar 命令查看内存使用情况，1 代表间隔 1 秒，3 表示查看 3 次<br><br></code></pre></td></tr></table></figure><h2 id="3-2-定制自己的linux"><a href="#3-2-定制自己的linux" class="headerlink" title="3.2 定制自己的linux"></a>3.2 定制自己的linux</h2><p>通过裁剪现有的Linux系统, 创建属于自己的Linux系统<br>首先了解Linux系统的启动流程<br><img src="/img/2024-08-15-Thu-T-Linux/image-4.png" alt="alt text"></p><h2 id="3-3-Linux内核源码和内核升级"><a href="#3-3-Linux内核源码和内核升级" class="headerlink" title="3.3 Linux内核源码和内核升级"></a>3.3 Linux内核源码和内核升级</h2><p><a href="https://www.kernel.org/">Linux官网</a>并没有直接托管 Linux 0.01 的源代码，因为 Linux 内核的官方网站主要托管的是最新的稳定版本。<br>建议从官网的<a href="https://git.kernel.org/pub/scm/linux/kernel/git/nico/archive.git/?h=v0.01">Linux Git 存储库</a>阅读Linux源码 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git://git.kernel.org/pub/scm/linux/kernel/git/nico/archive.git<br>cd linux<br>git checkout v0.01<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">本人保存在了 /Users/fei/myspace/learnspace/Linux/archive 目录下</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">total 8<br>-rw-r--r--   1 fei  staff   2.1K Nov 13 17:31 Makefile          # Makefile是编译内核的核心文件，定义了如何构建内核、模块和其他相关文件<br>drwxr-xr-x   4 fei  staff   128B Nov 13 17:31 boot              # boot目录包含与内核启动相关的文件，如引导加载程序、启动映像等<br>drwxr-xr-x  21 fei  staff   672B Nov 13 17:31 fs                # fs目录包含与文件系统相关的代码，实现了多种文件系统的支持<br>drwxr-xr-x  18 fei  staff   576B Nov 13 17:31 include           # include目录包含内核源代码中使用的头文件，定义了内核接口、结构等<br>drwxr-xr-x   3 fei  staff    96B Nov 13 17:31 init              # init目录包含内核初始化代码，负责初始化系统并启动第一个用户空间进程<br>drwxr-xr-x  20 fei  staff   640B Nov 13 17:31 kernel            # kernel目录包含内核的核心功能代码，如调度、进程管理、系统调用等<br>drwxr-xr-x  14 fei  staff   448B Nov 13 17:31 lib               # lib目录包含内核需要的库文件，提供一些共享函数或基础功能<br>drwxr-xr-x   5 fei  staff   160B Nov 13 17:31 mm                # mm目录包含内存管理代码，包括虚拟内存、内存分配等<br>drwxr-xr-x   3 fei  staff    96B Nov 13 17:31 tools             # tools目录包含开发、调试和测试工具，这些工具通常用于内核开发和维护<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">uname -a  # 查看当前内核版本<br>yum info kernel -q  # 检测内核版本, 显示可以升级的版本<br>yum list kernel -q <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 更新本地包索引</span><br>sudo apt update                        # 更新APT包管理器的本地包索引<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 检查可用的内核版本</span><br>apt search linux-image                 # 搜索可用的Linux内核映像，查看可用的内核版本<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 安装新的内核版本</span><br>sudo apt install linux-image-&lt;version&gt; # 安装新版本的内核（例如：linux-image-5.4.0-80-generic）<br>                                        # 请将 &lt;version&gt; 替换为你需要安装的内核版本<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 安装相应的内核头文件（可选，但对于编译内核模块很重要）</span><br>sudo apt install linux-headers-&lt;version&gt; # 安装对应版本的内核头文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">5. 更新GRUB引导加载器</span><br>sudo update-grub                      # 更新GRUB配置文件，确保新安装的内核版本出现在启动菜单中<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">6. 重启系统</span><br>sudo reboot                           # 重启系统，选择新内核启动<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">7. 检查当前内核版本</span><br>uname -r                              # 查看当前运行的内核版本，确保已成功切换到新内核<br><br><br></code></pre></td></tr></table></figure><h2 id="3-4-Linux备份与恢复"><a href="#3-4-Linux备份与恢复" class="headerlink" title="3.4 Linux备份与恢复"></a>3.4 Linux备份与恢复</h2><p>实体机无法做快照, 如果系统发生崩溃或者数据损坏, 后果严重, 需要重新做系统, 还会造成数据丢失, 所以我们可以使用备份和恢复技术<br>Linux备份和恢复的两种方式:  </p><ol><li>把需要的备份的文件达成tar包, 下次需要恢复的时候, 再解压覆盖即可</li><li>使用dump和restore命令</li></ol><p><strong>备份操作</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 使用 tar 命令进行备份（打包并压缩文件夹）</span><br>tar -czvf /path/to/backup/backup_name.tar.gz /path/to/directory  # 打包并压缩指定目录<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-c：创建新的归档文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-z：使用 gzip 压缩</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v：显示处理文件的详细信息</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-f：指定归档文件的名称（必须放在选项后面）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 使用 rsync 命令进行增量备份</span><br>rsync -av --delete /path/to/source/ /path/to/backup/  # 将源目录备份到目标目录<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a：归档模式，保留文件的权限、时间戳等信息</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v：显示详细信息</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--delete：删除目标目录中源目录中已删除的文件</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 使用 <span class="hljs-built_in">dd</span> 命令进行磁盘备份</span><br>dd if=/dev/sda of=/path/to/backup/disk_backup.img bs=64K  # 将磁盘/dev/sda的内容备份到指定文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">if</span>：输入文件或设备</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">of：输出文件或设备</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">bs：设置块大小（64KB）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 使用 dump 和 restore 进行文件系统备份</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">备份文件系统</span><br>dump -0u -f /path/to/backup/filesystem.dump /dev/sda1  # 备份文件系统到 dump 文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复文件系统</span><br>restore -r -f /path/to/backup/filesystem.dump  # 从 dump 文件恢复文件系统<br></code></pre></td></tr></table></figure><p><strong>恢复操作</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 使用 tar 命令恢复备份</span><br>tar -xzvf /path/to/backup/backup_name.tar.gz -C /path/to/restore  # 从 tar.gz 文件恢复目录到指定位置<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-x：提取归档文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-z：解压 gzip 文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v：显示详细过程</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-f：指定归档文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-C：指定恢复的目标目录</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 使用 rsync 恢复增量备份</span><br>rsync -av /path/to/backup/ /path/to/restore/  # 将备份的文件恢复到目标目录<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a：归档模式，保持文件属性</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v：显示详细信息</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 使用 <span class="hljs-built_in">dd</span> 命令恢复磁盘备份</span><br>dd if=/path/to/backup/disk_backup.img of=/dev/sda bs=64K  # 将备份的磁盘镜像恢复到目标磁盘<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">if</span>：输入文件（备份的磁盘镜像）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">of：输出文件或设备（目标磁盘）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">bs：设置块大小（64KB）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 使用 restore 恢复文件系统</span><br>restore -r -f /path/to/backup/filesystem.dump  # 从 dump 文件恢复整个文件系统<br></code></pre></td></tr></table></figure><p><strong>dump和restore详解</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 使用 dump 命令进行文件系统备份</span><br>dump -0u -f /path/to/backup/filesystem.dump /dev/sda1  # 备份文件系统<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">dump：创建文件系统备份</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-0：备份级别（0 表示完全备份，1-9 表示增量备份）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-u：更新文件系统的备份状态（备份完成后会在文件系统的超级块中标记备份已完成）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-f：指定备份的目标文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">/dev/sda1：指定需要备份的文件系统设备（例如，根文件系统或其他挂载的分区）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">备份级别：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">- 级别 0：完全备份，备份所有文件。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">- 级别 1 到 9：增量备份，仅备份上次备份之后修改或新增的文件。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 使用 restore 命令恢复文件系统</span><br>restore -r -f /path/to/backup/filesystem.dump  # 从 dump 文件恢复文件系统<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">restore：恢复 dump 备份文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-r：恢复整个文件系统</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-f：指定需要恢复的备份文件（dump 文件）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 restore 命令时，通常需要在恢复过程中指定一个目标目录来还原文件系统内容。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复的方式：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">- 恢复整个文件系统：使用 -r 选项，直接从 dump 文件恢复。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">- 恢复部分文件：使用 -i 选项进入交互式模式，选择恢复特定文件。</span><br></code></pre></td></tr></table></figure><h2 id="3-5-Linux可视化管理webmin和bt运维工具"><a href="#3-5-Linux可视化管理webmin和bt运维工具" class="headerlink" title="3.5 Linux可视化管理webmin和bt运维工具"></a>3.5 Linux可视化管理webmin和bt运维工具</h2><p>bt下载: <code>wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</code></p><h2 id="3-6-Linux入侵检测、权限划分、系统优化"><a href="#3-6-Linux入侵检测、权限划分、系统优化" class="headerlink" title="3.6 Linux入侵检测、权限划分、系统优化"></a>3.6 Linux入侵检测、权限划分、系统优化</h2><h2 id="3-7-Linux面试题"><a href="#3-7-Linux面试题" class="headerlink" title="3.7 Linux面试题"></a>3.7 Linux面试题</h2><ol><li>分析t.log日志, 将各个ip地址截获, 并统计出现次数, 并按照从大大小排序</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">t.txt</span><br>http://192.168.200.10/index1.html<br>http://192.168.200.10/index2.html<br>http://192.168.200.20/index1.html<br>http://192.168.200.30/index1.html<br>http://192.168.200.40/index1.html<br>http://192.168.200.30/order.html<br>http://192.168.200.10/order.html<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取ip</span><br>cat t.txt | cut -d &quot;/&quot; -f 3 | sort | uniq -c | sort -nr # 对内容进行分割, 按照/划分, 取第三段. 并进行排序, 统计后再进行从大到小排序, <br><br></code></pre></td></tr></table></figure><ol start="2"><li>统计连接到服务器的各个ip情况, 并按照连接数从大到小排序</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看网络情况, 筛选出已连接的, 并按空格拆分, 取出第4位, 再去掉端口</span><br>netstat -an | grep ESTABLISHED | awk -F &quot; &quot; &#x27;&#123;print $4&#125;&#x27; | awk -F &quot;:&quot; &#x27;&#123;print $1&#125;&#x27;<br><br></code></pre></td></tr></table></figure><ol start="3"><li><p>如忘记了mysql5.7数据库的ROOT用户的密码，如何找回?  </p></li><li><p>写出指令:统计ip访问情况，要求分析nginx访问日志(access.log)，找出访问页面数量在前十位的ip</p></li><li><p>使用tcpdump监听本机,将来自ip 192.168.200.1，tcp端口为22的数据，保存输出到tcpdump.log，用做将来数据分析</p></li><li><p>常用的Nginx模块，用来做什么</p></li></ol><h1 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1. 常用命令"></a>1. 常用命令</h1><h2 id="1-1-系统操作"><a href="#1-1-系统操作" class="headerlink" title="1.1 系统操作"></a>1.1 系统操作</h2><ul><li>查看系统信息：<code>uname -a</code></li><li>查看系统版本：<code>cat /etc/issue</code></li><li>查看系统发行版：<code>cat /etc/os-release</code>， <code>lsb_release -a</code></li><li>查看系统内核版本：<code>uname -r</code></li></ul><h2 id="1-2-文件操作"><a href="#1-2-文件操作" class="headerlink" title="1.2 文件操作"></a>1.2 文件操作</h2><h3 id="1-2-1-sed命令"><a href="#1-2-1-sed命令" class="headerlink" title="1.2.1 sed命令"></a>1.2.1 <code>sed</code>命令</h3><p><a href="https://www.runoob.com/linux/linux-comm-sed.html">菜鸟教程</a></p><p>Linux sed 命令是利用脚本来处理文本文件。  </p><p>sed 可依照脚本的指令来处理、编辑文本文件。  </p><p>Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。  </p><p>语法：</p><ul><li><code>sed [options] [script] [input]</code></li><li><code>sed [-hnV][-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br><span class="hljs-comment"># 1. 参数说明</span><br>-h或--<span class="hljs-built_in">help</span> 显示帮助。<br>-n或--quiet或--silent 仅显示script处理后的结果。<br>-V或--version 显示版本信息。<br><br>-e&lt;script&gt;或--expression=&lt;script&gt; 以选项中指定的**script**来处理输入的文本文件。<br>-f&lt;script文件&gt;或--file=&lt;script文件&gt; 以选项中指定的**script文件**来处理输入的文本文件。<br><br><span class="hljs-comment"># 2. 动作说明</span><br>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～<br>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！<br>d ：删除，因为是删除啊，所以 d 后面通常不接任何东东；<br>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；<br>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～<br>s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正则表达式！例如 1,20s/old/new/g 就是啦！<br><br><span class="hljs-comment"># 3. 实例</span><br>我们先创建一个 testfile 文件，内容如下：<br><span class="hljs-built_in">cat</span> testfile <span class="hljs-comment">#查看testfile 中的内容  </span><br>    HELLO LINUX!  <br>    Linux is a free unix-type opterating system.  <br>    This is a linux testfile!  <br>    Linux <span class="hljs-built_in">test</span> <br>    Google<br>    Taobao<br>    Runoob<br>    Tesetfile<br>    Wiki<br><br></code></pre></td></tr></table></figure><h3 id="1-2-2-find"><a href="#1-2-2-find" class="headerlink" title="1.2.2 find"></a>1.2.2 <code>find</code></h3><p>find [路径] [匹配条件] [动作]</p><h3 id="vim-操作"><a href="#vim-操作" class="headerlink" title="vim 操作"></a>vim 操作</h3><p>新建&#x2F;编辑 .vimrc 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">syntax on<br>set nu<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-08-13-Tue-T-Rancher操作指北</title>
    <link href="/2024/08/13/2024-08-13-Tue-T-Rancher%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8C%97/"/>
    <url>/2024/08/13/2024-08-13-Tue-T-Rancher%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Rancher 是一个 Kubernetes 管理工具，让你能在<code>任何地方</code>和<code>任何提供商</code>上部署和运行集群。  </p></blockquote><p>Rancher 可以创建来自 Kubernetes 托管服务提供商的集群，创建节点并安装 Kubernetes，或者导入在任何地方运行的现有 Kubernetes 集群。  </p><p>Rancher 基于 Kubernetes 添加了新的功能，包括统一所有集群的身份验证和 RBAC，让系统管理员从一个位置控制全部集群的访问。<br>此外，Rancher 可以为集群和资源提供更精细的监控和告警，将日志发送到外部提供商，并通过应用商店（Application Catalog）直接集成 Helm。如果你拥有外部 CI&#x2F;CD 系统，你可以将其与 Rancher 对接。没有的话，你也可以使用 Rancher 提供的 Fleet 自动部署和升级工作负载。  </p><p>Rancher 是一个 全栈式 的 Kubernetes 容器管理平台，为你提供在任何地方都能成功运行 Kubernetes 的工具。</p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>Rancher 为 DevOps 工程师提供简单直接的用户界面，以管理其应用负载。用户不需要对 Kubernetes 有非常深入的了解，即可使用 Rancher。Rancher 应用商店包含一套实用的 DevOps 开发工具。Rancher 获得了多种云原生生态系统产品的认证，包括安全工具、监控系统、容器镜像仓库、存储和网络驱动等。</p><p>下图讲述了 Rancher 在 IT 管理团队和 DevOps 开发团队之间扮演的角色。DevOps 团队把他们的应用部署在他们选择的公有云或私有云上。IT 管理员负责查看并管理用户、集群、云服务的权限。<br><img src="/img/2024-08-13-Tue-T-Rancher%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8C%97/image.png" alt="smdbs"></p><h2 id="1-1-Rancher-架构"><a href="#1-1-Rancher-架构" class="headerlink" title="1.1 Rancher 架构"></a>1.1 Rancher 架构</h2><h3 id="1-1-1-Rancher-Server-和-Components"><a href="#1-1-1-Rancher-Server-和-Components" class="headerlink" title="1.1.1 Rancher Server 和 Components"></a>1.1.1 Rancher Server 和 Components</h3><p>大多数 Rancher 2.x 软件均运行在 Rancher Server 上。Rancher Server 包括用于管理整个 Rancher 部署的所有软件组件。</p><p>下图展示了 Rancher 2.x 的上层架构。下图中，Rancher Server 管理两个下游 Kubernetes 集群，其中一个由 RKE 创建，另一个由 Amazon EKS 创建。</p><p>为了达到最佳性能和安全性，我们建议你为 Rancher Management Server 创建一个专用的 Kubernetes 集群。不建议在此集群上运行用户工作负载。部署 Rancher 后，你可以创建或导入集群来运行你的工作负载。</p><p>下图介绍了用户如何通过 Rancher 的认证代理管理 Rancher 启动的 Kubernetes 集群和托管的 Kubernetes 集群：</p><p>通过 Rancher 的认证代理管理 Kubernetes 集群</p><p><img src="/img/2024-08-13-Tue-T-Rancher%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8C%97/image-2.png" alt="alt text"></p><h3 id="1-1-2-与下游集群通信"><a href="#1-1-2-与下游集群通信" class="headerlink" title="1.1.2 与下游集群通信"></a>1.1.2 与下游集群通信</h3><p>下图显示了 Cluster Controller、Cluster Agent 和 Node Agent 让 Rancher 控制下游集群的。</p><ul><li>与下游集群通信<br><img src="/img/2024-08-13-Tue-T-Rancher%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8C%97/image-4.png" alt="alt text"></li></ul><ol><li>认证代理<br>在此图中，名为 Bob 的用户希望查看在名为<code>User Cluster 1</code>的下游集群上运行的所有 Pod。在 Rancher 中，他可以运行<code>kubectl</code>命令来查看 Pod。Bob 通过<code>Rancher</code>的认证代理进行身份验证。</li></ol><p>认证代理将所有 Kubernetes API 调用转发到下游集群。它集成了本地身份验证、Active Directory 和 GitHub 等身份验证方式。在每个 Kubernetes API 调用请求时，认证代理会验证请求方的身份，并在转发给 Kubernetes master 节点之前，设置正确的 Kubernetes 消息头。</p><p>Rancher 使用 ServiceAccount 与 Kubernetes 集群通信，该 ServiceAccount 为在 Pod 中运行的进程提供身份。</p><p>默认情况下，Rancher 生成一个 kubeconfig 文件，文件包含凭证信息，用于为 Rancher Server 连接下游集群的 Kubernetes API Server 的代理。kubeconfig 文件 (kube_config_rancher-cluster.yml) 包含对集群的完全访问权限。</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Rancher</tag>
      
      <tag>Kubernetes</tag>
      
      <tag>DevOps</tag>
      
      <tag>Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-08-13-Tue-R-Creative_Guitar</title>
    <link href="/2024/08/13/2024-08-13-Tue-R-Creative_Guitar/"/>
    <url>/2024/08/13/2024-08-13-Tue-R-Creative_Guitar/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-08-13-Wed-T-Kubernetes搭建</title>
    <link href="/2024/08/13/2024-08-13-Wed-T-Kubernetes%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/08/13/2024-08-13-Wed-T-Kubernetes%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基于Ubuntu-24-04-快速部署K8S-1-31-0集群"><a href="#基于Ubuntu-24-04-快速部署K8S-1-31-0集群" class="headerlink" title="基于Ubuntu 24.04 快速部署K8S 1.31.0集群"></a>基于Ubuntu 24.04 快速部署K8S 1.31.0集群</h1><h2 id="1-K8S集群主机准备"><a href="#1-K8S集群主机准备" class="headerlink" title="1. K8S集群主机准备"></a>1. K8S集群主机准备</h2><p>主机操作系统版本: Ubuntu 24.04</p><p>硬件配置说明:<br>master 2核 4G内存 20GB硬盘<br>node1 2核 4G内存 20GB硬盘<br>node2 2核 4G内存 20GB硬盘</p><h3 id="1-1-主机名配置"><a href="#1-1-主机名配置" class="headerlink" title="1.1 主机名配置"></a>1.1 主机名配置</h3><p>master: hostnamectl set-hostname k8s-master01<br>node1:  hostnamectl set-hostname k8s-worker01<br>node2: hostnamectl set-hostname k8s-worker02</p><h3 id="1-2-主机IP地址配置"><a href="#1-2-主机IP地址配置" class="headerlink" title="1.2 主机IP地址配置"></a>1.2 主机IP地址配置</h3><p><code>vim /etc/netplan/50-cloud-init.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">静态配置</span><br></code></pre></td></tr></table></figure><p>欲使其生效, 使用命令<code>netplan apply</code></p><p>查看IP地址: <code>ip a s</code></p><p>使用动态分配时, 修改hosts即可</p><p><code>vim /etc/hosts</code></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.64.15</span> k8s-master01<br><span class="hljs-number">192.168.64.16</span> k8s-worker01<br><span class="hljs-number">192.168.64.17</span> k8s-worker02<br></code></pre></td></tr></table></figure><h3 id="1-3-时间同步"><a href="#1-3-时间同步" class="headerlink" title="1.3 时间同步"></a>1.3 时间同步</h3><p><code>apt install ntpsec-ntpdate</code></p><ul><li><p>手动同步: <code>ntpdate ntp.aliyun.com</code></p></li><li><p>自动同步: 编辑 <code>crontab -e</code> 定时任务</p></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> * * *ntpdate ntp.aliyun.com<br><span class="hljs-comment"># 每天0点0分时间同步</span><br></code></pre></td></tr></table></figure><h3 id="1-4-配置内核转发和网桥过滤"><a href="#1-4-配置内核转发和网桥过滤" class="headerlink" title="1.4 配置内核转发和网桥过滤"></a>1.4 配置内核转发和网桥过滤</h3><p>如果不配置会导致K8S集群的网络通信不流畅</p><p>创建加载内核模块文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 手动加载overlay和br_netfilter, 为了避免重启系统, 本文采用手动加载</span><br>modprobe overlay<br>modprobe br_netfilter<br><span class="hljs-comment"># modprobe overlay 是用于在 Linux 系统中加载 overlay 文件系统模块的命令。具体来说：</span><br><span class="hljs-comment"># modprobe：是一个工具，用于加载或卸载内核模块。它会自动处理模块间的依赖关系。</span><br><span class="hljs-comment"># overlay：指的是 overlay 文件系统模块，是一种联合文件系统（union filesystem），允许你将一个文件系统（通常是只读的）与另一个</span><br><span class="hljs-comment"># 文件系统（通常是可写的）合并，使之对外表现为单一的文件系统。</span><br><span class="hljs-comment"># 作用:</span><br><span class="hljs-comment"># 运行 modprobe overlay 后，系统会尝试加载 overlay 模块，提供支持 联合挂载，这种挂载方式允许：</span><br><span class="hljs-comment"># 存储层的组合：将多个文件系统（或称层）“叠加”成一个文件系统。</span><br><span class="hljs-comment"># Docker和Kubernetes等容器技术使用：容器中使用 overlayfs 提供文件隔离和更高效的存储管理。</span><br><span class="hljs-comment"># 这种联合文件系统特别适用于容器技术，比如 Docker，它利用 overlayfs 来高效管理镜像层和容器层。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#自动加载overlay和br_netfilter</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF | tee  /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">overlay</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment"># 这个命令的整体作用是在 /etc/modules-load.d/k8s.conf 文件中添加以下内容</span><br><span class="hljs-comment"># 这样，系统每次启动时都会自动加载 overlay 和 br_netfilter 模块，从而满足 Kubernetes 和其他容器服务的网络要求。</span><br><span class="hljs-comment"># 添加网桥过滤及内核转发配置文件</span><br><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF | tee /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">net.ipv4.ip_forward = 1</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># net.bridge.bridge-nf-call-ip6tables = 1：这个参数允许 IPv6 的网络桥接流量被 ip6tables 进行处理。设为 1 表示开启。</span><br><span class="hljs-comment"># net.bridge.bridge-nf-call-iptables = 1：这个参数允许 IPv4 的网络桥接流量被 iptables 进行处理。设为 1 表示开启。这对于 Kubernetes 的网络策略和防火墙规则是必要的。</span><br><span class="hljs-comment"># net.ipv4.ip_forward = 1：这个参数启用 IPv4 的转发功能。设为 1 表示开启。这对于容器间的网络通信以及外部访问容器的服务是必需的。</span><br><br><br><span class="hljs-comment"># 欲使之生效, 还需键入命令</span><br>sysctl --system<br></code></pre></td></tr></table></figure><h3 id="1-5-安装ipset和ipvsadm"><a href="#1-5-安装ipset和ipvsadm" class="headerlink" title="1.5 安装ipset和ipvsadm"></a>1.5 安装ipset和ipvsadm</h3><p>后续在使用kubeproxy的代理模式时, 会用到ipvs的配置<br>ipset 和 ipvsadm 是用于网络流量管理和负载均衡的重要工具，特别是在 Linux 环境中<br>ipset 是一个用于管理 IP 集合的工具。它可以创建和维护多个 IP 地址的集合，以便于快速地在防火墙（如 iptables）中进行匹配。ipset 的主要用途包括：<br>性能优化：通过将多个 IP 地址组合成集合，ipset 提供了比单独规则更高效的匹配方式，减少了 iptables 规则的数量，从而提高了性能。<br>动态管理：可以在运行时添加、删除或修改 IP 集合，便于对大规模流量的快速响应。</p><p>ipvsadm(“IP Virtual Server Administration”) 是 IP 虚拟服务器（IPVS）的管理工具，用于实现 Linux 的负载均衡。它主要用于以下方面：<br>负载均衡：ipvsadm 允许用户配置和管理 IPVS，以实现对传入流量的负载均衡。通过将请求分发到多个后端服务器，提供高可用性和高性能。<br>调度算法：支持多种负载均衡算法（如轮询、最少连接、基于权重等），使得流量分发更加灵活。<br>高可用性：配合 Linux 虚拟服务器（如 LVS），能够实现高可用性架构，支持多种网络协议（如 TCP、UDP）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 ipset 和 ipvsadm</span><br>apt install ipset ipvsadm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置ipvsadm模块加载</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加需要加载的模块</span><br><br>cat &lt;&lt; EOF | tee /etc/modules-load.d/ipvs.conf<br>ip_vs<br>ip_vs_rr<br>ip_vs_wrr<br>ip_vs_sh<br>nf_conntrack<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建加载模块脚本文件, 立即使用</span><br>cat &lt;&lt; EOF | tee ipvs.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/sh</span><br>modprobe -- ip_vs<br>modprobe -- ip_vs_rr<br>modprobe -- ip_vs_wrr<br>modprobe -- ip_vs_sh<br>modprobe -- nf_conntrack<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行脚本</span><br>sh ipvs.sh <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看模块加载情况</span><br>lsmod | grep &quot;ip_vs&quot;<br></code></pre></td></tr></table></figure><h3 id="1-6-关闭SWAP分区"><a href="#1-6-关闭SWAP分区" class="headerlink" title="1.6 关闭SWAP分区"></a>1.6 关闭SWAP分区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果不重启式的关闭swap分区, 可以临时关闭, 关闭命令为</span><br>swapoff -a<br><span class="hljs-meta prompt_"># </span><span class="language-bash">永远关闭swap分区, 需要重启系统</span><br>vim /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">注释掉如下内容</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">/swap.img none swap sw 0 0</span><br><br><br><br></code></pre></td></tr></table></figure><h2 id="2-K8S集群节点容器管理工具准备"><a href="#2-K8S集群节点容器管理工具准备" class="headerlink" title="2. K8S集群节点容器管理工具准备"></a>2. K8S集群节点容器管理工具准备</h2><h3 id="2-1-Containerd-部署文件获取"><a href="#2-1-Containerd-部署文件获取" class="headerlink" title="2.1 Containerd 部署文件获取"></a>2.1 Containerd 部署文件获取</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过wget命令下载</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">wget https://github.com/containerd/containerd/releases/download/v1.7.20/cri-containerd-1.7.20-linux-amd64.tar.gz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">本文使用Macbook M1芯片, 所以使用arm版本</span><br>wget https://github.com/containerd/containerd/releases/download/v1.7.20/cri-containerd-1.7.20-linux-arm64.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压并合并到根目录</span><br>tar xfv cri-containerd-1.7.20-linux-arm64.tar.gz -C /<br><br></code></pre></td></tr></table></figure><h3 id="Containerd配置文件生成和修改"><a href="#Containerd配置文件生成和修改" class="headerlink" title="Containerd配置文件生成和修改"></a>Containerd配置文件生成和修改</h3><p>默认情况下, 没有containerd配置文件, 我们需要使用命令生成并进行自定义修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建配置文件目录</span><br>mkdir /etc/containerd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成配置文件</span><br>containerd config default &gt; /etc/containerd/config.toml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改第67行</span><br>vim /etc/containerd/config.toml<br>sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.10&quot; # 修改为阿里云镜像<br><span class="hljs-meta prompt_"># </span><span class="language-bash">sandbox_image = <span class="hljs-string">&quot;registry.k8s.io/pause:3.9&quot;</span> <span class="hljs-comment"># 由3.8修改为3.9</span></span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改第139行, runc的operation</span>  <br>vim /etc/containerd/config.toml<br>SystemdCgroup = true # 由false修改为true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">containerd启动及开机自启动设计</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置开机自启动, 并现在启动</span><br>systemctl enable --now containerd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">验证启动成功</span><br>ls /var/run/containerd/ -l<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果成功, 则有以下内容</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">srw-rw---- 1 root root  0 Nov  4 10:17 containerd.sock</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">srw-rw---- 1 root root  0 Nov  4 10:17 containerd.sock.ttrpc</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">drwx--x--x 2 root root 40 Nov  4 10:17 io.containerd.runtime.v1.linux</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">drwx--x--x 2 root root 40 Nov  4 10:17 io.containerd.runtime.v2.task</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">验证版本</span><br>containerd --version<br><br></code></pre></td></tr></table></figure><h2 id="3-K8S-集群部署"><a href="#3-K8S-集群部署" class="headerlink" title="3. K8S 集群部署"></a>3. K8S 集群部署</h2><h3 id="3-1-安装源-apt"><a href="#3-1-安装源-apt" class="headerlink" title="3.1 安装源: apt"></a>3.1 安装源: <code>apt</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载用于Kubernetes软件包仓库的公共签名密钥, 如果没有此密钥, 则无法完成软件安装包的安装</span><br>curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加Kubernetes apt源仓库</span><br><br>echo &#x27;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /&#x27; | sudo tee /etc/apt/sources.list.d/kubernetes.list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新apt包索引</span><br><br>sudo apt-get update<br><br></code></pre></td></tr></table></figure><h3 id="3-2-Kubernetes软件安装及kubelet配置"><a href="#3-2-Kubernetes软件安装及kubelet配置" class="headerlink" title="3.2 Kubernetes软件安装及kubelet配置"></a>3.2 Kubernetes软件安装及<code>kubelet</code>配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前软件列表, 是否有kubeadm</span><br>apt-cache policy kubeadm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装指定版本</span><br>apt install kubeadm=1.31.0-1.1 kubelet=1.31.0-1.1 kubectl=1.31.0-1.1 -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">!!!注意: 安装完成后不能立即启动</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">首先锁定这些应用的版本, 保证后续使用过程中不会自动更新, 取消锁定使用unhold</span><br>sudo apt-mark hold kubeadm kubelet kubectl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置kubelet</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">为实现Kubernetes使用的cgroup与容器运行时使用的cgroupdriver的一致性, 建议修改如下内容</span><br>vim  /etc/default/kubelet<br>KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置为开机自启动即可, 由于没有生成配置文件, 集群初始化后自动启动</span><br>systemctl enable kubelet<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">准备初始化的配置文件, 只需要在master节点中准备即可</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看版本 kubeadm version</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成部署配置文件</span><br>kubeadm config print init-defaults &gt; kubeadm-config.yaml<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置文件</span><br>vim kubeadm-config.yaml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 修改第12行, 18行的内容, 在46后增加一行podSubnet</span><br><br>  <span class="hljs-attr">1 apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta4</span><br>  <span class="hljs-attr">2 bootstrapTokens:</span><br>  <span class="hljs-attr">3 - groups:</span><br>  <span class="hljs-number">4</span>   <span class="hljs-bullet">-</span> <span class="hljs-string">system:bootstrappers:kubeadm:default-node-token</span><br>  <span class="hljs-attr">5   token:</span> <span class="hljs-string">abcdef.0123456789abcdef</span><br>  <span class="hljs-attr">6   ttl:</span> <span class="hljs-string">24h0m0s</span><br>  <span class="hljs-attr">7   usages:</span><br>  <span class="hljs-number">8</span>   <span class="hljs-bullet">-</span> <span class="hljs-string">signing</span><br>  <span class="hljs-number">9</span>   <span class="hljs-bullet">-</span> <span class="hljs-string">authentication</span><br> <span class="hljs-attr">10 kind:</span> <span class="hljs-string">InitConfiguration</span><br> <span class="hljs-attr">11 localAPIEndpoint:</span><br> <span class="hljs-attr">12   advertiseAddress:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span> <span class="hljs-comment"># 当前master节点的ip</span><br> <span class="hljs-attr">13   bindPort:</span> <span class="hljs-number">6443</span><br> <span class="hljs-attr">14 nodeRegistration:</span><br> <span class="hljs-attr">15   criSocket:</span> <span class="hljs-string">unix:///var/run/containerd/containerd.sock</span><br> <span class="hljs-attr">16   imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br> <span class="hljs-attr">17   imagePullSerial:</span> <span class="hljs-literal">true</span><br> <span class="hljs-attr">18   name:</span> <span class="hljs-string">k8s-master01</span> <span class="hljs-comment"># 对应当前的master节点名称, 如果有多个则添加多个</span><br> <span class="hljs-attr">19   taints:</span> <span class="hljs-literal">null</span><br> <span class="hljs-attr">20 timeouts:</span><br> <span class="hljs-attr">21   controlPlaneComponentHealthCheck:</span> <span class="hljs-string">4m0s</span><br> <span class="hljs-attr">22   discovery:</span> <span class="hljs-string">5m0s</span><br> <span class="hljs-attr">23   etcdAPICall:</span> <span class="hljs-string">2m0s</span><br> <span class="hljs-attr">24   kubeletHealthCheck:</span> <span class="hljs-string">4m0s</span><br> <span class="hljs-attr">25   kubernetesAPICall:</span> <span class="hljs-string">1m0s</span><br> <span class="hljs-attr">26   tlsBootstrap:</span> <span class="hljs-string">5m0s</span><br> <span class="hljs-attr">27   upgradeManifests:</span> <span class="hljs-string">5m0s</span><br> <span class="hljs-number">28</span> <span class="hljs-string">---</span><br> <span class="hljs-attr">29 apiServer:</span> &#123;&#125;<br> <span class="hljs-attr">30 apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta4</span><br> <span class="hljs-attr">31 caCertificateValidityPeriod:</span> <span class="hljs-string">87600h0m0s</span><br> <span class="hljs-attr">32 certificateValidityPeriod:</span> <span class="hljs-string">8760h0m0s</span><br> <span class="hljs-attr">33 certificatesDir:</span> <span class="hljs-string">/etc/kubernetes/pki</span><br> <span class="hljs-attr">34 clusterName:</span> <span class="hljs-string">kubernetes</span><br> <span class="hljs-attr">35 controllerManager:</span> &#123;&#125;<br> <span class="hljs-attr">36 dns:</span> &#123;&#125;<br> <span class="hljs-attr">37 encryptionAlgorithm:</span> <span class="hljs-string">RSA-2048</span><br> <span class="hljs-attr">38 etcd:</span><br> <span class="hljs-attr">39   local:</span><br> <span class="hljs-attr">40     dataDir:</span> <span class="hljs-string">/var/lib/etcd</span><br> <span class="hljs-attr">41 imageRepository:</span> <span class="hljs-string">registry.aliyuncs.com/google_containers</span> <span class="hljs-comment"># registry.k8s.io修改为阿里云镜像</span><br> <span class="hljs-attr">42 kind:</span> <span class="hljs-string">ClusterConfiguration</span><br> <span class="hljs-attr">43 kubernetesVersion:</span> <span class="hljs-number">1.31</span><span class="hljs-number">.0</span><br> <span class="hljs-attr">44 networking:</span><br> <span class="hljs-attr">45   dnsDomain:</span> <span class="hljs-string">cluster.local</span><br> <span class="hljs-attr">46   serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><br>      <span class="hljs-attr">podSubnet:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span> <span class="hljs-comment"># 这里是配置pod所在的网段, 应不与当前网络发生冲突</span><br> <span class="hljs-attr">47 proxy:</span> &#123;&#125;<br> <span class="hljs-attr">48 scheduler:</span> &#123;&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-容器镜像下载"><a href="#3-3-容器镜像下载" class="headerlink" title="3.3 容器镜像下载"></a>3.3 容器镜像下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前版本需要的镜像, 指定版本可用kubeadm config images list --kubernetes-version=1.31.0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubeadm config images list</span> <br>kubeadm config images list --kubernetes-version=1.31.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果下载失败, 到阿里云上下载, 下载后更改镜像名称</span><br>kubeadm config images pull  --image-repository registry.aliyuncs.com/google_containers --kubernetes-version=1.31.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载镜像</span><br>kubeadm config images pull  # 实际底层使用的crictl工具下载<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看下载的镜像</span><br>crictl images<br><br></code></pre></td></tr></table></figure><h3 id="3-4-使用-kubeadm-初始化集群"><a href="#3-4-使用-kubeadm-初始化集群" class="headerlink" title="3.4 使用 kubeadm 初始化集群"></a>3.4 使用 kubeadm 初始化集群</h3><!-- sudo kubeadm init --pod-network-cidr=192.168.0.0/16但是不幸的是，这里需要拉取google的镜像，国内是难以做到的，而且containerd的代理也很难配置，因此最最简单的方法就是使用阿里云的容器镜像源：sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --image-repository registry.aliyuncs.com/google_containers --><p>kubeadm init –config kubeadm-config.yaml –upload-certs –v&#x3D;9</p><!-- 看到Your Kubernetes control-plane has initialized successfully!, 则表示成功🏅 --><p>如果init失败, 需要通过<code>kubeadm reset</code>重置操作, 并重启容器运行时<code>sudo systemctl restart containerd</code></p><h3 id="3-5-kubectl-配置"><a href="#3-5-kubectl-配置" class="headerlink" title="3.5 kubectl 配置"></a>3.5 kubectl 配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p $HOME/.kube # 此文件夹用于存放 kubectl 的配置文件<br>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config # 将 Kubernetes 集群初始化时生成的 admin.conf 文件复制到用户的 .kube/config 文件中<br>sudo chown $(id -u):$(id -g) $HOME/.kube/config # 更改文件的所有者，使其归当前用户所有<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">完成上述操作后, 查看当前节点</span><br>kubectl get nodes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">上述命令会查看到结果: k8s-master01   NotReady   control-plane   10m   v1.31.0</span><br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="3-6-将其余节点加入集群"><a href="#3-6-将其余节点加入集群" class="headerlink" title="3.6 将其余节点加入集群"></a>3.6 将其余节点加入集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在主节点上获取加入命令, 包括 IP 地址、端口、token 和 --discovery-token-ca-cert-hash 参数。</span><br>kubeadm token create --print-join-command<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出示例如下：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubeadm <span class="hljs-built_in">join</span> 192.168.64.15:6443 --token fhgh1q.y3lit9rx5n9g42pc --discovery-token-ca-cert-hash sha256:eb8f1b9449b52c055711922ede6da56fa6606b5e1006bf4d9c0105b34498d025</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在新节点上执行:</span><br>sudo kubeadm join 192.168.64.15:6443 --token fhgh1q.y3lit9rx5n9g42pc --discovery-token-ca-cert-hash sha256:eb8f1b9449b52c055711922ede6da56fa6606b5e1006bf4d9c0105b34498d025<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点</span><br>kubectl get nodes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取 Kubernetes 集群中的组件状态 component statuses</span><br>kubectl get cs<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                 STATUS    MESSAGE   ERROR</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">scheduler            Healthy   ok</span>        <br><span class="hljs-meta prompt_"># </span><span class="language-bash">etcd-0               Healthy   ok</span>        <br><span class="hljs-meta prompt_"># </span><span class="language-bash">controller-manager   Healthy   ok</span><br><br></code></pre></td></tr></table></figure><h2 id="4-K8S集群网络插件部署"><a href="#4-K8S集群网络插件部署" class="headerlink" title="4. K8S集群网络插件部署"></a>4. K8S集群网络插件部署</h2><p>通过上面的步骤, 集群已经初始化完成, 但是节点都还处于not ready状态, 这是是因为scheduler组件还不能完成相关的pod调度. 而这是因为sheduler缺少一些网络插件. 以下三种网络插件可以任选其一.<br><code>Flannel</code>: 适用于小规模集群(个位数集群), 适合快速部署和简单网络需求，易于使用，但在安全性和性能上相对较弱<br><code>Calico</code>: (10~100), 适合需要强大网络策略和安全性的应用，适合大规模部署，但配置较为复杂</p><p><code>Cilium</code>: 多集群使用, 适合现代云原生应用，提供高性能和细粒度的安全策略，但对技术要求较高</p><p>本文使用Calico网络插件, Calico有两种安装方式, 一种是yaml, 一种是通过operator方式安装, 本文采用operator方式安装, 较为方便</p><h3 id="4-1-Calico-安装"><a href="#4-1-Calico-安装" class="headerlink" title="4.1 Calico 安装"></a>4.1 Calico 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">访问官网  https://docs.tigera.io/calico/3.28/about/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 Tigera Calico operator, 在master节点上操作</span><br>kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/tigera-operator.yaml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看calico operator是否是运行的状态, 只有是运行的状态才可进行下一步</span><br>kubectl get pods -n tigera-operator<br><span class="hljs-meta prompt_"># </span><span class="language-bash">tigera-operator-89c775547-57prb   1/1     Running   0          54s</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载calico的自定义资源配置到本地</span><br>wget https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/custom-resources.yaml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果无法下载, 通过浏览器访问后粘贴</span><br><br></code></pre></td></tr></table></figure><p>修改custom-resources.yaml的第13行, 应与3.2处配置podSubnet网段保持相同</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <span class="hljs-number">1</span> <span class="hljs-comment"># This section includes base Calico installation configuration.</span><br> <span class="hljs-number">2</span> <span class="hljs-comment"># For more information, see: https://docs.tigera.io/calico/latest/reference/installation/api#operator.tigera.io/v1.Installation</span><br> <span class="hljs-attr">3 apiVersion:</span> <span class="hljs-string">operator.tigera.io/v1</span><br> <span class="hljs-attr">4 kind:</span> <span class="hljs-string">Installation</span><br> <span class="hljs-attr">5 metadata:</span><br> <span class="hljs-attr">6   name:</span> <span class="hljs-string">default</span><br> <span class="hljs-attr">7 spec:</span><br> <span class="hljs-number">8</span>   <span class="hljs-comment"># Configures Calico networking.</span><br> <span class="hljs-attr">9   calicoNetwork:</span><br><span class="hljs-attr">10     ipPools:</span><br><span class="hljs-attr">11     - name:</span> <span class="hljs-string">default-ipv4-ippool</span><br><span class="hljs-attr">12       blockSize:</span> <span class="hljs-number">26</span><br><span class="hljs-attr">13       cidr:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span> <span class="hljs-comment"># 此处配置集群pod网络</span><br><span class="hljs-attr">14       encapsulation:</span> <span class="hljs-string">VXLANCrossSubnet</span><br><span class="hljs-attr">15       natOutgoing:</span> <span class="hljs-string">Enabled</span><br><span class="hljs-attr">16       nodeSelector:</span> <span class="hljs-string">all()</span><br><span class="hljs-number">17</span> <br><span class="hljs-number">18</span> <span class="hljs-string">---</span><br><span class="hljs-number">19</span> <br><span class="hljs-number">20</span> <span class="hljs-comment"># This section configures the Calico API server.</span><br><span class="hljs-number">21</span> <span class="hljs-comment"># For more information, see: https://docs.tigera.io/calico/latest/reference/installation/api#operator.tigera.io/v1.APIServer</span><br><span class="hljs-attr">22 apiVersion:</span> <span class="hljs-string">operator.tigera.io/v1</span><br><span class="hljs-attr">23 kind:</span> <span class="hljs-string">APIServer</span><br><span class="hljs-attr">24 metadata:</span><br><span class="hljs-attr">25   name:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">26 spec:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">应用配置</span><br>kubectl create -f custom-resources.yaml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看calico pod运行情况</span><br>kubectl get pods -n calico-system -o wide<br><span class="hljs-meta prompt_"># </span><span class="language-bash">NAME                                       READY   STATUS    RESTARTS   AGE   IP              NODE           NOMINATED NODE   READINESS GATES</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">calico-kube-controllers-74cc68955d-2smdb   1/1     Running   0          15h   10.244.69.194   k8s-worker02   &lt;none&gt;           &lt;none&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">calico-node-h5j7d                          1/1     Running   0          15h   192.168.64.17   k8s-worker02   &lt;none&gt;           &lt;none&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">calico-node-n9765                          1/1     Running   0          15h   192.168.64.16   k8s-worker01   &lt;none&gt;           &lt;none&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">calico-node-xwbrm                          1/1     Running   0          15h   192.168.64.15   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">calico-typha-5d9f58495d-6nhkt              1/1     Running   0          15h   192.168.64.17   k8s-worker02   &lt;none&gt;           &lt;none&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">calico-typha-5d9f58495d-brgzw              1/1     Running   0          15h   192.168.64.16   k8s-worker01   &lt;none&gt;           &lt;none&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">csi-node-driver-f8zgg                      2/2     Running   0          15h   10.244.69.193   k8s-worker02   &lt;none&gt;           &lt;none&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">csi-node-driver-qspfg                      2/2     Running   0          15h   10.244.32.129   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">csi-node-driver-rtrl9                      2/2     Running   0          15h   10.244.79.65    k8s-worker01   &lt;none&gt;           &lt;none&gt;</span><br><br><br></code></pre></td></tr></table></figure><h2 id="5-部署应用验证K8S集群的可用性"><a href="#5-部署应用验证K8S集群的可用性" class="headerlink" title="5. 部署应用验证K8S集群的可用性"></a>5. 部署应用验证K8S集群的可用性</h2><h3 id="5-1-验证Core-Dns的可用性"><a href="#5-1-验证Core-Dns的可用性" class="headerlink" title="5.1 验证Core Dns的可用性"></a>5.1 验证Core Dns的可用性</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看core DNS 服务</span><br>`kubectl get service -n kube-system`  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">结果 kube-dns   ClusterIP   10.96.0.10   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   17h</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试可用性</span><br>dig -t a www.baidu.com@10.96.0.10<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果能解析出来, 说明core DNS可用</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">;; ANSWER SECTION:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">www.baidu.com\@10.96.0.10. 1INA198.18.0.36</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">否则表示core DNS目前无法使用</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改如下文件, 修改DNS 服务器地址</span><br>vim /etc/resolv.conf<br><br><br></code></pre></td></tr></table></figure><h3 id="5-2-部署应用验证"><a href="#5-2-部署应用验证" class="headerlink" title="5.2 部署应用验证"></a>5.2 部署应用验证</h3><p>本次使用nginx部署验证</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginxweb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginxweb</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span> <br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginxweb</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginxwebc</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginxweb-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">externalTrafficPolicy:</span> <span class="hljs-string">Cluster</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginxweb</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30080</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将上述yaml文件保存为nginx.yaml文件, 并使用kubectl部署</span><br>kubectl apply -f nginx.yaml<br><span class="hljs-meta prompt_"># </span><span class="language-bash">有如下结果表示部署成功🏅</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deployment.apps/nginxweb created</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">service/nginxweb-service created</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看部署的pod, 这里获取到的一个nginx pod的集群ip是10.244.69.196</span><br>kubectl get pods -o wide<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">集群内访问nginx, 有nginx的页面结果, 则表示成功</span><br>curl 10.244.69.196<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">集群外访问, 使用集群任意一个节点的IP加上30080端口进行访问</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在浏览器上访问 http://192.168.64.15:30080</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">有nginx的页面结果, 则表示部署成功🏅</span><br><br><br></code></pre></td></tr></table></figure><h2 id="6-常见问题"><a href="#6-常见问题" class="headerlink" title="6 常见问题"></a>6 常见问题</h2><h3 id="6-1-科学网络"><a href="#6-1-科学网络" class="headerlink" title="6.1 科学网络"></a>6.1 科学网络</h3><p>开启科学上网, 下载相关的依赖时, 才更加方便  </p><p>使用clash代理时, 需要开启Tun Mode</p><h3 id="6-2-ssh操作"><a href="#6-2-ssh操作" class="headerlink" title="6.2 ssh操作"></a>6.2 ssh操作</h3><ul><li>打开ssh连接服务(慎重)<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Ubuntu 22.04</span><br><span class="hljs-comment"># 安装ssh服务</span><br>sudo apt-get install openssh-server<br><br><span class="hljs-comment"># 查看sshd服务</span><br>dpkg -l | grep ssh  <span class="hljs-comment">#  openssh-server</span><br><br><span class="hljs-comment"># 确认ssh服务是否启动</span><br>ps -e | grep ssh<br>如果看到sshd那说明ssh-server已经启动了。<br>如果没有则可以这样启动：sudo /etc/init.d/ssh start或sudo service ssh start<br><br><span class="hljs-comment"># 1. 编辑/etc/ssh/sshd_config文件</span><br>PermitRootLogin <span class="hljs-built_in">yes</span> <span class="hljs-comment"># prohibit-password</span><br><span class="hljs-comment"># PubkeyAuthentication no 千万不要这样设置!!!!, 否则主机将无法连接到重启后的虚拟机</span><br>删除sshd_config.d中的子配置<br><br><span class="hljs-comment"># 2. 重启ssh服务</span><br>sudo /etc/init.d/ssh stop<br>sudo /etc/init.d/ssh start<br>sudo service ssh restart<br><br><span class="hljs-comment"># 3. 安装ssh服务后，系统默认开启系统sshd，查看sshd状态如果不是默认启动，修改服务为enable</span><br>sudo systemctl <span class="hljs-built_in">enable</span> ssh<br><br></code></pre></td></tr></table></figure></li></ul><p>tips: 使用scp 命令传输文件  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将node2上的文件cni-plugins-linux-amd64-v1.3.0.tgz复制到本地</span><br>scp root@node2:/home/ubuntu/cni-plugins-linux-amd64-v1.3.0.tgz ./<br></code></pre></td></tr></table></figure><h3 id="6-3-学习路径"><a href="#6-3-学习路径" class="headerlink" title="6.3 学习路径"></a>6.3 学习路径</h3><p><a href="https://developer.aliyun.com/article/1277329">Kubernetes学习路径</a></p><h3 id="6-4-虚拟机资源准备"><a href="#6-4-虚拟机资源准备" class="headerlink" title="6.4 虚拟机资源准备"></a>6.4 虚拟机资源准备</h3><p>安装multipass, 用于准备集群所需虚拟机: <code>brew install multipass</code>  </p><h3 id="6-5-kubeadm-kubectl-kubelet-区别"><a href="#6-5-kubeadm-kubectl-kubelet-区别" class="headerlink" title="6.5 kubeadm kubectl kubelet 区别"></a>6.5 kubeadm kubectl kubelet 区别</h3><p><img src="/img/2024-08-13-Wed-T-Kubernetes/image-1.png" alt="kubeadm kubectl kubelet 区别"></p><h3 id="6-6-其他"><a href="#6-6-其他" class="headerlink" title="6.6 其他"></a>6.6 其他</h3><p><strong>kubernetes 系统各个组件调用关系：</strong></p><ol><li>首先要明确，一旦 kubernetes 环境启动之后，master 和 node 都会将自身的信息存储到 etcd 数据库中；</li><li>一个 nginx 服务的安装请求会首先被发送到 master 节点的 apiServer 组件；</li><li>apiServer 组件会调用 scheduler 组件来决定到底应该把这个服务安装到哪个 node 节点上，在此时，它会从 etcd 中读取各个 node 节点的信息，然后按照一定的算法进行选择，并将结果告知 apiServer；</li><li>apiServer 调用 controller-manager 去调度 Node 节点安装 nginx 服务；</li><li>kubelet 接收到指令后，会通知 docker，然后由 docker 来启动一个 nginx 的 pod，pod 是 kubernetes 的最小操作单元，容器必须跑在 pod 中；</li><li>当Pod启动后，一个 nginx 服务就运行了，如果需要访问 nginx，就需要通过 kube-proxy 来对 pod 产生访问的代理<br>这样，外界用户就可以访问集群中的 nginx 服务了</li></ol>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Kubernetes搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-08-13-Wed-T-Git操作大全</title>
    <link href="/2024/08/13/2024-08-13-Wed-T-Git%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/"/>
    <url>/2024/08/13/2024-08-13-Wed-T-Git%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h1><p><strong>gitignore</strong><br>忽略文件<br>如果有文件需要忽略，可以在根目录下创建一个.gitignore文件，在里面写上需要忽略的文件名，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gitignore">.idea/<br>node_modules/<br>public/<br>temp.txt<br></code></pre></td></tr></table></figure><p>如果某些文件已被 Git 跟踪，即使你将它们添加到 .gitignore 文件中，Git 仍然会继续跟踪它们。你需要使用以下命令停止跟踪这些文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> --cached &lt;file&gt; <span class="hljs-comment"># 停止跟踪文件</span><br>git <span class="hljs-built_in">rm</span> -r --cached &lt;folder_name&gt; <span class="hljs-comment"># 停止跟踪文件夹</span><br>git <span class="hljs-built_in">rm</span> -r --cached . <span class="hljs-comment"># 停止跟踪所有文件</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-08-13-Wed-T-NodeJS配置</title>
    <link href="/2024/08/13/2024-08-13-Wed-T-NodeJS%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/08/13/2024-08-13-Wed-T-NodeJS%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><code>index_img: /img/</code>; <code>summary:</code> </p></blockquote><blockquote><p><a href="https://wild-flame.github.io/guides/docs/mac-os-x-setup-guide/nodejs">https://wild-flame.github.io/guides/docs/mac-os-x-setup-guide/nodejs</a></p></blockquote><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install node<br></code></pre></td></tr></table></figure><h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h1><p>查看当前镜像源: <code>npm config get registry</code></p><ol><li><p>配置华为云镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://mirror.cloud.huawei.com/npm/registry<br></code></pre></td></tr></table></figure></li><li><p>修改成腾讯云镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry http://mirrors.cloud.tencent.com/npm/<br></code></pre></td></tr></table></figure></li><li><p>配置淘宝镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-08-13-Wed-T-快捷键大全</title>
    <link href="/2024/08/13/2024-08-13-Wed-T-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
    <url>/2024/08/13/2024-08-13-Wed-T-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><code>index_img: /img/</code>; <code>summary:</code> </p></blockquote><h2 id="1-Mac"><a href="#1-Mac" class="headerlink" title="1. Mac"></a>1. Mac</h2><h2 id="1-1-Terminal"><a href="#1-1-Terminal" class="headerlink" title="1.1 Terminal"></a>1.1 Terminal</h2><h1 id="2-Vscode"><a href="#2-Vscode" class="headerlink" title="2. Vscode"></a>2. Vscode</h1><h2 id="2-1-Markdown"><a href="#2-1-Markdown" class="headerlink" title="2.1 Markdown"></a>2.1 Markdown</h2><ol><li><code>Command + Shift + v</code> 打开预览</li><li><code>Command + Shift + c</code> 唤出命令行</li></ol><h2 id="2-2-截图配置"><a href="#2-2-截图配置" class="headerlink" title="2.2 截图配置"></a>2.2 截图配置</h2><h3 id="2-2-1-Vscode-配置"><a href="#2-2-1-Vscode-配置" class="headerlink" title="2.2.1 Vscode 配置"></a>2.2.1 Vscode 配置</h3><p>在设置中找到<code>Markdown › Copy Files: Destination</code><br>配置内容为<br><code>Item: *.md</code><br><code>Value: ./$&#123;documentBaseName&#125;/$&#123;fileName&#125;</code><br><img src="/img/2024-08-13-Wed-T-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/image.png" alt="alt text"></p><h3 id="2-2-2-配置hexo-generate前置操作"><a href="#2-2-2-配置hexo-generate前置操作" class="headerlink" title="2.2.2 配置hexo generate前置操作"></a>2.2.2 配置hexo generate前置操作</h3><p>在使用<code>hexo g</code>生成public内容前，完成图片资源路径的替换。以达到本地markdown编辑器预览和Hexo博客上图片均可以显示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;before_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 使用正则表达式查找并替换所有布局类型的图片路径</span><br>    <br>    data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/!\[([^\]]*)\]\(([0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;-[a-zA-Z]&#123;3&#125;-[A-Z]&#123;1&#125;-[\u4E00-\u9FA5A-Za-z0-9_]+)(\/)([^)]+\))/g</span>, <span class="hljs-string">&#x27;![$1]($4)&#x27;</span>); <span class="hljs-comment">//正则表达式还得多学啊！！！！！</span><br>     <br>    <span class="hljs-keyword">return</span> data;<br>  &#125;);<br>  <br></code></pre></td></tr></table></figure><p>要是Hexo生效，还需修改配置文件<code>_config.yml</code>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 启用文章资源文件夹</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span> <br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-08-13-Hexo的瓶瓶罐罐</title>
    <link href="/2024/08/13/2024-08-13-Wed-T-Hexo%E7%9A%84%E7%93%B6%E7%93%B6%E7%BD%90%E7%BD%90/"/>
    <url>/2024/08/13/2024-08-13-Wed-T-Hexo%E7%9A%84%E7%93%B6%E7%93%B6%E7%BD%90%E7%BD%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/img/2024-08-13-Wed-T-Hexo%E7%9A%84%E7%93%B6%E7%93%B6%E7%BD%90%E7%BD%90/image.png" alt="alt text"></p><blockquote><p><a href="https://hexo.io/zh-cn/docs">Hexo</a></p></blockquote><h1 id="1-基础介绍"><a href="#1-基础介绍" class="headerlink" title="1. 基础介绍"></a>1. 基础介绍</h1><h2 id="1-1-目录介绍"><a href="#1-1-目录介绍" class="headerlink" title="1.1 目录介绍"></a>1.1 目录介绍</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs .">├── _config.fluid.yml<br>├── _config.yml<br>├── db.json<br>├── node_modules<br>├── packag$$e-lock.json<br>├── package.json<br>├── public<br>├── scaffolds<br>├── source<br>└── themes<br></code></pre></td></tr></table></figure><ol><li><code>_config.fluid.yml</code>: 这是一个配置文件，用于配置Hexo的插件、主题等。  </li><li><code>_config.yml</code>: 这是一个配置文件，用于配置Hexo的插件、主题等。  </li><li><code>db.json</code>: 这是一个数据库文件，用于存储Hexo的博客数据。   </li><li><code>package.json</code>: 这是一个配置文件，存储应用程序的信息。 EJS, Stylus 和 Markdown 渲染引擎 已默认安装，您可以自由移除。 如果您想，可以稍后卸载它们。</li><li><code>scaffolds</code>: 模版 文件夹。 当您新建文章时，Hexo 会根据 scaffold 来创建文件。</li><li><code>source</code>: 资源文件夹。 是存放用户资源的地方。 除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。 Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去</li><li><code>themes</code>: 主题文件夹。 Hexo 会根据主题来生成静态页面。</li></ol><h2 id="1-2-配置文件"><a href="#1-2-配置文件" class="headerlink" title="1.2 配置文件"></a>1.2 配置文件</h2><p>您可以在<code>_config.yml</code>中修改大部分的配置。</p><h2 id="1-3-资源文件夹"><a href="#1-3-资源文件夹" class="headerlink" title="1.3 资源文件夹"></a>1.3 资源文件夹</h2><h3 id="1-3-1-全局资源文件夹"><a href="#1-3-1-全局资源文件夹" class="headerlink" title="1.3.1 全局资源文件夹"></a>1.3.1 全局资源文件夹</h3><p>资源（Asset）代表<code>source</code>文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。 比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source&#x2F;images 文件夹中。 然后通过类似于<code>![](/images/image.jpg)</code>的方法访问它们。</p><h3 id="1-3-2-文章资源文件夹"><a href="#1-3-2-文章资源文件夹" class="headerlink" title="1.3.2 文章资源文件夹"></a>1.3.2 文章资源文件夹</h3><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。 这个稍微有些复杂但是管理资源非常方便的功能可以通过将<code>config.yml</code>文件中的<code>post_asset_folder</code>选项设为<code>true</code>来打开。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>当资源文件管理功能打开后，Hexo将会在你每一次通过<code>hexo new [layout] &lt;title&gt;</code>命令创建新文章时自动创建一个文件夹。 这个资源文件夹将会有与这个文章文件一样的名字。 将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。<br>使用vscode时，为了适配hexo，需要做一些小的配置 <a href="#%E4%B8%8Evscode%E7%9A%84%E9%9B%86%E6%88%90">参考与vscode的集成</a></p><h3 id="1-3-3-使用-Markdown-嵌入图片"><a href="#1-3-3-使用-Markdown-嵌入图片" class="headerlink" title="1.3.3 使用 Markdown 嵌入图片"></a>1.3.3 使用 Markdown 嵌入图片</h3><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked3.1.0</a>引入了一个新的选项，其允许你无需使用 asset_img 标签插件就可以在 markdown 中嵌入图片<br>如需启用: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">_config.yml</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>启用后，资源图片将会被自动解析为其对应文章的路径。 例如：<code>image.jpg</code>位置为<code>/2020/01/02/foo/image.jpg</code>，这表示它是<code>/2020/01/02/foo/</code>文章的一张资源图片，<code>![](image.jpg)</code>将会被解析为<code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code> </p><h2 id="1-4-数据文件夹"><a href="#1-4-数据文件夹" class="headerlink" title="1.4 数据文件夹"></a>1.4 数据文件夹</h2><p>有时，您可能需要在模板中使用一些无法直接在帖子中使用的数据，或者您想在其他地方重复使用这些数据。 对于这种情况，Hexo 3 引入了新的数据文件。 此功能会加载<code>source/_data</code>内的 YAML 或 JSON 文件，如此一来您便能在网站中复用这些文件了。</p><p>举例来说，在<code>source/_data</code>文件夹中新建<code>menu.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Home:</span> <span class="hljs-string">/</span><br><span class="hljs-attr">Gallery:</span> <span class="hljs-string">/gallery/</span><br><span class="hljs-attr">Archives:</span> <span class="hljs-string">/archives/</span><br></code></pre></td></tr></table></figure><p>您就能在模板中使用这些数据：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">&lt;% for (var link in site.data.menu) &#123; %&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%= site.data.menu[link] %&gt;</span></span></span>&quot;&gt; &lt;%= link %&gt; <span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&lt;/a&gt;</span></span></span><br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p>render like this :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs render">这个代码片段使用了 HTML 标签来创建三个超链接。<br>&lt;a href=&quot;/&quot;&gt; Home &lt;/a&gt;<br>&lt;a href=&quot;/gallery/&quot;&gt; Gallery &lt;/a&gt;<br>&lt;a href=&quot;/archives/&quot;&gt; Archives &lt;/a&gt;<br></code></pre></td></tr></table></figure><h2 id="1-5-Front-matter"><a href="#1-5-Front-matter" class="headerlink" title="1.5 Front-matter"></a>1.5 Front-matter</h2><p>Front-matter 是文件开头的 YAML 或 JSON 代码块，用于配置写作设置。 以 YAML 格式书写时，Front-matter 以三个破折号结束；以 JSON 格式书写时，Front-matter 以三个分号结束。</p><p><strong>YAML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p><strong>JSON</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hello World&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2013/7/13 20:46:25&quot;</span><br>;;;<br></code></pre></td></tr></table></figure><p><strong>设置 &amp; 默认值</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">layout:</span> <span class="hljs-string">布局</span><span class="hljs-string">config.default_layout</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><span class="hljs-string">文章的文件名</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">建立日期</span><span class="hljs-string">文件建立日期</span><br><span class="hljs-attr">updated:</span> <span class="hljs-string">更新日期</span><span class="hljs-string">文件更新日期</span><br><span class="hljs-attr">comments:</span> <span class="hljs-string">开启文章的评论功能</span><span class="hljs-literal">true</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">标签（不适用于分页）</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">分类（不适用于分页）</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">覆盖文章的永久链接.</span> <span class="hljs-string">永久链接应该以</span> <span class="hljs-string">/</span> <span class="hljs-string">或</span> <span class="hljs-string">.html</span> <span class="hljs-string">结尾</span><span class="hljs-literal">null</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">纯文本的页面摘要。</span> <span class="hljs-string">使用</span> <span class="hljs-string">该插件</span> <span class="hljs-string">来格式化文本</span><br><span class="hljs-attr">disableNunjucks:</span> <span class="hljs-string">启用时禁用</span> <span class="hljs-string">Nunjucks</span> <span class="hljs-string">标签</span> &#123;&#123; &#125;&#125;<span class="hljs-string">/&#123;%</span> <span class="hljs-string">%&#125;</span> <span class="hljs-string">和</span> <span class="hljs-string">标签插件</span> <span class="hljs-string">的渲染功能</span><span class="hljs-literal">false</span><br><span class="hljs-attr">lang:</span> <span class="hljs-string">设置语言以覆盖</span> <span class="hljs-string">自动检测</span><span class="hljs-string">继承自</span> <span class="hljs-string">_config.yml</span><br><span class="hljs-attr">published:</span> <span class="hljs-string">文章是否发布</span><span class="hljs-string">对于</span> <span class="hljs-string">_posts</span> <span class="hljs-string">下的文章为</span> <span class="hljs-literal">true</span><span class="hljs-string">，对于</span> <span class="hljs-string">_draft</span> <span class="hljs-string">下的文章为</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h1 id="2-常用功能"><a href="#2-常用功能" class="headerlink" title="2. 常用功能"></a>2. 常用功能</h1><h2 id="2-1-写作"><a href="#2-1-写作" class="headerlink" title="2.1 写作"></a>2.1 写作</h2><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p><code>post</code>是默认的布局，但你也可以提供自己的布局。 您可以通过编辑<code>_config.yml</code>中的<code>default_layout</code>设置来更改默认布局。</p><h3 id="2-1-1-布局（Layout）"><a href="#2-1-1-布局（Layout）" class="headerlink" title="2.1.1 布局（Layout）"></a>2.1.1 布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。通过主题创建的文件保存在不同路径。新创建的文章(posts)会被保存到<code>source/_posts</code>文件夹中。</p><h3 id="2-1-2-草稿"><a href="#2-1-2-草稿" class="headerlink" title="2.1.2 草稿"></a>2.1.2 草稿</h3><p><code>draft</code>布局用于保存草稿， Drafts 是未发布的文章， Drafts 会被保存到<code>source/_drafts</code>文件夹中。可以用<code>publish</code>命令发布草稿到<code>_posts</code>文件夹中。<code>publish</code>类似于<code>hexo new</code>命令，但会自动将草稿移动到<code>_posts</code>文件夹中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo publish [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><h3 id="2-1-3-Scaffold"><a href="#2-1-3-Scaffold" class="headerlink" title="2.1.3 Scaffold"></a>2.1.3 Scaffold</h3><p>在新建文章时，Hexo 会根据<code>scaffolds</code>文件夹内相对应的文件来建立文件。 例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new tech &quot;My Gallery&quot;<br></code></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在<code>scaffolds</code> 文件夹中寻找<code>tech.md</code>，并根据其内容建立文章。 </p><h2 id="2-2-与Vscode的集成"><a href="#2-2-与Vscode的集成" class="headerlink" title="2.2 与Vscode的集成"></a>2.2 与Vscode的集成</h2><p>使用Vscode时，可直接编辑 markdown文件。为了适配hexo，需要做一些小的配置</p><ol><li>图片引用：在vscode设置中搜索<code>markdown</code>找到<code>Copy Files</code>的<code>Distination</code>,</li></ol><p><code>item</code>设置为<code>*.md</code>, <code>value</code>设置为<code>../img/$&#123;documentBaseName&#125;/$&#123;fileName&#125;</code></p><p>如有更多vscode配置参考<a href="https://code.visualstudio.com/docs/editor/glob-patterns">glob-patterns</a></p><h2 id="2-3-自定义命令"><a href="#2-3-自定义命令" class="headerlink" title="2.3 自定义命令"></a>2.3 自定义命令</h2><h3 id="2-3-1-Hexo-的插件机制"><a href="#2-3-1-Hexo-的插件机制" class="headerlink" title="2.3.1 Hexo 的插件机制"></a>2.3.1 Hexo 的插件机制</h3><p>Hexo 本质上是一个基于 Node.js 的静态网站生成器，它的插件机制是围绕 JavaScript 构建的。通过 JavaScript 编写的插件，可以无缝集成到 Hexo 中，利用 Hexo 提供的 API 和功能。这使得插件可以直接与 Hexo 的内部机制交互。  </p><ul><li>访问 Hexo 的配置和上下文：可以轻松访问 Hexo 的配置文件、路径、内容处理器等。</li><li>利用 Hexo 的 API：如文件生成、路径解析、内容渲染等 API，这些 API 是通过 JavaScript 暴露的。</li><li>跨平台支持：JavaScript 是跨平台的，Hexo 本身就是用 JavaScript 编写的，因此使用 JavaScript 使插件更容易在各种操作系统上运行。</li></ul><h3 id="2-3-2-创建一个自定义命令-hexo-nnn"><a href="#2-3-2-创建一个自定义命令-hexo-nnn" class="headerlink" title="2.3.2 创建一个自定义命令 hexo nnn"></a>2.3.2 创建一个自定义命令 hexo nnn</h3><ol><li><p>引入依赖<br>在项目根目录下，修改<code>package.json</code>文件，添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo generate&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;clean&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;nnn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo nnn&quot;</span> <span class="hljs-comment">// 新增内容</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aplayer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.10.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^6.3.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;inquirer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.0.0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 新增内容</span><br>    <span class="hljs-attr">&quot;moment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.29.1&quot;</span> <span class="hljs-comment">// 新增内容</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>引入后执行<code>npm install</code>命令安装依赖</p><blockquote><p>可通<code>npm config set registry https://mirror.cloud.huawei.com/npm/registry</code>添加华为云npm镜像<br>通过<code>npm config get registry</code>查看当前镜像源</p></blockquote></li><li><p>创建插件文件<br>在你的 Hexo 项目根目录下，创建一个名为<code>scripts</code>的文件夹（如果它不存在的话），然后在<code>scripts</code>文件夹中创建一个新的<code>JavaScript</code> 文件，<code>nnn.js</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;inquirer&#x27;</span>);<br><span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;moment&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-comment">// const hexo = require(&#x27;hexo&#x27;); // node_modules/hexo/lib/hexo/index.js:303:18已经声明</span><br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;nnn&#x27;</span>, <span class="hljs-string">&#x27;Generate a new post with layout selection&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>) &#123;<br>  <span class="hljs-keyword">const</span> scaffoldsDir = path.<span class="hljs-title function_">join</span>(hexo.<span class="hljs-property">base_dir</span>, <span class="hljs-string">&#x27;scaffolds&#x27;</span>);<br>  <span class="hljs-keyword">const</span> scaffolds = fs.<span class="hljs-title function_">readdirSync</span>(scaffoldsDir)<br>                      .<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> file.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;.md&#x27;</span>))<br>                      .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> file.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;.md&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>));<br>  <span class="hljs-keyword">const</span> defaultLayout = <span class="hljs-string">&#x27;tech&#x27;</span>; <span class="hljs-comment">// 默认模板为 tech.md</span><br>  <span class="hljs-keyword">const</span> questions = [<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;list&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;layout&#x27;</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Choose a layout:&#x27;</span>,<br>      <span class="hljs-attr">choices</span>: scaffolds,<br>      <span class="hljs-attr">default</span>: defaultLayout <span class="hljs-comment">// 设置默认选项</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;input&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;title&#x27;</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Enter the post title:&#x27;</span><br>    &#125;<br>  ];<br><br>  <span class="hljs-keyword">const</span> answers = <span class="hljs-keyword">await</span> inquirer.<span class="hljs-title function_">prompt</span>(questions);<br><br>  <span class="hljs-keyword">const</span> date = <span class="hljs-title function_">moment</span>().<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>);<br>  <span class="hljs-keyword">const</span> dayOfWeek = <span class="hljs-title function_">moment</span>().<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;ddd&#x27;</span>); <span class="hljs-comment">// 获取星期几的缩写（如 Mon, Tue, Wed）</span><br>  <span class="hljs-keyword">let</span> title = answers.<span class="hljs-property">title</span>.<span class="hljs-title function_">trim</span>();<br>  <span class="hljs-comment">// 获取模板文件名的首字母并转换为大写</span><br>  <span class="hljs-keyword">const</span> initial = answers.<span class="hljs-property">layout</span>.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>();<br><br>  <span class="hljs-keyword">if</span> (title === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Title cannot be empty!&#x27;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  title = <span class="hljs-string">`<span class="hljs-subst">$&#123;date&#125;</span>-<span class="hljs-subst">$&#123;dayOfWeek&#125;</span>-<span class="hljs-subst">$&#123;initial&#125;</span>-<span class="hljs-subst">$&#123;title&#125;</span>`</span>;<br>  <span class="hljs-keyword">const</span> slug = <span class="hljs-string">`<span class="hljs-subst">$&#123;title.replace(/\s+/g, <span class="hljs-string">&#x27;&#x27;</span>)&#125;</span>.md`</span>;<br><br><br>  <span class="hljs-keyword">const</span> targetPath = path.<span class="hljs-title function_">join</span>(hexo.<span class="hljs-property">source_dir</span>, <span class="hljs-string">&#x27;_posts&#x27;</span>, slug);<br>  <br>  <span class="hljs-comment">// 使用指定的布局创建文章内容</span><br><br>  <span class="hljs-keyword">const</span> scaffoldPath = path.<span class="hljs-title function_">join</span>(scaffoldsDir, <span class="hljs-string">`<span class="hljs-subst">$&#123;answers.layout&#125;</span>.md`</span>);<br>  <span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(scaffoldPath, <span class="hljs-string">&#x27;utf-8&#x27;</span>);<br>  <br>  <span class="hljs-comment">// 替换内容中的默认占位符</span><br>  content = content.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/title:\s*.+/</span>, <span class="hljs-string">`title: <span class="hljs-subst">$&#123;title&#125;</span>`</span>);<br>  content = content.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/date:\s*.+/</span>, <span class="hljs-string">`date: <span class="hljs-subst">$&#123;moment().format(<span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)&#125;</span>`</span>);<br><br>  <span class="hljs-comment">// 写入目标文件</span><br>  fs.<span class="hljs-title function_">writeFileSync</span>(targetPath, content);<br>  <br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Post generated at: <span class="hljs-subst">$&#123;targetPath&#125;</span>`</span>);<br>&#125;);<br><br><br></code></pre></td></tr></table></figure><p>配置hexo generate前置操作, 在生成public内容前，完成图片资源路径的替换。以达到本地markdown编辑器预览和Hexo博客上图片均可以显示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;before_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 使用正则表达式查找并替换所有布局类型的图片路径</span><br>    <br>    data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/!\[([^\]]*)\]\(([0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;-[a-zA-Z]&#123;3&#125;-[A-Z]&#123;1&#125;-[\u4E00-\u9FA5A-Za-z0-9_]+)(\/)([^)]+\))/g</span>, <span class="hljs-string">&#x27;![$1]($4)&#x27;</span>); <span class="hljs-comment">//正则表达式还得多学啊！！！！！</span><br>     <br>    <span class="hljs-keyword">return</span> data;<br>  &#125;);<br>  <br></code></pre></td></tr></table></figure><p>要是Hexo生效，还需修改配置文件<code>_config.yml</code>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 启用文章资源文件夹</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span> <br><br></code></pre></td></tr></table></figure><ol start="3"><li>运行命令<br>在命令行中，输入<code>hexo nnn</code>，即可生成一个新的文章，并在生成过程中让用户选择布局和输入文章标题。<blockquote><p>tips: layout可在<code>/scaffolds</code>目录下增加</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-08-11-Sun-T-Nginx反向代理配置</title>
    <link href="/2024/08/11/2024-08-11-Sun-T-Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/08/11/2024-08-11-Sun-T-Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20240731-Wed-T-Python环境管理</title>
    <link href="/2024/07/31/2024-07-31-Wed-T-Python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/"/>
    <url>/2024/07/31/2024-07-31-Wed-T-Python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>在使用Python开发时，遇到了很多配置环境的情形。有时需要安装不同版本的Python，有时需要安装不同的Python包，有时需要安装不同的Python包的不同版本。</p><p>最开始使用时我基本上都是看网上的教程，不同的Python项目可能使用不同的环境管理工具，不知不觉就用过了pip、conda、mamba、virtualenv、venv等等。这些工具各有优劣，有时候我也会混用，导致环境变量混乱，有时候还会出现冲突。</p><p>由于一直没有什么一致性，导致电脑上的Python环境比较乱，我自己也感觉云里雾里的，所以我打算总结一下这些工具的使用方法，以及它们的优缺点。最后会给出我自己推荐的一些使用方法。</p><h1 id="2-Python管理工具分类"><a href="#2-Python管理工具分类" class="headerlink" title="2.Python管理工具分类"></a>2.Python管理工具分类</h1><p>Python管理工具可以分为两类：</p><p>包管理工具：用于安装、卸载、更新Python包，如pip、conda、mamba等。</p><p>环境管理工具：用于管理Python环境，如venv、virtualenv、conda、mamba等。</p><p>我们这里主要讨论环境管理工具，因为包管理工具的使用方法比较简单，而且大多数情况下我们都会使用pip，所以这里不再赘述。</p><h1 id="3-Python环境管理工具"><a href="#3-Python环境管理工具" class="headerlink" title="3. Python环境管理工具"></a>3. Python环境管理工具</h1><h2 id="3-1-venv"><a href="#3-1-venv" class="headerlink" title="3.1 venv"></a>3.1 venv</h2><p>venv是Python自带的环境管理工具，其使用起来是最简单，也是最不需要操心的。<br>使用方法</p><ol><li><p>创建一个新的环境：<code>python -m venv .venv</code><br> 这样就会在当前目录下创建一个.venv的文件夹，里面包含了一个新的Python环境。当然，这里的.venv可以替换成任何你想要的名字，用.venv是因为这样可以创建一个自动隐藏的文件夹，在git中也很容易把它忽略掉。</p><p> 注意，这里的python是你想要创建环境的Python版本，如果你有多个Python版本，可以使用python3或者python3.10等。</p></li><li><p>激活这个环境：<br> <code>source .venv/bin/activate</code></p></li><li><p>安装Python包：<br> 在激活环境之后，使用pip安装Python包会把包安装到这个环境中，而不是全局环境。安装的包会放在.venv&#x2F;lib&#x2F;python3.10&#x2F;site-packages目录下。<br> <code>pip install numpy</code><br> 注意，这里的numpy是包名，你可以替换成任何你想要的包名。</p></li><li><p>退出环境：<br> 在环境中使用deactivate命令可以退出环境。<br> <code>deactivate</code><br>优缺点<br> 优点：<br> 原生工具，简单易用，不需要安装额外的软件。<br> 速度快，因为不需要下载额外的软件包。<br> 环境隔离，不会影响全局环境。<br> 可以在任何地方创建环境，不需要管理员权限。<br> 每个项目中的环境都在本项目目录下，与其他项目做到了物理隔离，不易弄混。<br> 缺点：<br> 每个项目都需要创建一个新的环境，如果有很多项目，会占用很多空间。<br> 无法共享环境，如果有多个项目使用同一个环境，需要重复创建。<br> 不好切换Python版本，每个环境都是一个Python版本，无法切换。<br> 只适用于Python 3.3及以上版本。<br> 简单来说，如果你不在意空间占用，不需要切换Python版本，那么venv是一个很好的选择。</p></li></ol><h2 id="3-2-virtualenv"><a href="#3-2-virtualenv" class="headerlink" title="3.2 virtualenv"></a>3.2 virtualenv</h2><pre><code class="hljs">由于venv有很大的占用空间的问题，所以有人开发了virtualenv，它是一个第三方的环境管理工具，可以解决venv的一些问题。virtualenv的使用方法和venv基本一样，只是需要安装virtualenv这个包。</code></pre><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre><code class="hljs">1. 安装virtualenv：`pip install virtualenv`2. 创建一个新的环境：`virtualenv .venv` (在当前目录下创建一个.venv文件夹)3. 如果你想指定Python版本，可以使用如下命令：`virtualenv -p python3.10 .venv`4. 激活这个环境：`source .venv/bin/activate`5. 安装Python包：`pip install numpy`6. 退出环境：`deactivate`</code></pre><p>创建环境激活后，VSCode可自动识别</p><p>但它和venv的区别在于，virtualenv会复用系统的Python库，不会重复安装，所以占用的空间会小很多。如果你不想复用系统的Python库，可以使用<code>--no-site-packages</code>选项，在本项目中安装全新的Python库。</p><p>优缺点<br>    优点：</p><pre><code class="hljs">    可以指定Python版本。    可以共享环境，不需要重复创建。    占用空间小，不会重复安装Python库。    适用于Python 2.7及以上版本。缺点：    非原生工具，需要安装额外的软件。    简单来说，如果你在意空间占用，且想要和venv相似的使用体验，那么virtualenv是一个很好的选择。</code></pre><h2 id="3-3-conda"><a href="#3-3-conda" class="headerlink" title="3.3 conda"></a>3.3 conda</h2><p>conda是一个非常强大的环境管理工具，它不仅可以管理Python环境，还可以管理其他语言的环境，如R、Julia等。<br>conda、Anaconda、miniconda、mamba、micromamba之间的关系<br>conda是Anaconda的一部分，Anaconda是一个数据科学家常用的工具包，里面包含了很多数据科学家常用的软件包，如numpy、pandas、scipy等。但有用户反映Anaconda安装的软件包太多，占用空间太大，所以有人开发了miniconda，它是Anaconda的精简版，只包含了conda和一些基本的软件包。</p><p>不管是Anaconda还是miniconda，都是使用conda这个包管理工具来管理环境，但conda在安装软件包时是单线程的，速度比较慢，所以有人开发了mamba，它是conda的一个加速版，速度比conda快很多。</p><p>mamba和conda的使用方法基本一样，只是在安装软件包时使用mamba代替conda。用户基本可以认为，mamba命令是conda命令的一个别名。</p><p>micromamba是mamba的一个精简版，micromamba的base环境是空的，不包含任何软件包。</p>]]></content>
    
    
    <categories>
      
      <category>Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thoughts</tag>
      
      <tag>posts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-10-15-R-如何阅读一本书</title>
    <link href="/2023/10/15/2023-10-15-R-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <url>/2023/10/15/2023-10-15-R-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>从五月份开始直至昨天，断断续续读完了这本书，但这个过程还是过于走马观花。因为是走马观花，所以大部分的内容根本没有深入理解，更谈不让将之运用于实践了。不过我知道这是一本好书，一本对于我的个人发展是一本好书，它能指导我的阅读。而阅读本本身可以让我获取更多的思想以及思考方式，所以重读这本书是很有必要的。而在这里，我也需要通过写读书笔记的方式来辅助我对这本书对我有利的内容尽可能多地进行吸纳。</p><p>我会按照这本书的结构来进行读书笔记的书写，除了对于文中重要内容的复述，也会加入我个人新的思考。</p><h1 id="第一篇-阅读的层次"><a href="#第一篇-阅读的层次" class="headerlink" title="第一篇 阅读的层次"></a>第一篇 阅读的层次</h1><h2 id="第1章-阅读的活力与艺术"><a href="#第1章-阅读的活力与艺术" class="headerlink" title="第1章 阅读的活力与艺术"></a>第1章 阅读的活力与艺术</h2><p>本书的目的是为了那些以增进自己理解力为目标而阅读的人提供指导</p><ul><li>主动地阅读</li></ul><p>​阅读越主动，收获也就越多</p><p>​作者与读者的关系就如同发球手和捕球手的关系一样。作者“发出”某个思想，读者需要主动地去“捕获”这个思想。</p><p>​首先，阅读需要主动。其次，阅读需要有技巧。</p><ul><li><p>阅读的目标：为获得资讯而读，以及为求得理解而读</p><p>只有一种方式是真正地在阅读。没有任何外力的帮助，你就是要读这本书。你什么都没有，制凭借着内心的力量，玩味着眼前的字句，慢慢地提升自己，从只有模糊的概念到更清楚的理解为止。这样的一种提升，是在阅读时的一种脑力活动，也是更高的阅读技巧。这种阅读是让一本书向你既有的理解力做挑战。</p></li><li><p>阅读就是学习：指导型的学习，以及自我发现型的学习之间的差异。</p><p>医生努力为病人做许多事情，但最终的结论是这个病人必须自己好起来，变得健康起来。农夫为他的植物或动物做了许多事，结果是这些动植物必须自己长大，变得更好。同样的，老师可能用尽了方法来教学生，学生却必须自己能学习才行。当他学习到了，知识就会在他脑中生根发芽。</p></li></ul><h2 id="第2章-阅读的层次"><a href="#第2章-阅读的层次" class="headerlink" title="第2章 阅读的层次"></a>第2章 阅读的层次</h2>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-10-11-T-JAVA</title>
    <link href="/2023/10/11/2023-10-11-T-JAVA/"/>
    <url>/2023/10/11/2023-10-11-T-JAVA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-易忘知识点"><a href="#1-易忘知识点" class="headerlink" title="1. 易忘知识点"></a>1. 易忘知识点</h1><blockquote><p>用于记录已遗忘的知识点</p></blockquote><h2 id="1-1-基础语法"><a href="#1-1-基础语法" class="headerlink" title="1.1 基础语法"></a>1.1 基础语法</h2><ul><li><p>一个JAVA文件中的不同类中均可以有public static 方法， 并且可用<code>java 类名</code>的方式运行public static方法</p></li><li><p>javadoc 用于生成java文件的文档，使用方式<code>javadoc xxx.java</code>.</p></li><li><p>补码 &#x3D; 反码 + 1， 计算机运行使用补码</p><ul><li>正数：原码，反码，补码都一样：第一位是符号位，0代表正数，数值位为二进制数</li><li>负数：<ul><li>原码：第一位是符号位，1代表负数，数值位为2进制数</li><li>反码：第一位是符号位，1代表负数，数值位为对应原码的数值位取反</li><li>补码：反码数值位加1</li></ul></li></ul></li><li><p>方法重载（Overload）</p><ul><li><p>方法名必须相同</p></li><li><p>形参列表必须不同：参数顺序，类型，个数，至少有一样不同</p></li><li><p>返回类型：无要求</p><p>注意：仅仅是形参名不同无法实现方法重载</p></li></ul></li><li><p>可变参数</p><p>java允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">varPara</span><span class="hljs-params">(<span class="hljs-type">int</span>... parameters)</span>&#123;<br>  <span class="hljs-comment">//parameters 是一个数组</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>可变参数的实参可以为0或任意多个</li><li>可变参数的实参可以是数组</li><li>可变参数可以和普通类型的参数放在一个形参列表里，但需要保证可变参数在最后</li><li><strong>一个形参列表中只能出现一个可变参数</strong></li></ol></li><li><p>构造器</p><ul><li>构造器没有返回值</li><li>方法名和类名必须相同</li><li>参数列表和成员方法一样的规则</li><li>构造器的调用由系统完成</li><li>构造器，即构造方法可以重载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Constructer</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Constructer</span><span class="hljs-params">()</span>&#123;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>作用：对新对象的初始化</p></li><li><p>反编译</p><p><code>javap [-c -v] 类名</code></p><p>-c 对代码反汇编</p><p>-v 输出附加信息</p></li></ul><h2 id="1-2-面向对象"><a href="#1-2-面向对象" class="headerlink" title="1.2 面向对象"></a>1.2 面向对象</h2><ul><li><p>代码块</p><p>属于类中的成员，将逻辑语句封装在方法体中，通过“{}”包围起来。</p><p>和方法不同，没有方法名，没有返回值，没有参数，只有方法体，不通过类或对象显式调用。在加载类或者创建对象时隐式调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符]&#123;<br>  code...<br>&#125;; <span class="hljs-comment">// 此分号可有可无</span><br></code></pre></td></tr></table></figure><blockquote><p>修饰符 可选，使用修饰符时只能用static</p><p>代码块使用场景：e.g. 当多个构造器中有相同的代码语句时，可以将其放入代码块中</p><p>创建对象时，系统先调用代码块，后调用构造器</p></blockquote></li><li><p>类加载顺序</p><ol><li>父类的静态代码块和静态属性</li><li>子类的静态代买块和静态属性</li><li>父类的普通代码块和普通属性</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性</li><li>子类的构造方法</li></ol></li><li><p><code>final</code>关键字</p><p>使用情况:</p><p>(1) 当一个类不希望被继承时, 可使用final关键字修饰</p><p>(2) 当不希望类中某个方法被子类重写时, 可用final关键字修饰</p><p>(3) 当不希望类中某个属性的值被修改时, 使用final关键字修饰</p><p>(4) 当不希望某个局部变量被修改时, 使用final关键字修饰</p></li><li><p><code>abstract</code> 类</p><p>当不打算在父类中定义某些方法,但又想提前声明这些方法时, 使用<code>abstract</code>修饰这个父类以及这些方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">abstract</span> Test&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 没有方法体</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>interface</p><p>JDK8.0后接口可以有静态方法, 默认方法</p><p>在接口中抽象方法可以省略<code>abstract</code>关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Test</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>   <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 默认方法, 注意要使用default关键字修饰</span><br>     System.out.println(<span class="hljs-string">&quot;ok..&quot;</span>);<br>   &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 静态方法</span><br>    System.out.println(<span class="hljs-string">&quot;test..&quot;</span>); <br>  &#125;<br>&#125;<br><br>  <br>  <br>  <br></code></pre></td></tr></table></figure><p>一个类可以同时实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>, IB, ...&#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>接口中的属性是<code>final static</code>修饰的,  例如在接口中写<code>int a = 1;</code> , 实际上是<code>public static final int a = 1;</code></p></li></ul></li><li><p>内部类</p><p>一个类的内部又完整地嵌套了另一个类结构. 被嵌套的类称为内部类(inner class), 嵌套的其他类称为外部类(outer class). </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 基本语法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<span class="hljs-comment">// 外部类</span><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<span class="hljs-comment">// 内部类</span><br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内部类的分类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 定义在外部类的局部位置(如方法中, 代码块中)</span><br><span class="hljs-comment">//1.1 局部内部类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer01</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner01</span>&#123; <span class="hljs-comment">// 可使用final修饰</span><br>      <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m10</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(A.<span class="hljs-built_in">this</span>.n1); <span class="hljs-comment">// 可以直接访问所在外部内的所有成员, 使用 外部类名.this精确定位</span><br>      &#125;<br>    &#125;<br>  &#125;<span class="hljs-comment">//局部内部类的作用域只在对应的方法体内或代码块中</span><br>&#125;<br><br><span class="hljs-comment">//1.2 匿名内部类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer02</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">IA</span> <span class="hljs-variable">ia</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IA</span>()&#123; <span class="hljs-comment">// class xxx implements IA&#123;...&#125;</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(n2);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span>&#123;&#125;<br><br><span class="hljs-comment">//2. 定义在外部类的成员变量位置</span><br><span class="hljs-comment">//2.1 成员内部类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer03</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(n3);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//2.2 静态内部类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer04</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n4</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(n4);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>枚举</p></li></ul><p>  枚举: 枚举属于一种特定的类, 里面只包含一组有限的特定的对象</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 自定义枚举</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br>    <span class="hljs-comment">// public Season season = new Season(&quot;ok&quot;, &quot;001&quot;);</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SPRING</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;Spring&quot;</span>, <span class="hljs-string">&quot;Warm&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SUMMER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;Summer&quot;</span>, <span class="hljs-string">&quot;Hot&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">AUTUMN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;Autumn&quot;</span>, <span class="hljs-string">&quot;Cozy&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">WINTER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;Winter&quot;</span>, <span class="hljs-string">&quot;Cold&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String name, String desc)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br>&#125;<br><br><br><br><br><br><br><br><span class="hljs-comment">//2. 使用enum关键字</span><br><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season_</span>&#123;<br>    <span class="hljs-comment">//1. 多个常量时， 用&#x27;,&#x27;间隔</span><br>    <span class="hljs-comment">//2. 常量对象需要定义在类的最前面</span><br><br>    SPRING(<span class="hljs-string">&quot;Spring&quot;</span>, <span class="hljs-string">&quot;Warm&quot;</span>), SUMMER(<span class="hljs-string">&quot;Summer&quot;</span>, <span class="hljs-string">&quot;Hot&quot;</span>), AUTUMN(<span class="hljs-string">&quot;Autumn&quot;</span>,<span class="hljs-string">&quot;Cozy&quot;</span>), WINTER(<span class="hljs-string">&quot;Winter&quot;</span>,<span class="hljs-string">&quot;Cold&quot;</span>);<br>    <br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> String desc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season_</span><span class="hljs-params">(String name, String desc)</span>&#123;<br>      <span class="hljs-built_in">this</span>.name = name;<br>      <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>注解</p><p>注解(Annotation)也被称为元数据, 用于修饰包, 类, 方法, 属性, 构造器, 局部变量等数据信息</p><p>不影响程序逻辑, 但是注解可以被编译和执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. @Override 标明方法为重写方法</span><br><span class="hljs-comment">//2. @Deprecated 标明某个类或方法已过时</span><br><span class="hljs-comment">//3. @SuppressWarnings 抑制编译器警告</span><br><br><br><span class="hljs-comment">//元注解, 注解的注解</span><br><span class="hljs-comment">//1. @Retention(RetentionPolicy.SOURCE)  指定注解的作用范围(SOURCE(编译器使用后直接丢弃), CLASS(记录在class文件, 但jvm运行时不保留), RUNTIME)</span><br><span class="hljs-comment">//   代码(SOURCE) ==&gt; class 文件(class) ==&gt; JVM运行(RUNTIME)</span><br><span class="hljs-comment">//2. Target(ElementType.METHOD) 指定注解的使用范围(CONSTRUCTURE, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE)</span><br><span class="hljs-comment">//3. Documented 指定该注解是否在javadoc中显示</span><br><span class="hljs-comment">//4. Inherited 子类会继承父类注解</span><br></code></pre></td></tr></table></figure><ul><li><p>异常</p><p>运行时异常: 程序运行时发生异常</p><p>编译时异常: 编译器检测出的异常</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Java.lang.Throwable<br>  -Error<br>  -Exception<br>  --编译时异常<br>  --IOException<br>  --SQLException<br>    --运行时异常 RuntimeException<br>  --NullPointException<br>  --ArrayindexOutOfBundsException<br>  --ArithmeticException<br>  --ClassCastExcetption<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. try-catch-finally</span><br><span class="hljs-keyword">try</span>&#123;<br>  ...<br>&#125;<span class="hljs-keyword">catch</span>(NullPointerException e)&#123;<br>  e. sss;<br>&#125;<span class="hljs-keyword">catch</span>(ArithmeticException e)&#123;<br>  <br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>  <br>&#125;<br><br><span class="hljs-comment">// 2. throws</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> &#123;<br>  <br>&#125;<br><span class="hljs-comment">//当抛出的是运行时异常, 调用该方法的方法可以不处理</span><br><span class="hljs-comment">//当抛出的是编译时异常, 调用该方法的方法需要进行处理</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="1-3-集合"><a href="#1-3-集合" class="headerlink" title="1.3 集合"></a>1.3 集合</h2><h1 id="2-重难点"><a href="#2-重难点" class="headerlink" title="2. 重难点"></a>2. 重难点</h1><h2 id="2-1-设计模式"><a href="#2-1-设计模式" class="headerlink" title="2.1 设计模式"></a>2.1 设计模式</h2><h3 id="2-1-1-单例设计模式"><a href="#2-1-1-单例设计模式" class="headerlink" title="2.1.1 单例设计模式"></a>2.1.1 单例设计模式</h3><p>所谓的单例设计模式，就是采取一定的方法保证在整个软件系统中，对于某个类只能存在一个实例，并且该类只提供一个取得其实例的方法。</p><p>单例模式有两种：懒汉式和饿汉式</p><ul><li><p>饿汉式</p><p>(1) 构造器私有化</p><p>(2) 类的内部创建对象, 同时创建实例</p><p>(3) 向外暴露一个静态的公共方法</p><p>(4) 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleTon</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingleTon</span><span class="hljs-params">()</span>&#123;&#125;;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingleTon</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleTon</span>();<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingleTon <span class="hljs-title function_">getSingleTon</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> instance;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>懒汉式</p><p>(1) 构造器私有化</p><p>(2) 类的内部创建对象</p><p>(3) 向外暴露一个静态的公共方法, 同时创建实例</p><p>(4) 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleTon</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingleTone</span><span class="hljs-params">()</span>&#123;&#125;;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingleTon instance;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingleTon <span class="hljs-title function_">getSingleTon</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">// 有线程风险</span><br>      instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleTon</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> instance;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-1-2-模版设计模式"><a href="#2-1-2-模版设计模式" class="headerlink" title="2.1.2 模版设计模式"></a>2.1.2 模版设计模式</h3><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">abstract</span> Template&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job</span><span class="hljs-params">()</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    job();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-JVM"><a href="#3-JVM" class="headerlink" title="3. JVM"></a>3. JVM</h1><h2 id="3-1-JAVA和JVM简介"><a href="#3-1-JAVA和JVM简介" class="headerlink" title="3.1 JAVA和JVM简介"></a>3.1 JAVA和JVM简介</h2><h2 id="3-2-虚拟机与JAVA虚拟机"><a href="#3-2-虚拟机与JAVA虚拟机" class="headerlink" title="3.2 虚拟机与JAVA虚拟机"></a>3.2 虚拟机与JAVA虚拟机</h2><h2 id="3-3-JVM整体结构"><a href="#3-3-JVM整体结构" class="headerlink" title="3.3 JVM整体结构"></a>3.3 JVM整体结构</h2><h2 id="3-4-Java代码执行流程"><a href="#3-4-Java代码执行流程" class="headerlink" title="3.4 Java代码执行流程"></a>3.4 Java代码执行流程</h2><h2 id="3-5-JVM架构模型"><a href="#3-5-JVM架构模型" class="headerlink" title="3.5 JVM架构模型"></a>3.5 JVM架构模型</h2><h2 id="3-6-JVM生命周期"><a href="#3-6-JVM生命周期" class="headerlink" title="3.6 JVM生命周期"></a>3.6 JVM生命周期</h2><h2 id="3-7-JVM发展历程"><a href="#3-7-JVM发展历程" class="headerlink" title="3.7 JVM发展历程"></a>3.7 JVM发展历程</h2><p>  JVM与JAVA体系结构<br>  类加载子系统-修改<br>  运行时数据区概述及线程<br>  程序计数器<br>  虚拟机栈<br>  本地方法接口<br>  本地方法栈<br>  堆<br>  方法区<br>  直接内存<br>  执行引擎<br>  StringTable<br>  垃圾回收概述<br>  垃圾回收相关算法<br>  垃圾回收相关概念<br>  垃圾回收器</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-09-19-E-文章管理</title>
    <link href="/2023/09/19/2023-09-19-E-%E6%96%87%E7%AB%A0%E7%AE%A1%E7%90%86/"/>
    <url>/2023/09/19/2023-09-19-E-%E6%96%87%E7%AB%A0%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文章管理"><a href="#文章管理" class="headerlink" title="文章管理"></a>文章管理</h1><blockquote><p>2023年9月19日生效</p></blockquote><p>时间-文章类型-文章名称</p><p>文章类型：</p><ul><li><p>日记随想：D : Thoughts</p></li><li><p>总结反思：S : Summary</p></li><li><p>技术文章：T : Tech</p></li><li><p>读书笔记：R : Reading</p></li><li><p>效率管理：E : Efficiency</p></li></ul><p><strong>日记</strong>： 记录一天经历的事件或所思所想</p><p><strong>技术文章</strong>：整理所学到的技术知识, 以及技术相关的工作学习收获</p><p><strong>读书笔记</strong>：整理每次阅读完一本书的知识点或者读后感。对于论述性书籍进行总结归纳，对于文学类书籍写读后感</p><p><strong>效率提升</strong>：记录能提升知识输入输出的方式。比如本文档可归为此分类。因为本文档用于阐述我所写文章的分类方式。</p><blockquote><ul><li>总结反思：S</li><li>技术文章：T</li><li>读书笔记：R</li><li>效率管理：E</li></ul><p><code>index_img: /img/</code>; <code>summary:</code> </p></blockquote><p><code>index_img</code> 用于设置博客文章在列表页面中的封面图片。你可以在文章的 Front-matter 中使用这个字段来指定图片的路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">My</span> <span class="hljs-string">Blog</span> <span class="hljs-string">Post</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024-08-11</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Blogging</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/my-image.jpg</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>/img/my-image.jpg</code> 是图片的路径，表示你的<code>Hexo</code>站点根目录下的 <code>source/img/my-image.jpg</code></p><p><code>summary</code>用于在文章列表页面显示自定义的摘要文本。如果没有指定<code>summary</code>，<code>Hexo</code>通常会自动截取文章内容的前几行作为摘要。你可以在<code>Front-matter</code>中手动设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">My</span> <span class="hljs-string">Blog</span> <span class="hljs-string">Post</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024-08-11</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Blogging</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/my-image.jpg</span><br><span class="hljs-attr">summary:</span> <span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">brief</span> <span class="hljs-string">summary</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">blog</span> <span class="hljs-string">post</span> <span class="hljs-string">that</span> <span class="hljs-string">will</span> <span class="hljs-string">appear</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">index</span> <span class="hljs-string">page.</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p><strong>多级分类</strong></p>]]></content>
    
    
    <categories>
      
      <category>Efficiency</category>
      
    </categories>
    
    
    <tags>
      
      <tag>知识管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-09-18-R-金字塔原理</title>
    <link href="/2023/09/18/2023-09-19-R-%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86/"/>
    <url>/2023/09/18/2023-09-19-R-%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>金字塔原理是美国作家芭芭拉·明托在1966年所著，她是著名咨询公司麦肯锡聘用的第一位女性咨询顾问。金字塔原理是她在1966年被派往英国，担任负责麦肯锡欧洲员工写作能力的职位后总结得出的。金字塔原理介绍了一种能清晰表达思路的有效方法。掌握了金字塔原理，就能在各行各业的各种事务中，重点突出，逻辑清晰地实现与相关人员的高效沟通。</p><p>我们都希望在思考，沟通表达，处理多种事务时能重点突出，思路清晰，层次分明。我们希望在表达时能正面准确的回应受众的问题。而金字塔原理这本书能够帮助我们实现这些愿景，用最高效的方式表达自己的观点。</p><h2 id="译者导言"><a href="#译者导言" class="headerlink" title="译者导言"></a>译者导言</h2><p>金字塔原理的基本结构是：结论先行，以上统下，归类分组，逻辑递进。先重要后次要，先总结后具体，先框架后细节，先论点后论据。</p><p>金字塔原理的具体做法是自上而下表达，自下而上思考，纵向总结概括，横向归类分组，序言讲故事，标题提炼思想精华。</p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>金字塔结构中，各种思想只有向上，向下，或横向的几种非常少的逻辑关系。思想是句子和段落要表达的内容。在开始表达前，先将自己的思想组织成金字塔结构，并按照逻辑关系的规则进行检查和修改。</p><p>本书的结构分为表达的逻辑，思考的逻辑，解决问题的逻辑和演示的逻辑四个部分：</p><p>一：介绍金字塔原理基本概念，以及如何利用这一原理构建基本的金字塔结构以应对简单的公文写作技巧。</p><p>二：介绍深入细致的把握思维的细节，以保证真实明确地表达自己的思想。</p><p>三：介绍如何在解决问题的不同阶段，使用多种框架组织分析过程，实现对思路的预先组织，从而更恰当地应用金字塔原理。</p><p>四：介绍设计PPT的技巧</p><p>附录：</p><ol><li>介绍分析法和科学法在解决问题过程中的应用和区别</li><li>介绍序言中的各种常用模式</li><li>概括本书的要点</li></ol><h1 id="第一篇-表达的逻辑"><a href="#第一篇-表达的逻辑" class="headerlink" title="第一篇 表达的逻辑"></a>第一篇 表达的逻辑</h1><p>先提出我们读者所遇到的困难–表达能力存在问题：几乎所有人都认为写东西是一件痛苦的事情，大家都希望自己能够更善于表达。很多人认为表达得更清楚意味着所表达的内容应该足够的简单和直接，但是他们在实际表达时又更容易使用繁琐的学术性语句。</p><p>阐述读者所面临的问题的原因：作为在工作之中的成年人拥有的用于提升个人能力的时间是有限的，而提升自己的写作风格需要大量的时间进行练习。所以大多数读者没有充足的提升自身写作水平的时间。</p><p>引导出作者想说明的主题：解决这个问题还有另一个方式，即改进写作内容（文章）的结构。写作的文章结构能很大程度上影响文章的逻辑性和可读性。改善文章的结构能使所写的文章更具条理性。</p><p>对主题的扩展说明：主要的思想总是从次要的思想中概括得出的，文章中的所有思想的理想结构也必然是金字塔结构。对于文章的受众来说，最容易理解文章，其中内容的顺序通常是先主要后次要，先总结概括，后逐层分析，先抽象归纳，后具体阐述。金字塔的结构中，思想与思想之间的关系可以是纵向的，上层思想是对下层思想的概括。也可以是横向的，同层思想之间相互隔离，组成不同角度的分析内容。</p><p>说明金字塔结构能解决表达问题的原理：人们通常更容易回答问题式的方式获取新的认知，这种疑问&#x2F;回答式的方式是人类的一种自然反应。而金字塔结构的文章能够让人们先对主要内容产生疑问，而后又在次要分析中寻找到答案。</p><p>本篇从5个章节对表达的逻辑进行了阐述。先解释了受众容易理解和记住金字塔结构的原因，然后详细介绍了金字塔结构的内部组成，再对构建金字塔的方法进行了描述，并提供序言写作的具体方法，最后介绍了演绎推理和归纳推理。</p><h2 id="第1章-为什么使用金字塔结构"><a href="#第1章-为什么使用金字塔结构" class="headerlink" title="第1章 为什么使用金字塔结构"></a>第1章 为什么使用金字塔结构</h2><p>相较于杂乱无章的事物，人们更容易记住和理解结构清晰的事物。这一现象体现了人类思维的基本规律：</p><ol><li>大脑自动进行信息归纳，便于理解和记忆</li><li>人们更容易理解和记住事先了解过的事物</li></ol><h3 id="1-1-1-归类分组，将思想组织成金字塔"><a href="#1-1-1-归类分组，将思想组织成金字塔" class="headerlink" title="1.1.1 归类分组，将思想组织成金字塔"></a>1.1.1 归类分组，将思想组织成金字塔</h3><p>“共性”是指事物之间具有某种相似点或共同点的特性。大脑容易将具有”共性”的事物组织在一起。</p><p>提出2个例子阐述人的大脑瞬时记忆无序的内容一般不会超过7个，说明大脑的能力是有限的。</p><p>提出人们为了记忆更多内容会将具有相似性的内容归类在一起。作者认为，<code>最有效的表达方式是：先提出总的概念，再列出具体项目，以自上而下的方式来表达思想。</code></p><h3 id="1-1-2-自上而下表达，结论先行"><a href="#1-1-2-自上而下表达，结论先行" class="headerlink" title="1.1.2 自上而下表达，结论先行"></a>1.1.2 自上而下表达，结论先行</h3><p>理清表达思想的顺序，是写出条理清晰文章的重要方式。而清晰的顺序就是先提出总结性思想，然后再阐述被总结的具体思想。</p><p>受众只能逐字逐句对作者表达的内容进行理解，受众也会假定作者要表达的内容是存在一定的逻辑关系的。即便作者没有事先指出这种逻辑关系，受众也会自主地去寻找其内部的关系。</p><p>受众在理解信息时，总是会倾向于将所接收的信息与已知的信息进行联系，寻找出它们之间的关系。为了保证受众所找到的关系是传递信息者所想要受众明白的关系，传递信息者需要提前将这种关系告诉受众，再对这一关系进行详细介绍，引出新的内容。</p><p>受众的思维能力是有限的，在理解传播信息者的信息时，可主要分为三部分。第一部分用于识别和解读接收到的词语，第二部分用于找出各种思想之间的关系，第三部分用于理解传递信息者所要表达的中心思想。</p><p>如果作者在传递给读者信息时能对所传递的信息先进行总结概括，然后按照自上而下的顺序进行解释，读者就能更容易理解作者传递的信息。</p><p>以上说明条理清晰的文章应当具有金字塔结构，并且不断自上而下地向读者传递信息。</p><h3 id="1-1-3-自下而上思考，总结概括"><a href="#1-1-3-自下而上思考，总结概括" class="headerlink" title="1.1.3 自下而上思考，总结概括"></a>1.1.3 自下而上思考，总结概括</h3><p>对于作者来说，要是所表达的思想具有清晰的逻辑性，需要不断地对自己的思想进行归类和概括，直到没有可与之关联的思想可以继续概括。按照这个逻辑，作者需要让自己的文章中有中心思想，即文章的主题，这个主题概括了文章之中所有的思想。这个思想就是作者想要表达的思想，所有在其下的思想越往下越具体，越详细，并且对作者所想要表达的主题思想有着解释和支撑作用。</p><p>金字塔结构中的思想通过3种方式相互关联：向上，向下和横向。</p><p>向上：上一层思想是对下一层思想的总结概括</p><p>向下：下一层思想是对上一层思想的解释和支撑</p><p>横向: 同一层思想彼此隔离，同时这些思想呈一定的顺序</p><p><strong>规则</strong>：</p><ol><li><p><strong>纵向：文章中任一层次上的思想必须是其下一层思想的概括</strong></p><p>将具体的思想概括为抽象的新思想。段落的主题是对段落中各个句子的概括。</p></li><li><p><strong>横向：每组中的思想必须属于同一逻辑范畴</strong></p><p>表达某个中心思想的一组思想必须在逻辑上具有共同点，这个共同点是用来支撑中心思想的。</p><p>检查自己分组的思想是否合理的简便方法是是否能用单一名词来表示所组织的思想。</p></li><li><p><strong>横向：每组中的思想必须按照逻辑顺序组织</strong></p><p>组织思想一般有4中逻辑顺序：</p><ol><li><p><strong>演绎顺序</strong>：大前提 小前提 结论</p><p>推理过程，通过已有规则对现象进行解释</p></li><li><p><strong>时间(步骤)顺序</strong>：第一，第二，第三</p><p>有时间上的顺序或者因果关系</p></li><li><p><strong>结构(空间)顺序</strong>： 波士顿，纽约，华盛顿</p><p>以某种现有的结构进行表达</p></li><li><p><strong>程度(重要性)顺序</strong>：最重要，次重要 …</p><p>按照类别组织思想</p></li></ol><p>我们所选择的逻辑顺序展现了我们组织思想时的分析过程。</p></li></ol><p>归纳：现象总结出规则</p><p>演绎：规则解释现象</p><h2 id="第2章-金字塔的内部结构"><a href="#第2章-金字塔的内部结构" class="headerlink" title="第2章 金字塔的内部结构"></a>第2章 金字塔的内部结构</h2><h2 id="第3章-如何构建金字塔"><a href="#第3章-如何构建金字塔" class="headerlink" title="第3章 如何构建金字塔"></a>第3章 如何构建金字塔</h2><h2 id="第4章-序言的具体写法"><a href="#第4章-序言的具体写法" class="headerlink" title="第4章 序言的具体写法"></a>第4章 序言的具体写法</h2><h2 id="第5章-演绎推理和归纳推理"><a href="#第5章-演绎推理和归纳推理" class="headerlink" title="第5章 演绎推理和归纳推理"></a>第5章 演绎推理和归纳推理</h2>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/18/hello-world/"/>
    <url>/2022/07/18/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span> <span class="hljs-comment"># 需要在根目录下执行</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server <span class="hljs-comment"># 需要在根目录下执行</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate <span class="hljs-comment"># 需要在根目录下执行</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
